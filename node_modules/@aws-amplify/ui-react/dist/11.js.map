{"version":3,"sources":["webpack:///./node_modules/@aws-amplify/ui-components/dist/esm-es5/amplify-form-field_4.entry.js"],"names":["amplifyFormFieldCss","AmplifyFormField","registerInstance","h","htmlFor","fieldId","id","name","description","type","handleInputChange","placeholder","value","inputProps","disabled","amplifyHintCss","AmplifyHint","amplifyInputCss","AmplifyInput","createEvent","ev","_this","onInput","amplifyLabelCss","AmplifyLabel"],"mappings":"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","file":"11.js","sourcesContent":["import { r as registerInstance, h, c as createEvent, H as Host } from './index-82dae9d1.js';\nvar amplifyFormFieldCss = \":host{--label-font-size:var(--amplify-text-md);--description-font-size:var(--amplify-text-sm)}.form-field{margin-bottom:15px}.form-field-label{display:block;font-size:var(--label-font-size);padding-bottom:0.5em}.form-field-description{font-size:var(--description-font-size);padding-top:0.5em}\";\nvar AmplifyFormField = /** @class */ (function () {\n    function AmplifyFormField(hostRef) {\n        registerInstance(this, hostRef);\n        /** The input type.  Can be any HTML input type. */\n        this.type = 'text';\n        /** The required flag in order to make an input required prior to submitting a form */\n        this.required = false;\n        /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */\n        this.placeholder = '';\n    }\n    AmplifyFormField.prototype.render = function () {\n        return (h(\"div\", { class: \"form-field\" }, this.label && (h(\"div\", { class: \"form-field-label\" }, h(\"amplify-label\", { htmlFor: this.fieldId }, this.label))), this.description && (h(\"div\", { id: this.fieldId + \"-description\", class: \"form-field-description\", \"data-test\": \"form-field-description\" }, this.description)), h(\"div\", null, h(\"slot\", { name: \"input\" }, h(\"amplify-input\", { fieldId: this.fieldId, description: this.description, type: this.type, handleInputChange: this.handleInputChange, placeholder: this.placeholder, name: this.name, value: this.value, inputProps: this.inputProps, disabled: this.disabled }))), this.hint && h(\"amplify-hint\", { id: this.fieldId + \"-hint\" }, this.hint)));\n    };\n    return AmplifyFormField;\n}());\nAmplifyFormField.style = amplifyFormFieldCss;\nvar amplifyHintCss = \":host{--color:var(--amplify-grey);--font-family:var(--amplify-font-family);--font-size:var(--amplify-text-xs)}.hint{color:var(--color);font-family:var(--font-family);font-weight:300;font-size:var(--font-size);margin-bottom:2.625rem}\";\nvar AmplifyHint = /** @class */ (function () {\n    function AmplifyHint(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    AmplifyHint.prototype.render = function () {\n        return (h(\"div\", { class: \"hint\" }, h(\"slot\", null)));\n    };\n    return AmplifyHint;\n}());\nAmplifyHint.style = amplifyHintCss;\nvar amplifyInputCss = \":host{--color:var(--amplify-secondary-color);--background-color:var(--amplify-secondary-contrast);--border-color:var(--amplify-light-grey);--border-color-focus:var(--amplify-primary-color)}.input-host{width:100%}.input{display:block;width:100%;padding:16px;font-size:var(--amplify-text-sm);color:var(--color);background-color:var(--background-color);background-image:none;border:1px solid var(--border-color);border-radius:3px;-webkit-box-sizing:border-box;box-sizing:border-box;margin:0 0 0.625rem 0}.input:focus{outline:none;border-color:var(--border-color-focus)}.input:disabled{opacity:0.5}\";\nvar AmplifyInput = /** @class */ (function () {\n    function AmplifyInput(hostRef) {\n        registerInstance(this, hostRef);\n        /** The input type.  Can be any HTML input type. */\n        this.type = 'text';\n        /** The callback, called when the input is modified by the user. */\n        this.handleInputChange = function () { return void 0; };\n        /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */\n        this.placeholder = '';\n        this.formSubmit = createEvent(this, \"formSubmit\", 7);\n    }\n    // eslint-disable-next-line\n    AmplifyInput.prototype.handleKeyDown = function (ev) {\n        if (ev.key === 'Enter') {\n            this.formSubmit.emit(ev);\n        }\n    };\n    AmplifyInput.prototype.render = function () {\n        var _this = this;\n        return (h(Host, { class: \"input-host\" }, h(\"input\", Object.assign({ id: this.fieldId, \"aria-describedby\": this.fieldId && this.description ? this.fieldId + \"-description\" : null, type: this.type, onInput: function (event) { return _this.handleInputChange(event); }, placeholder: this.placeholder, name: this.name, class: \"input\", value: this.value, disabled: this.disabled }, this.inputProps))));\n    };\n    return AmplifyInput;\n}());\nAmplifyInput.style = amplifyInputCss;\nvar amplifyLabelCss = \":host{--label-color:var(--amplify-secondary-color)}.label{color:var(--label-color);font-size:var(--amplify-text-sm);margin-bottom:16px}\";\nvar AmplifyLabel = /** @class */ (function () {\n    function AmplifyLabel(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    AmplifyLabel.prototype.render = function () {\n        return (h(\"label\", { class: \"label\", htmlFor: this.htmlFor }, h(\"slot\", null)));\n    };\n    return AmplifyLabel;\n}());\nAmplifyLabel.style = amplifyLabelCss;\nexport { AmplifyFormField as amplify_form_field, AmplifyHint as amplify_hint, AmplifyInput as amplify_input, AmplifyLabel as amplify_label };\n"],"sourceRoot":""}