{"version":3,"sources":["webpack:///./node_modules/@aws-amplify/ui-components/dist/esm-es5/shadow-css-4c80f1c6.js"],"names":["__spreadArrays","s","i","il","arguments","r","Array","k","a","j","jl","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","processRules","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","m","_i","selector","content","suffix","contentPrefix","BLOCK_PLACEHOLDER","cssRule","rule","ruleCallback","inputParts","input","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","escapedString","blocks","convertColonRule","cssText","parts","p","partReplacer","_polyfillHost","colonHostPartReplacer","host","colonHostContextPartReplacer","selectorNeedsScoping","scopeSelector","makeScopeMatcher","re","applyStrictSelectorScope","className","_","_scopeSelectorPart","scopedP","replaceBy_1","before","colon","after","applySimpleSelectorScope","t","matches","safeContent","placeholders","index","keep","replaceBy","pseudo","exp","safeSelector","scopedSelector","startIndex","sep","shouldScope","res","separator","part_1","scopedPart","scopeSelectors","shallowPart","slotSelector","scopeSelectorText","scopeCssText","slotted","slotClass","slotScopeId","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","updatedSelector","convertColonSlotted","convertColonHostContext","convertColonHost","result","pattern","convertShadowDOMSelectors","scopeId","hostScopeId","slottedSelectors","scopeCss","commentsWithHash","stripComments","orgSelectors","processCommentedSelector_1","placeholder","comment","scoped","_a"],"mappings":"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","file":"24.js","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n/*\n Stencil Client Platform v1.14.0 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = function (selector) {\n    var placeholders = [];\n    var index = 0;\n    var content;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n        var replaceBy = \"__ph-\" + index + \"__\";\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n        var replaceBy = \"__ph-\" + index + \"__\";\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    var ss = {\n        content: content,\n        placeholders: placeholders,\n    };\n    return ss;\n};\nvar restoreSafeSelector = function (placeholders, content) {\n    return content.replace(/__ph-(\\d+)__/g, function (_, index) { return placeholders[+index]; });\n};\nvar _polyfillHost = '-shadowcsshost';\nvar _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nvar _polyfillHostContext = '-shadowcsscontext';\nvar _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nvar _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nvar _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nvar _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nvar _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar _colonHostRe = /:host/gim;\nvar _colonSlottedRe = /::slotted/gim;\nvar _colonHostContextRe = /:host-context/gim;\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = function (input) {\n    return input.replace(_commentRe, '');\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = function (input) {\n    return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar OPEN_CURLY = '{';\nvar CLOSE_CURLY = '}';\nvar BLOCK_PLACEHOLDER = '%BLOCK%';\nvar processRules = function (input, ruleCallback) {\n    var inputWithEscapedBlocks = escapeBlocks(input);\n    var nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        var selector = m[2];\n        var content = '';\n        var suffix = m[4];\n        var contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        var cssRule = {\n            selector: selector,\n            content: content,\n        };\n        var rule = ruleCallback(cssRule);\n        return \"\" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;\n    });\n};\nvar escapeBlocks = function (input) {\n    var inputParts = input.split(_curlyRe);\n    var resultParts = [];\n    var escapedBlocks = [];\n    var bracketCount = 0;\n    var currentBlockParts = [];\n    for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        var part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    var strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = function (selector) {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nvar convertColonRule = function (cssText, regExp, partReplacer) {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        if (m[2]) {\n            var parts = m[2].split(',');\n            var r = [];\n            for (var i = 0; i < parts.length; i++) {\n                var p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nvar colonHostPartReplacer = function (host, part, suffix) {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nvar convertColonHost = function (cssText) {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = function (host, part, suffix) {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nvar convertColonSlotted = function (cssText, slotScopeId) {\n    var slotClass = '.' + slotScopeId + ' > ';\n    var selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        if (m[2]) {\n            var compound = m[2].trim();\n            var suffix = m[3];\n            var slottedSelector = slotClass + compound + suffix;\n            var prefixSelector = '';\n            for (var i = m[4] - 1; i >= 0; i--) {\n                var char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            var orgSelector = prefixSelector + slottedSelector;\n            var addedSelector = \"\" + prefixSelector.trimRight() + slottedSelector.trim();\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                var updatedSelector = addedSelector + \", \" + orgSelector;\n                selectors.push({\n                    orgSelector: orgSelector,\n                    updatedSelector: updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors: selectors,\n        cssText: cssText,\n    };\n};\nvar convertColonHostContext = function (cssText) {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = function (cssText) {\n    return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);\n};\nvar makeScopeMatcher = function (scopeSelector) {\n    var lre = /\\[/g;\n    var rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nvar selectorNeedsScoping = function (selector, scopeSelector) {\n    var re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nvar applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        var replaceBy_1 = \".\" + hostSelector;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, function (_, selector) {\n            return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\n                return before + replaceBy_1 + colon + after;\n            });\n        })\n            .replace(_polyfillHostRe, replaceBy_1 + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nvar applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {\n    var isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, function (_) {\n        var parts = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            parts[_i - 1] = arguments[_i];\n        }\n        return parts[0];\n    });\n    var className = '.' + scopeSelector;\n    var _scopeSelectorPart = function (p) {\n        var scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            var t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                var matches = t.match(/([^:]*)(:*)(.*)/);\n                if (matches) {\n                    scopedP = matches[1] + className + matches[2] + matches[3];\n                }\n            }\n        }\n        return scopedP;\n    };\n    var safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    var scopedSelector = '';\n    var startIndex = 0;\n    var res;\n    var sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    var shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        var separator = res[1];\n        var part_1 = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part_1.indexOf(_polyfillHostNoCombinator) > -1;\n        var scopedPart = shouldScope ? _scopeSelectorPart(part_1) : part_1;\n        scopedSelector += scopedPart + \" \" + separator + \" \";\n        startIndex = sep.lastIndex;\n    }\n    var part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = function (selector, scopeSelectorText, hostSelector, slotSelector) {\n    return selector\n        .split(',')\n        .map(function (shallowPart) {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nvar scopeSelectors = function (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) {\n    return processRules(cssText, function (rule) {\n        var selector = rule.selector;\n        var content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        var cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content: content,\n        };\n        return cssRule;\n    });\n};\nvar scopeCssText = function (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    var slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, \".\" + hostScopeId);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nvar scopeCss = function (cssText, scopeId, commentOriginalSelector) {\n    var hostScopeId = scopeId + '-h';\n    var slotScopeId = scopeId + '-s';\n    var commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    var orgSelectors = [];\n    if (commentOriginalSelector) {\n        var processCommentedSelector_1 = function (rule) {\n            var placeholder = \"/*!@___\" + orgSelectors.length + \"___*/\";\n            var comment = \"/*!@\" + rule.selector + \"*/\";\n            orgSelectors.push({ placeholder: placeholder, comment: comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, function (rule) {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector_1(rule);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector_1);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    var scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = __spreadArrays([scoped.cssText], commentsWithHash).join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(function (_a) {\n            var placeholder = _a.placeholder, comment = _a.comment;\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach(function (slottedSelector) {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\nexport { scopeCss };\n"],"sourceRoot":""}