import { Logger, Hub, I18n } from '@aws-amplify/core';
import { U as UsernameAlias, A as AuthState } from './auth-types-78df304e.js';
import { T as Translations } from './Translations-baba3f2c.js';
import { U as UI_AUTH_CHANNEL, T as TOAST_AUTH_ERROR_EVENT, a as AUTH_STATE_CHANGE_EVENT, P as PHONE_EMPTY_ERROR_MESSAGE } from './constants-3e1b5fcc.js';
import Auth from '@aws-amplify/auth';

const logger = new Logger('helpers');
const hasShadowDom = (el) => {
    return !!el.shadowRoot && !!el.attachShadow;
};
const dispatchToastHubEvent = (error) => {
    Hub.dispatch(UI_AUTH_CHANNEL, {
        event: TOAST_AUTH_ERROR_EVENT,
        message: error.message,
    });
};
const dispatchAuthStateChangeEvent = (nextAuthState, data) => {
    Hub.dispatch(UI_AUTH_CHANNEL, {
        event: AUTH_STATE_CHANGE_EVENT,
        message: nextAuthState,
        data,
    });
};
const composePhoneNumberInput = (phoneNumber) => {
    if (!phoneNumber.phoneNumberValue) {
        throw new Error(PHONE_EMPTY_ERROR_MESSAGE);
    }
    const sanitizedPhoneNumberValue = phoneNumber.phoneNumberValue.replace(/[-()\s]/g, '');
    return `${phoneNumber.countryDialCodeValue}${sanitizedPhoneNumberValue}`;
};
const checkUsernameAlias = (usernameAlias) => {
    if (!(usernameAlias in UsernameAlias)) {
        throw new Error(`Invalid username Alias - ${usernameAlias}. Instead use ${Object.values(UsernameAlias)}`);
    }
};
const onAuthUIStateChange = (authStateHandler) => {
    const authUIStateHandler = async (data) => {
        const { payload } = data;
        switch (payload.event) {
            case AUTH_STATE_CHANGE_EVENT:
                if (payload.message) {
                    if (payload.message === AuthState.SignedIn) {
                        // for AuthState.SignedIn, use an Auth Guard
                        try {
                            const user = await Auth.currentAuthenticatedUser();
                            authStateHandler(payload.message, user);
                        }
                        catch (e) {
                            logger.error('User is not authenticated');
                        }
                    }
                    else {
                        authStateHandler(payload.message, payload.data);
                    }
                }
                break;
        }
    };
    Hub.listen(UI_AUTH_CHANNEL, authUIStateHandler);
    return () => Hub.remove(UI_AUTH_CHANNEL, authUIStateHandler);
};
const isHintValid = field => {
    return !(field['hint'] === null || typeof field['hint'] === 'string');
};
// Required attributes come from https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims
const requiredAttributesMap = {
    address: {
        label: I18n.get(Translations.ADDRESS_LABEL),
        placeholder: I18n.get(Translations.ADDRESS_PLACEHOLDER),
    },
    nickname: {
        label: I18n.get(Translations.NICKNAME_LABEL),
        placeholder: I18n.get(Translations.NICKNAME_PLACEHOLDER),
    },
    birthdate: {
        label: I18n.get(Translations.BIRTHDATE_LABEL),
        placeholder: I18n.get(Translations.BIRTHDATE_PLACEHOLDER),
    },
    phone_number: {
        label: I18n.get(Translations.PHONE_LABEL),
        placeholder: I18n.get(Translations.PHONE_PLACEHOLDER),
    },
    email: {
        lable: I18n.get(Translations.EMAIL_LABEL),
        placeholder: I18n.get(Translations.EMAIL_PLACEHOLDER),
    },
    picture: {
        label: I18n.get(Translations.PICTURE_LABEL),
        placeholder: I18n.get(Translations.PICTURE_PLACEHOLDER),
    },
    family_name: {
        label: I18n.get(Translations.FAMILY_NAME_LABEL),
        placeholder: I18n.get(Translations.FAMILY_NAME_PLACEHOLDER),
    },
    preferred_username: {
        label: I18n.get(Translations.PREFERRED_USERNAME_LABEL),
        placeholder: I18n.get(Translations.PREFERRED_USERNAME_PLACEHOLDER),
    },
    gender: {
        label: I18n.get(Translations.GENDER_LABEL),
        placeholder: I18n.get(Translations.GENDER_PLACEHOLDER),
    },
    profile: {
        label: I18n.get(Translations.PROFILE_LABEL),
        placeholder: I18n.get(Translations.PROFILE_PLACEHOLDER),
    },
    given_name: {
        label: I18n.get(Translations.GIVEN_NAME_LABEL),
        placeholder: I18n.get(Translations.GIVEN_NAME_LABEL),
    },
    zoneinfo: {
        label: I18n.get(Translations.ZONEINFO_LABEL),
        placeholder: I18n.get(Translations.ZONEINFO_PLACEHOLDER),
    },
    locale: {
        label: I18n.get(Translations.LOCALE_LABEL),
        placeholder: I18n.get(Translations.LOCALE_PLACEHOLDER),
    },
    updated_at: {
        label: I18n.get(Translations.UPDATED_AT_LABEL),
        placeholder: I18n.get(Translations.UPDATED_AT_PLACEHOLDER),
    },
    middle_name: {
        label: I18n.get(Translations.MIDDLE_NAME_LABEL),
        placeholder: I18n.get(Translations.MIDDLE_NAME_PLACEHOLDER),
    },
    website: {
        label: I18n.get(Translations.WEBSITE_LABEL),
        placeholder: I18n.get(Translations.WEBSITE_PLACEHOLDER),
    },
    name: {
        label: I18n.get(Translations.NAME_LABEL),
        placeholder: I18n.get(Translations.NAME_PLACEHOLDER),
    },
};

export { dispatchToastHubEvent as a, composePhoneNumberInput as b, checkUsernameAlias as c, dispatchAuthStateChangeEvent as d, hasShadowDom as h, isHintValid as i, onAuthUIStateChange as o, requiredAttributesMap as r };
