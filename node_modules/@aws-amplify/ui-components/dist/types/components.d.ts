/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { AuthState, AuthStateHandler, CognitoUserInterface, FederatedConfig, MFATypesInterface, UsernameAliasStrings } from "./common/types/auth-types";
import { FormFieldTypes } from "./components/amplify-auth-fields/amplify-auth-fields-interface";
import { ButtonTypes, ButtonVariant, InputEvent, TextFieldTypes } from "./common/types/ui-types";
import { FunctionalComponent } from "./stencil-public-runtime";
import { CountryCodeDialOptions } from "./components/amplify-country-dial-code/amplify-country-dial-code-interface";
import { IconNameType } from "./components/amplify-icon/icons";
import { SelectOptionsNumber, SelectOptionsString } from "./components/amplify-select/amplify-select-interface";
export namespace Components {
    interface AmplifyAmazonButton {
        /**
          * App-specific client ID from Google
         */
        "clientId": FederatedConfig['amazonClientId'];
        /**
          * Auth state change handler for this component e.g. SignIn -> 'Create Account' link -> SignUp
         */
        "handleAuthStateChange": AuthStateHandler;
    }
    interface AmplifyAuthFields {
        /**
          * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: string,     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
         */
        "formFields": FormFieldTypes | string[];
    }
    interface AmplifyAuth0Button {
        /**
          * See: https://auth0.com/docs/libraries/auth0js/v9#available-parameters
         */
        "config": FederatedConfig['auth0Config'];
        /**
          * Auth state change handler for this component
         */
        "handleAuthStateChange": AuthStateHandler;
    }
    interface AmplifyAuthenticator {
        /**
          * Federated credentials & configuration.
         */
        "federated": FederatedConfig;
        /**
          * Callback for Authenticator state machine changes
         */
        "handleAuthStateChange": AuthStateHandler;
        /**
          * Initial starting state of the Authenticator component. E.g. If `signup` is passed the default component is set to AmplifySignUp
         */
        "initialAuthState": AuthState.SignIn | AuthState.SignUp;
        /**
          * Username Alias is used to setup authentication with `username`, `email` or `phone_number`
         */
        "usernameAlias": UsernameAliasStrings;
    }
    interface AmplifyButton {
        /**
          * Disabled state of the button
         */
        "disabled"?: boolean;
        /**
          * (Optional) Callback called when a user clicks on the button
         */
        "handleButtonClick": (evt: Event) => void;
        /**
          * Type of the button: 'button', 'submit' or 'reset'
         */
        "type": ButtonTypes;
        /**
          * Variant of a button: 'button' | 'anchor'
         */
        "variant": ButtonVariant;
    }
    interface AmplifyCheckbox {
        /**
          * If `true`, the checkbox is selected.
         */
        "checked": boolean;
        /**
          * If `true`, the checkbox is disabled
         */
        "disabled": boolean;
        /**
          * Field ID used for the 'htmlFor' in the label
         */
        "fieldId": string;
        /**
          * Label for the checkbox
         */
        "label": string;
        /**
          * Name of the checkbox
         */
        "name"?: string;
        /**
          * Value of the checkbox
         */
        "value"?: string;
    }
    interface AmplifyCodeField {
        /**
          * Will disable the input if set to true
         */
        "disabled"?: boolean;
        /**
          * Based on the type of field e.g. sign in, sign up, forgot password, etc.
         */
        "fieldId": string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * Used as the hint in case you forgot your confirmation code, etc.
         */
        "hint": string | FunctionalComponent | null;
        /**
          * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
         */
        "inputProps"?: object;
        /**
          * Used for the code label
         */
        "label": string;
        /**
          * Used for the placeholder label
         */
        "placeholder": string;
        /**
          * The required flag in order to make an input required prior to submitting a form
         */
        "required": boolean;
        /**
          * The value of the content inside of the input field
         */
        "value"?: string;
    }
    interface AmplifyConfirmSignIn {
        /**
          * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: string,     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
         */
        "formFields": FormFieldTypes | string[];
        /**
          * Auth state change handler for this component
         */
        "handleAuthStateChange": AuthStateHandler;
        /**
          * Fires when confirm sign in form is submitted
         */
        "handleSubmit": (event: Event) => void;
        /**
          * Used for header text in confirm sign in component
         */
        "headerText": string;
        /**
          * Used for the submit button text in confirm sign in component
         */
        "submitButtonText": string;
        /**
          * Cognito user signing in
         */
        "user": CognitoUserInterface;
    }
    interface AmplifyConfirmSignUp {
        /**
          * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: string,     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
         */
        "formFields": FormFieldTypes | string[];
        /**
          * Auth state change handler for this components e.g. SignIn -> 'Create Account' link -> SignUp
         */
        "handleAuthStateChange": AuthStateHandler;
        /**
          * Fires when sign up form is submitted
         */
        "handleSubmit": (submitEvent: Event) => void;
        /**
          * Used for header text in confirm sign up component
         */
        "headerText": string;
        /**
          * Used for the submit button text in confirm sign up component
         */
        "submitButtonText": string;
        /**
          * Used for the username to be passed to resend code
         */
        "user": CognitoUserInterface;
        /**
          * Username Alias is used to setup authentication with `username`, `email` or `phone_number`
         */
        "usernameAlias": UsernameAliasStrings;
    }
    interface AmplifyContainer {
    }
    interface AmplifyCountryDialCode {
        /**
          * The ID of the field.  Should match with its corresponding input's ID.
         */
        "fieldId": string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * The options of the country dial code select input.
         */
        "options": CountryCodeDialOptions;
    }
    interface AmplifyEmailField {
        /**
          * Will disable the input if set to true
         */
        "disabled"?: boolean;
        /**
          * Based on the type of field e.g. sign in, sign up, forgot password, etc.
         */
        "fieldId": string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
         */
        "inputProps"?: object;
        /**
          * Used for the EMAIL label
         */
        "label": string;
        /**
          * Used for the placeholder label
         */
        "placeholder": string;
        /**
          * The required flag in order to make an input required prior to submitting a form
         */
        "required": boolean;
        /**
          * The value of the content inside of the input field
         */
        "value"?: string;
    }
    interface AmplifyFacebookButton {
        /**
          * App-specific client ID from Facebook
         */
        "appId": FederatedConfig['facebookAppId'];
        /**
          * Auth state change handler for this component e.g. SignIn -> 'Create Account' link -> SignUp
         */
        "handleAuthStateChange": AuthStateHandler;
    }
    interface AmplifyFederatedButtons {
        /**
          * The current authentication state.
         */
        "authState": AuthState;
        /**
          * Federated credentials & configuration.
         */
        "federated": FederatedConfig;
        /**
          * Auth state change handler for this component e.g. SignIn -> 'Create Account' link -> SignUp
         */
        "handleAuthStateChange": AuthStateHandler;
    }
    interface AmplifyFederatedSignIn {
        /**
          * The current authentication state.
         */
        "authState": AuthState;
        /**
          * Federated credentials & configuration.
         */
        "federated": any;
    }
    interface AmplifyForgotPassword {
        /**
          * The form fields displayed inside of the forgot password form
         */
        "formFields": FormFieldTypes | string[];
        /**
          * Auth state change handler for this component
         */
        "handleAuthStateChange": AuthStateHandler;
        /**
          * The function called when making a request to reset password
         */
        "handleSend": (event: Event) => void;
        /**
          * The function called when submitting a new password
         */
        "handleSubmit": (event: Event) => void;
        /**
          * The header text of the forgot password section
         */
        "headerText": string;
        /**
          * The text displayed inside of the submit button for the form
         */
        "submitButtonText": string;
        /**
          * Username Alias is used to setup authentication with `username`, `email` or `phone_number`
         */
        "usernameAlias": UsernameAliasStrings;
    }
    interface AmplifyFormField {
        /**
          * The text of the description.  Goes between the label and the input.
         */
        "description": string | null;
        /**
          * Will disable the input if set to true
         */
        "disabled"?: boolean;
        /**
          * The ID of the field.  Should match with its corresponding input's ID.
         */
        "fieldId": string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * The text of a hint to the user as to how to fill out the input.  Goes just below the input.
         */
        "hint": string | FunctionalComponent | null;
        /**
          * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
         */
        "inputProps"?: object;
        /**
          * The text of the label.  Goes above the input. Ex: 'First name'
         */
        "label": string | null;
        /**
          * (Optional) String value for the name of the input.
         */
        "name"?: string;
        /**
          * (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users.
         */
        "placeholder"?: string;
        /**
          * The required flag in order to make an input required prior to submitting a form
         */
        "required": boolean;
        /**
          * The input type.  Can be any HTML input type.
         */
        "type"?: TextFieldTypes;
        /**
          * The value of the content inside of the input field
         */
        "value": string;
    }
    interface AmplifyFormSection {
        /**
          * (Required) Function called upon submission of form
         */
        "handleSubmit": (event: Event) => void;
        /**
          * Used for form section header
         */
        "headerText": string;
        /**
          * Loading state for the form
         */
        "loading"?: boolean;
        /**
          * Secondary footer component or text
         */
        "secondaryFooterContent": string | FunctionalComponent | null;
        /**
          * (Optional) Used as a the default value within the default footer slot
         */
        "submitButtonText"?: string;
        /**
          * String prefix for the data-test attributes in this component primarily used for testing purposes
         */
        "testDataPrefix"?: string;
    }
    interface AmplifyGoogleButton {
        /**
          * App-specific client ID from Google
         */
        "clientId": FederatedConfig['googleClientId'];
        /**
          * Auth state change handler for this component e.g. SignIn -> 'Create Account' link -> SignUp
         */
        "handleAuthStateChange": AuthStateHandler;
    }
    interface AmplifyGreetings {
        /**
          * Auth state change handler for this component
         */
        "handleAuthStateChange": AuthStateHandler;
        /**
          * Logo displayed inside of the header
         */
        "logo": FunctionalComponent | null;
        /**
          * Username displayed in the greetings
         */
        "username": string;
    }
    interface AmplifyHint {
    }
    interface AmplifyIcon {
        /**
          * (Required) Name of icon used to determine the icon rendered
         */
        "name": IconNameType;
    }
    interface AmplifyIconButton {
        /**
          * (Optional) Whether or not to show the tooltip automatically
         */
        "autoShowTooltip": boolean;
        /**
          * The name of the icon used inside of the button
         */
        "name": IconNameType;
        /**
          * (Optional) The tooltip that will show on hover of the button
         */
        "tooltip": string | null;
    }
    interface AmplifyInput {
        /**
          * The text of the description.  Goes just below the label.
         */
        "description": string | null;
        /**
          * Will disable the input if set to true
         */
        "disabled"?: boolean;
        /**
          * The ID of the field.  Should match with its corresponding input's ID.
         */
        "fieldId": string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: InputEvent) => void;
        /**
          * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
         */
        "inputProps"?: object;
        /**
          * (Optional) String value for the name of the input.
         */
        "name"?: string;
        /**
          * (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users.
         */
        "placeholder"?: string;
        /**
          * The input type.  Can be any HTML input type.
         */
        "type"?: TextFieldTypes;
        /**
          * The value of the content inside of the input field
         */
        "value": string;
    }
    interface AmplifyLabel {
        /**
          * Reflects the value of the for content property of html element
         */
        "htmlFor": string;
    }
    interface AmplifyLink {
        /**
          * The link role is used to identify an element that creates a hyperlink to a resource that is in the application or external
         */
        "role": string;
    }
    interface AmplifyLoadingSpinner {
    }
    interface AmplifyNav {
    }
    interface AmplifyOauthButton {
        /**
          * Federated credentials & configuration.
         */
        "config": FederatedConfig['oauthConfig'];
    }
    interface AmplifyPasswordField {
        /**
          * Will disable the input if set to true
         */
        "disabled"?: boolean;
        /**
          * Based on the type of field e.g. sign in, sign up, forgot password, etc.
         */
        "fieldId": string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * Used as the hint in case you forgot your password, etc.
         */
        "hint": string | FunctionalComponent | null;
        /**
          * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
         */
        "inputProps"?: object;
        /**
          * Used for the password label
         */
        "label": string;
        /**
          * Used for the placeholder label
         */
        "placeholder": string;
        /**
          * The required flag in order to make an input required prior to submitting a form
         */
        "required": boolean;
        /**
          * The value of the content inside of the input field
         */
        "value"?: string;
    }
    interface AmplifyPhoneField {
        /**
          * Will disable the input if set to true
         */
        "disabled"?: boolean;
        /**
          * Based on the type of field e.g. sign in, sign up, forgot password, etc.
         */
        "fieldId": string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * Used as the hint in case you forgot your confirmation code, etc.
         */
        "hint": string | FunctionalComponent | null;
        /**
          * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
         */
        "inputProps"?: object;
        /**
          * Used for the Phone label
         */
        "label": string;
        /**
          * Used for the placeholder label
         */
        "placeholder": string;
        /**
          * The required flag in order to make an input required prior to submitting a form
         */
        "required": boolean;
        /**
          * The value of the content inside of the input field
         */
        "value": string;
    }
    interface AmplifyRadioButton {
        /**
          * If `true`, the radio button is selected.
         */
        "checked": boolean;
        /**
          * If `true`, the checkbox is disabled
         */
        "disabled": boolean;
        /**
          * Field ID used for the 'for' in the label
         */
        "fieldId": string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
         */
        "inputProps"?: object;
        /**
          * Label for the radio button
         */
        "label": string;
        /**
          * (Optional) Name of radio button
         */
        "name"?: string;
        /**
          * (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users.
         */
        "placeholder"?: string;
        /**
          * (Optional) Value of radio button
         */
        "value"?: string;
    }
    interface AmplifyRequireNewPassword {
        /**
          * The form fields displayed inside of the forgot password form
         */
        "formFields": FormFieldTypes;
        /**
          * Auth state change handler for this component
         */
        "handleAuthStateChange": AuthStateHandler;
        /**
          * The function called when submitting a new password
         */
        "handleSubmit": (event: Event) => void;
        /**
          * The header text of the forgot password section
         */
        "headerText": string;
        /**
          * The text displayed inside of the submit button for the form
         */
        "submitButtonText": string;
        /**
          * Used for the username to be passed to resend code
         */
        "user": CognitoUserInterface;
    }
    interface AmplifySection {
        /**
          * Equivalent to html section role
         */
        "role": string;
    }
    interface AmplifySelect {
        /**
          * Used for id field
         */
        "fieldId": string;
        /**
          * The callback, called when the select is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * The options of the select input. Must be an Array of Objects with an Object shape of {label: string, value: string|number}
         */
        "options": SelectOptionsString | SelectOptionsNumber;
    }
    interface AmplifySelectMfaType {
        /**
          * Types of MFA options
         */
        "MFATypes": MFATypesInterface;
        /**
          * Current authenticated user in order to sign requests properly for TOTP
         */
        "authData": CognitoUserInterface;
        /**
          * Fires when Verify is clicked
         */
        "handleSubmit": (event: Event) => void;
    }
    interface AmplifySignIn {
        /**
          * Federated credentials & configuration.
         */
        "federated": FederatedConfig;
        /**
          * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: string,     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
         */
        "formFields": FormFieldTypes | string[];
        /**
          * Auth state change handler for this component
         */
        "handleAuthStateChange": AuthStateHandler;
        /**
          * Fires when sign in form is submitted
         */
        "handleSubmit": (event: Event) => void;
        /**
          * Used for header text in sign in component
         */
        "headerText": string;
        /**
          * Hides the sign up link
         */
        "hideSignUp": boolean;
        /**
          * Used for the submit button text in sign in component
         */
        "submitButtonText": string;
        /**
          * Username Alias is used to setup authentication with `username`, `email` or `phone_number`
         */
        "usernameAlias": UsernameAliasStrings;
    }
    interface AmplifySignInButton {
        /**
          * Specifies the federation provider.
         */
        "provider": 'amazon' | 'auth0' | 'facebook' | 'google' | 'oauth';
    }
    interface AmplifySignOut {
        /**
          * Text inside of the Sign Out button
         */
        "buttonText": string;
        /**
          * Auth state change handler for this component
         */
        "handleAuthStateChange": AuthStateHandler;
    }
    interface AmplifySignUp {
        /**
          * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: string,     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
         */
        "formFields": FormFieldTypes | string[];
        /**
          * Auth state change handler for this component e.g. SignIn -> 'Create Account' link -> SignUp
         */
        "handleAuthStateChange": AuthStateHandler;
        /**
          * Fires when sign up form is submitted
         */
        "handleSubmit": (event: Event) => void;
        /**
          * Used for the submit button text in sign up component
         */
        "haveAccountText": string;
        /**
          * Used for header text in sign up component
         */
        "headerText": string;
        /**
          * Used for the submit button text in sign up component
         */
        "signInText": string;
        /**
          * Used for the submit button text in sign up component
         */
        "submitButtonText": string;
        /**
          * Username Alias is used to setup authentication with `username`, `email` or `phone_number`
         */
        "usernameAlias": UsernameAliasStrings;
        /**
          * Engages when invalid actions occur, such as missing field, etc.
         */
        "validationErrors": string;
    }
    interface AmplifyStrike {
    }
    interface AmplifyToast {
        /**
          * Used in order to add a dismissable `x` for the Toast component
         */
        "handleClose": () => void;
        /**
          * Message to be displayed inside the toast
         */
        "message": string;
    }
    interface AmplifyTooltip {
        /**
          * (Optional) Whether or not the tooltip should be automatically shown, i.e. not disappear when not hovered
         */
        "shouldAutoShow": boolean;
        /**
          * (Required) The text in the tooltip
         */
        "text": string;
    }
    interface AmplifyTotpSetup {
        /**
          * Auth state change handler for this component
         */
        "handleAuthStateChange": AuthStateHandler;
        /**
          * Used for header text in totp setup component
         */
        "headerText": string;
        /**
          * Used in order to configure TOTP for a user
         */
        "user": CognitoUserInterface;
    }
    interface AmplifyUsernameField {
        /**
          * Will disable the input if set to true
         */
        "disabled"?: boolean;
        /**
          * Based on the type of field e.g. sign in, sign up, forgot password, etc.
         */
        "fieldId": string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
         */
        "inputProps"?: object;
        /**
          * Used for the username label
         */
        "label": string;
        /**
          * Used for the placeholder label
         */
        "placeholder": string;
        /**
          * The required flag in order to make an input required prior to submitting a form
         */
        "required": boolean;
        /**
          * The value of the content inside of the input field
         */
        "value"?: string;
    }
    interface AmplifyVerifyContact {
        /**
          * Authentication state handler
         */
        "handleAuthStateChange": AuthStateHandler;
        /**
          * User with unverified contact information
         */
        "user": CognitoUserInterface;
    }
}
declare global {
    interface HTMLAmplifyAmazonButtonElement extends Components.AmplifyAmazonButton, HTMLStencilElement {
    }
    var HTMLAmplifyAmazonButtonElement: {
        prototype: HTMLAmplifyAmazonButtonElement;
        new (): HTMLAmplifyAmazonButtonElement;
    };
    interface HTMLAmplifyAuthFieldsElement extends Components.AmplifyAuthFields, HTMLStencilElement {
    }
    var HTMLAmplifyAuthFieldsElement: {
        prototype: HTMLAmplifyAuthFieldsElement;
        new (): HTMLAmplifyAuthFieldsElement;
    };
    interface HTMLAmplifyAuth0ButtonElement extends Components.AmplifyAuth0Button, HTMLStencilElement {
    }
    var HTMLAmplifyAuth0ButtonElement: {
        prototype: HTMLAmplifyAuth0ButtonElement;
        new (): HTMLAmplifyAuth0ButtonElement;
    };
    interface HTMLAmplifyAuthenticatorElement extends Components.AmplifyAuthenticator, HTMLStencilElement {
    }
    var HTMLAmplifyAuthenticatorElement: {
        prototype: HTMLAmplifyAuthenticatorElement;
        new (): HTMLAmplifyAuthenticatorElement;
    };
    interface HTMLAmplifyButtonElement extends Components.AmplifyButton, HTMLStencilElement {
    }
    var HTMLAmplifyButtonElement: {
        prototype: HTMLAmplifyButtonElement;
        new (): HTMLAmplifyButtonElement;
    };
    interface HTMLAmplifyCheckboxElement extends Components.AmplifyCheckbox, HTMLStencilElement {
    }
    var HTMLAmplifyCheckboxElement: {
        prototype: HTMLAmplifyCheckboxElement;
        new (): HTMLAmplifyCheckboxElement;
    };
    interface HTMLAmplifyCodeFieldElement extends Components.AmplifyCodeField, HTMLStencilElement {
    }
    var HTMLAmplifyCodeFieldElement: {
        prototype: HTMLAmplifyCodeFieldElement;
        new (): HTMLAmplifyCodeFieldElement;
    };
    interface HTMLAmplifyConfirmSignInElement extends Components.AmplifyConfirmSignIn, HTMLStencilElement {
    }
    var HTMLAmplifyConfirmSignInElement: {
        prototype: HTMLAmplifyConfirmSignInElement;
        new (): HTMLAmplifyConfirmSignInElement;
    };
    interface HTMLAmplifyConfirmSignUpElement extends Components.AmplifyConfirmSignUp, HTMLStencilElement {
    }
    var HTMLAmplifyConfirmSignUpElement: {
        prototype: HTMLAmplifyConfirmSignUpElement;
        new (): HTMLAmplifyConfirmSignUpElement;
    };
    interface HTMLAmplifyContainerElement extends Components.AmplifyContainer, HTMLStencilElement {
    }
    var HTMLAmplifyContainerElement: {
        prototype: HTMLAmplifyContainerElement;
        new (): HTMLAmplifyContainerElement;
    };
    interface HTMLAmplifyCountryDialCodeElement extends Components.AmplifyCountryDialCode, HTMLStencilElement {
    }
    var HTMLAmplifyCountryDialCodeElement: {
        prototype: HTMLAmplifyCountryDialCodeElement;
        new (): HTMLAmplifyCountryDialCodeElement;
    };
    interface HTMLAmplifyEmailFieldElement extends Components.AmplifyEmailField, HTMLStencilElement {
    }
    var HTMLAmplifyEmailFieldElement: {
        prototype: HTMLAmplifyEmailFieldElement;
        new (): HTMLAmplifyEmailFieldElement;
    };
    interface HTMLAmplifyFacebookButtonElement extends Components.AmplifyFacebookButton, HTMLStencilElement {
    }
    var HTMLAmplifyFacebookButtonElement: {
        prototype: HTMLAmplifyFacebookButtonElement;
        new (): HTMLAmplifyFacebookButtonElement;
    };
    interface HTMLAmplifyFederatedButtonsElement extends Components.AmplifyFederatedButtons, HTMLStencilElement {
    }
    var HTMLAmplifyFederatedButtonsElement: {
        prototype: HTMLAmplifyFederatedButtonsElement;
        new (): HTMLAmplifyFederatedButtonsElement;
    };
    interface HTMLAmplifyFederatedSignInElement extends Components.AmplifyFederatedSignIn, HTMLStencilElement {
    }
    var HTMLAmplifyFederatedSignInElement: {
        prototype: HTMLAmplifyFederatedSignInElement;
        new (): HTMLAmplifyFederatedSignInElement;
    };
    interface HTMLAmplifyForgotPasswordElement extends Components.AmplifyForgotPassword, HTMLStencilElement {
    }
    var HTMLAmplifyForgotPasswordElement: {
        prototype: HTMLAmplifyForgotPasswordElement;
        new (): HTMLAmplifyForgotPasswordElement;
    };
    interface HTMLAmplifyFormFieldElement extends Components.AmplifyFormField, HTMLStencilElement {
    }
    var HTMLAmplifyFormFieldElement: {
        prototype: HTMLAmplifyFormFieldElement;
        new (): HTMLAmplifyFormFieldElement;
    };
    interface HTMLAmplifyFormSectionElement extends Components.AmplifyFormSection, HTMLStencilElement {
    }
    var HTMLAmplifyFormSectionElement: {
        prototype: HTMLAmplifyFormSectionElement;
        new (): HTMLAmplifyFormSectionElement;
    };
    interface HTMLAmplifyGoogleButtonElement extends Components.AmplifyGoogleButton, HTMLStencilElement {
    }
    var HTMLAmplifyGoogleButtonElement: {
        prototype: HTMLAmplifyGoogleButtonElement;
        new (): HTMLAmplifyGoogleButtonElement;
    };
    interface HTMLAmplifyGreetingsElement extends Components.AmplifyGreetings, HTMLStencilElement {
    }
    var HTMLAmplifyGreetingsElement: {
        prototype: HTMLAmplifyGreetingsElement;
        new (): HTMLAmplifyGreetingsElement;
    };
    interface HTMLAmplifyHintElement extends Components.AmplifyHint, HTMLStencilElement {
    }
    var HTMLAmplifyHintElement: {
        prototype: HTMLAmplifyHintElement;
        new (): HTMLAmplifyHintElement;
    };
    interface HTMLAmplifyIconElement extends Components.AmplifyIcon, HTMLStencilElement {
    }
    var HTMLAmplifyIconElement: {
        prototype: HTMLAmplifyIconElement;
        new (): HTMLAmplifyIconElement;
    };
    interface HTMLAmplifyIconButtonElement extends Components.AmplifyIconButton, HTMLStencilElement {
    }
    var HTMLAmplifyIconButtonElement: {
        prototype: HTMLAmplifyIconButtonElement;
        new (): HTMLAmplifyIconButtonElement;
    };
    interface HTMLAmplifyInputElement extends Components.AmplifyInput, HTMLStencilElement {
    }
    var HTMLAmplifyInputElement: {
        prototype: HTMLAmplifyInputElement;
        new (): HTMLAmplifyInputElement;
    };
    interface HTMLAmplifyLabelElement extends Components.AmplifyLabel, HTMLStencilElement {
    }
    var HTMLAmplifyLabelElement: {
        prototype: HTMLAmplifyLabelElement;
        new (): HTMLAmplifyLabelElement;
    };
    interface HTMLAmplifyLinkElement extends Components.AmplifyLink, HTMLStencilElement {
    }
    var HTMLAmplifyLinkElement: {
        prototype: HTMLAmplifyLinkElement;
        new (): HTMLAmplifyLinkElement;
    };
    interface HTMLAmplifyLoadingSpinnerElement extends Components.AmplifyLoadingSpinner, HTMLStencilElement {
    }
    var HTMLAmplifyLoadingSpinnerElement: {
        prototype: HTMLAmplifyLoadingSpinnerElement;
        new (): HTMLAmplifyLoadingSpinnerElement;
    };
    interface HTMLAmplifyNavElement extends Components.AmplifyNav, HTMLStencilElement {
    }
    var HTMLAmplifyNavElement: {
        prototype: HTMLAmplifyNavElement;
        new (): HTMLAmplifyNavElement;
    };
    interface HTMLAmplifyOauthButtonElement extends Components.AmplifyOauthButton, HTMLStencilElement {
    }
    var HTMLAmplifyOauthButtonElement: {
        prototype: HTMLAmplifyOauthButtonElement;
        new (): HTMLAmplifyOauthButtonElement;
    };
    interface HTMLAmplifyPasswordFieldElement extends Components.AmplifyPasswordField, HTMLStencilElement {
    }
    var HTMLAmplifyPasswordFieldElement: {
        prototype: HTMLAmplifyPasswordFieldElement;
        new (): HTMLAmplifyPasswordFieldElement;
    };
    interface HTMLAmplifyPhoneFieldElement extends Components.AmplifyPhoneField, HTMLStencilElement {
    }
    var HTMLAmplifyPhoneFieldElement: {
        prototype: HTMLAmplifyPhoneFieldElement;
        new (): HTMLAmplifyPhoneFieldElement;
    };
    interface HTMLAmplifyRadioButtonElement extends Components.AmplifyRadioButton, HTMLStencilElement {
    }
    var HTMLAmplifyRadioButtonElement: {
        prototype: HTMLAmplifyRadioButtonElement;
        new (): HTMLAmplifyRadioButtonElement;
    };
    interface HTMLAmplifyRequireNewPasswordElement extends Components.AmplifyRequireNewPassword, HTMLStencilElement {
    }
    var HTMLAmplifyRequireNewPasswordElement: {
        prototype: HTMLAmplifyRequireNewPasswordElement;
        new (): HTMLAmplifyRequireNewPasswordElement;
    };
    interface HTMLAmplifySectionElement extends Components.AmplifySection, HTMLStencilElement {
    }
    var HTMLAmplifySectionElement: {
        prototype: HTMLAmplifySectionElement;
        new (): HTMLAmplifySectionElement;
    };
    interface HTMLAmplifySelectElement extends Components.AmplifySelect, HTMLStencilElement {
    }
    var HTMLAmplifySelectElement: {
        prototype: HTMLAmplifySelectElement;
        new (): HTMLAmplifySelectElement;
    };
    interface HTMLAmplifySelectMfaTypeElement extends Components.AmplifySelectMfaType, HTMLStencilElement {
    }
    var HTMLAmplifySelectMfaTypeElement: {
        prototype: HTMLAmplifySelectMfaTypeElement;
        new (): HTMLAmplifySelectMfaTypeElement;
    };
    interface HTMLAmplifySignInElement extends Components.AmplifySignIn, HTMLStencilElement {
    }
    var HTMLAmplifySignInElement: {
        prototype: HTMLAmplifySignInElement;
        new (): HTMLAmplifySignInElement;
    };
    interface HTMLAmplifySignInButtonElement extends Components.AmplifySignInButton, HTMLStencilElement {
    }
    var HTMLAmplifySignInButtonElement: {
        prototype: HTMLAmplifySignInButtonElement;
        new (): HTMLAmplifySignInButtonElement;
    };
    interface HTMLAmplifySignOutElement extends Components.AmplifySignOut, HTMLStencilElement {
    }
    var HTMLAmplifySignOutElement: {
        prototype: HTMLAmplifySignOutElement;
        new (): HTMLAmplifySignOutElement;
    };
    interface HTMLAmplifySignUpElement extends Components.AmplifySignUp, HTMLStencilElement {
    }
    var HTMLAmplifySignUpElement: {
        prototype: HTMLAmplifySignUpElement;
        new (): HTMLAmplifySignUpElement;
    };
    interface HTMLAmplifyStrikeElement extends Components.AmplifyStrike, HTMLStencilElement {
    }
    var HTMLAmplifyStrikeElement: {
        prototype: HTMLAmplifyStrikeElement;
        new (): HTMLAmplifyStrikeElement;
    };
    interface HTMLAmplifyToastElement extends Components.AmplifyToast, HTMLStencilElement {
    }
    var HTMLAmplifyToastElement: {
        prototype: HTMLAmplifyToastElement;
        new (): HTMLAmplifyToastElement;
    };
    interface HTMLAmplifyTooltipElement extends Components.AmplifyTooltip, HTMLStencilElement {
    }
    var HTMLAmplifyTooltipElement: {
        prototype: HTMLAmplifyTooltipElement;
        new (): HTMLAmplifyTooltipElement;
    };
    interface HTMLAmplifyTotpSetupElement extends Components.AmplifyTotpSetup, HTMLStencilElement {
    }
    var HTMLAmplifyTotpSetupElement: {
        prototype: HTMLAmplifyTotpSetupElement;
        new (): HTMLAmplifyTotpSetupElement;
    };
    interface HTMLAmplifyUsernameFieldElement extends Components.AmplifyUsernameField, HTMLStencilElement {
    }
    var HTMLAmplifyUsernameFieldElement: {
        prototype: HTMLAmplifyUsernameFieldElement;
        new (): HTMLAmplifyUsernameFieldElement;
    };
    interface HTMLAmplifyVerifyContactElement extends Components.AmplifyVerifyContact, HTMLStencilElement {
    }
    var HTMLAmplifyVerifyContactElement: {
        prototype: HTMLAmplifyVerifyContactElement;
        new (): HTMLAmplifyVerifyContactElement;
    };
    interface HTMLElementTagNameMap {
        "amplify-amazon-button": HTMLAmplifyAmazonButtonElement;
        "amplify-auth-fields": HTMLAmplifyAuthFieldsElement;
        "amplify-auth0-button": HTMLAmplifyAuth0ButtonElement;
        "amplify-authenticator": HTMLAmplifyAuthenticatorElement;
        "amplify-button": HTMLAmplifyButtonElement;
        "amplify-checkbox": HTMLAmplifyCheckboxElement;
        "amplify-code-field": HTMLAmplifyCodeFieldElement;
        "amplify-confirm-sign-in": HTMLAmplifyConfirmSignInElement;
        "amplify-confirm-sign-up": HTMLAmplifyConfirmSignUpElement;
        "amplify-container": HTMLAmplifyContainerElement;
        "amplify-country-dial-code": HTMLAmplifyCountryDialCodeElement;
        "amplify-email-field": HTMLAmplifyEmailFieldElement;
        "amplify-facebook-button": HTMLAmplifyFacebookButtonElement;
        "amplify-federated-buttons": HTMLAmplifyFederatedButtonsElement;
        "amplify-federated-sign-in": HTMLAmplifyFederatedSignInElement;
        "amplify-forgot-password": HTMLAmplifyForgotPasswordElement;
        "amplify-form-field": HTMLAmplifyFormFieldElement;
        "amplify-form-section": HTMLAmplifyFormSectionElement;
        "amplify-google-button": HTMLAmplifyGoogleButtonElement;
        "amplify-greetings": HTMLAmplifyGreetingsElement;
        "amplify-hint": HTMLAmplifyHintElement;
        "amplify-icon": HTMLAmplifyIconElement;
        "amplify-icon-button": HTMLAmplifyIconButtonElement;
        "amplify-input": HTMLAmplifyInputElement;
        "amplify-label": HTMLAmplifyLabelElement;
        "amplify-link": HTMLAmplifyLinkElement;
        "amplify-loading-spinner": HTMLAmplifyLoadingSpinnerElement;
        "amplify-nav": HTMLAmplifyNavElement;
        "amplify-oauth-button": HTMLAmplifyOauthButtonElement;
        "amplify-password-field": HTMLAmplifyPasswordFieldElement;
        "amplify-phone-field": HTMLAmplifyPhoneFieldElement;
        "amplify-radio-button": HTMLAmplifyRadioButtonElement;
        "amplify-require-new-password": HTMLAmplifyRequireNewPasswordElement;
        "amplify-section": HTMLAmplifySectionElement;
        "amplify-select": HTMLAmplifySelectElement;
        "amplify-select-mfa-type": HTMLAmplifySelectMfaTypeElement;
        "amplify-sign-in": HTMLAmplifySignInElement;
        "amplify-sign-in-button": HTMLAmplifySignInButtonElement;
        "amplify-sign-out": HTMLAmplifySignOutElement;
        "amplify-sign-up": HTMLAmplifySignUpElement;
        "amplify-strike": HTMLAmplifyStrikeElement;
        "amplify-toast": HTMLAmplifyToastElement;
        "amplify-tooltip": HTMLAmplifyTooltipElement;
        "amplify-totp-setup": HTMLAmplifyTotpSetupElement;
        "amplify-username-field": HTMLAmplifyUsernameFieldElement;
        "amplify-verify-contact": HTMLAmplifyVerifyContactElement;
    }
}
declare namespace LocalJSX {
    interface AmplifyAmazonButton {
        /**
          * App-specific client ID from Google
         */
        "clientId"?: FederatedConfig['amazonClientId'];
        /**
          * Auth state change handler for this component e.g. SignIn -> 'Create Account' link -> SignUp
         */
        "handleAuthStateChange"?: AuthStateHandler;
    }
    interface AmplifyAuthFields {
        /**
          * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: string,     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
         */
        "formFields"?: FormFieldTypes | string[];
    }
    interface AmplifyAuth0Button {
        /**
          * See: https://auth0.com/docs/libraries/auth0js/v9#available-parameters
         */
        "config"?: FederatedConfig['auth0Config'];
        /**
          * Auth state change handler for this component
         */
        "handleAuthStateChange"?: AuthStateHandler;
    }
    interface AmplifyAuthenticator {
        /**
          * Federated credentials & configuration.
         */
        "federated"?: FederatedConfig;
        /**
          * Callback for Authenticator state machine changes
         */
        "handleAuthStateChange"?: AuthStateHandler;
        /**
          * Initial starting state of the Authenticator component. E.g. If `signup` is passed the default component is set to AmplifySignUp
         */
        "initialAuthState"?: AuthState.SignIn | AuthState.SignUp;
        /**
          * Username Alias is used to setup authentication with `username`, `email` or `phone_number`
         */
        "usernameAlias"?: UsernameAliasStrings;
    }
    interface AmplifyButton {
        /**
          * Disabled state of the button
         */
        "disabled"?: boolean;
        /**
          * (Optional) Callback called when a user clicks on the button
         */
        "handleButtonClick"?: (evt: Event) => void;
        /**
          * Type of the button: 'button', 'submit' or 'reset'
         */
        "type"?: ButtonTypes;
        /**
          * Variant of a button: 'button' | 'anchor'
         */
        "variant"?: ButtonVariant;
    }
    interface AmplifyCheckbox {
        /**
          * If `true`, the checkbox is selected.
         */
        "checked"?: boolean;
        /**
          * If `true`, the checkbox is disabled
         */
        "disabled"?: boolean;
        /**
          * Field ID used for the 'htmlFor' in the label
         */
        "fieldId"?: string;
        /**
          * Label for the checkbox
         */
        "label"?: string;
        /**
          * Name of the checkbox
         */
        "name"?: string;
        /**
          * Value of the checkbox
         */
        "value"?: string;
    }
    interface AmplifyCodeField {
        /**
          * Will disable the input if set to true
         */
        "disabled"?: boolean;
        /**
          * Based on the type of field e.g. sign in, sign up, forgot password, etc.
         */
        "fieldId"?: string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * Used as the hint in case you forgot your confirmation code, etc.
         */
        "hint"?: string | FunctionalComponent | null;
        /**
          * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
         */
        "inputProps"?: object;
        /**
          * Used for the code label
         */
        "label"?: string;
        /**
          * Used for the placeholder label
         */
        "placeholder"?: string;
        /**
          * The required flag in order to make an input required prior to submitting a form
         */
        "required"?: boolean;
        /**
          * The value of the content inside of the input field
         */
        "value"?: string;
    }
    interface AmplifyConfirmSignIn {
        /**
          * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: string,     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
         */
        "formFields"?: FormFieldTypes | string[];
        /**
          * Auth state change handler for this component
         */
        "handleAuthStateChange"?: AuthStateHandler;
        /**
          * Fires when confirm sign in form is submitted
         */
        "handleSubmit"?: (event: Event) => void;
        /**
          * Used for header text in confirm sign in component
         */
        "headerText"?: string;
        /**
          * Used for the submit button text in confirm sign in component
         */
        "submitButtonText"?: string;
        /**
          * Cognito user signing in
         */
        "user"?: CognitoUserInterface;
    }
    interface AmplifyConfirmSignUp {
        /**
          * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: string,     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
         */
        "formFields"?: FormFieldTypes | string[];
        /**
          * Auth state change handler for this components e.g. SignIn -> 'Create Account' link -> SignUp
         */
        "handleAuthStateChange"?: AuthStateHandler;
        /**
          * Fires when sign up form is submitted
         */
        "handleSubmit"?: (submitEvent: Event) => void;
        /**
          * Used for header text in confirm sign up component
         */
        "headerText"?: string;
        /**
          * Used for the submit button text in confirm sign up component
         */
        "submitButtonText"?: string;
        /**
          * Used for the username to be passed to resend code
         */
        "user"?: CognitoUserInterface;
        /**
          * Username Alias is used to setup authentication with `username`, `email` or `phone_number`
         */
        "usernameAlias"?: UsernameAliasStrings;
    }
    interface AmplifyContainer {
    }
    interface AmplifyCountryDialCode {
        /**
          * The ID of the field.  Should match with its corresponding input's ID.
         */
        "fieldId"?: string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * The options of the country dial code select input.
         */
        "options"?: CountryCodeDialOptions;
    }
    interface AmplifyEmailField {
        /**
          * Will disable the input if set to true
         */
        "disabled"?: boolean;
        /**
          * Based on the type of field e.g. sign in, sign up, forgot password, etc.
         */
        "fieldId"?: string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
         */
        "inputProps"?: object;
        /**
          * Used for the EMAIL label
         */
        "label"?: string;
        /**
          * Used for the placeholder label
         */
        "placeholder"?: string;
        /**
          * The required flag in order to make an input required prior to submitting a form
         */
        "required"?: boolean;
        /**
          * The value of the content inside of the input field
         */
        "value"?: string;
    }
    interface AmplifyFacebookButton {
        /**
          * App-specific client ID from Facebook
         */
        "appId"?: FederatedConfig['facebookAppId'];
        /**
          * Auth state change handler for this component e.g. SignIn -> 'Create Account' link -> SignUp
         */
        "handleAuthStateChange"?: AuthStateHandler;
    }
    interface AmplifyFederatedButtons {
        /**
          * The current authentication state.
         */
        "authState"?: AuthState;
        /**
          * Federated credentials & configuration.
         */
        "federated"?: FederatedConfig;
        /**
          * Auth state change handler for this component e.g. SignIn -> 'Create Account' link -> SignUp
         */
        "handleAuthStateChange"?: AuthStateHandler;
    }
    interface AmplifyFederatedSignIn {
        /**
          * The current authentication state.
         */
        "authState"?: AuthState;
        /**
          * Federated credentials & configuration.
         */
        "federated"?: any;
    }
    interface AmplifyForgotPassword {
        /**
          * The form fields displayed inside of the forgot password form
         */
        "formFields"?: FormFieldTypes | string[];
        /**
          * Auth state change handler for this component
         */
        "handleAuthStateChange"?: AuthStateHandler;
        /**
          * The function called when making a request to reset password
         */
        "handleSend"?: (event: Event) => void;
        /**
          * The function called when submitting a new password
         */
        "handleSubmit"?: (event: Event) => void;
        /**
          * The header text of the forgot password section
         */
        "headerText"?: string;
        /**
          * The text displayed inside of the submit button for the form
         */
        "submitButtonText"?: string;
        /**
          * Username Alias is used to setup authentication with `username`, `email` or `phone_number`
         */
        "usernameAlias"?: UsernameAliasStrings;
    }
    interface AmplifyFormField {
        /**
          * The text of the description.  Goes between the label and the input.
         */
        "description"?: string | null;
        /**
          * Will disable the input if set to true
         */
        "disabled"?: boolean;
        /**
          * The ID of the field.  Should match with its corresponding input's ID.
         */
        "fieldId"?: string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * The text of a hint to the user as to how to fill out the input.  Goes just below the input.
         */
        "hint"?: string | FunctionalComponent | null;
        /**
          * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
         */
        "inputProps"?: object;
        /**
          * The text of the label.  Goes above the input. Ex: 'First name'
         */
        "label"?: string | null;
        /**
          * (Optional) String value for the name of the input.
         */
        "name"?: string;
        /**
          * (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users.
         */
        "placeholder"?: string;
        /**
          * The required flag in order to make an input required prior to submitting a form
         */
        "required"?: boolean;
        /**
          * The input type.  Can be any HTML input type.
         */
        "type"?: TextFieldTypes;
        /**
          * The value of the content inside of the input field
         */
        "value"?: string;
    }
    interface AmplifyFormSection {
        /**
          * (Required) Function called upon submission of form
         */
        "handleSubmit"?: (event: Event) => void;
        /**
          * Used for form section header
         */
        "headerText"?: string;
        /**
          * Loading state for the form
         */
        "loading"?: boolean;
        /**
          * Secondary footer component or text
         */
        "secondaryFooterContent"?: string | FunctionalComponent | null;
        /**
          * (Optional) Used as a the default value within the default footer slot
         */
        "submitButtonText"?: string;
        /**
          * String prefix for the data-test attributes in this component primarily used for testing purposes
         */
        "testDataPrefix"?: string;
    }
    interface AmplifyGoogleButton {
        /**
          * App-specific client ID from Google
         */
        "clientId"?: FederatedConfig['googleClientId'];
        /**
          * Auth state change handler for this component e.g. SignIn -> 'Create Account' link -> SignUp
         */
        "handleAuthStateChange"?: AuthStateHandler;
    }
    interface AmplifyGreetings {
        /**
          * Auth state change handler for this component
         */
        "handleAuthStateChange"?: AuthStateHandler;
        /**
          * Logo displayed inside of the header
         */
        "logo"?: FunctionalComponent | null;
        /**
          * Username displayed in the greetings
         */
        "username"?: string;
    }
    interface AmplifyHint {
    }
    interface AmplifyIcon {
        /**
          * (Required) Name of icon used to determine the icon rendered
         */
        "name"?: IconNameType;
    }
    interface AmplifyIconButton {
        /**
          * (Optional) Whether or not to show the tooltip automatically
         */
        "autoShowTooltip"?: boolean;
        /**
          * The name of the icon used inside of the button
         */
        "name"?: IconNameType;
        /**
          * (Optional) The tooltip that will show on hover of the button
         */
        "tooltip"?: string | null;
    }
    interface AmplifyInput {
        /**
          * The text of the description.  Goes just below the label.
         */
        "description"?: string | null;
        /**
          * Will disable the input if set to true
         */
        "disabled"?: boolean;
        /**
          * The ID of the field.  Should match with its corresponding input's ID.
         */
        "fieldId"?: string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: InputEvent) => void;
        /**
          * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
         */
        "inputProps"?: object;
        /**
          * (Optional) String value for the name of the input.
         */
        "name"?: string;
        /**
          * Event formSubmit is emitted on keydown 'Enter' on an input and can be listened to by a parent form
         */
        "onFormSubmit"?: (event: CustomEvent<any>) => void;
        /**
          * (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users.
         */
        "placeholder"?: string;
        /**
          * The input type.  Can be any HTML input type.
         */
        "type"?: TextFieldTypes;
        /**
          * The value of the content inside of the input field
         */
        "value"?: string;
    }
    interface AmplifyLabel {
        /**
          * Reflects the value of the for content property of html element
         */
        "htmlFor"?: string;
    }
    interface AmplifyLink {
        /**
          * The link role is used to identify an element that creates a hyperlink to a resource that is in the application or external
         */
        "role"?: string;
    }
    interface AmplifyLoadingSpinner {
    }
    interface AmplifyNav {
    }
    interface AmplifyOauthButton {
        /**
          * Federated credentials & configuration.
         */
        "config"?: FederatedConfig['oauthConfig'];
    }
    interface AmplifyPasswordField {
        /**
          * Will disable the input if set to true
         */
        "disabled"?: boolean;
        /**
          * Based on the type of field e.g. sign in, sign up, forgot password, etc.
         */
        "fieldId"?: string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * Used as the hint in case you forgot your password, etc.
         */
        "hint"?: string | FunctionalComponent | null;
        /**
          * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
         */
        "inputProps"?: object;
        /**
          * Used for the password label
         */
        "label"?: string;
        /**
          * Used for the placeholder label
         */
        "placeholder"?: string;
        /**
          * The required flag in order to make an input required prior to submitting a form
         */
        "required"?: boolean;
        /**
          * The value of the content inside of the input field
         */
        "value"?: string;
    }
    interface AmplifyPhoneField {
        /**
          * Will disable the input if set to true
         */
        "disabled"?: boolean;
        /**
          * Based on the type of field e.g. sign in, sign up, forgot password, etc.
         */
        "fieldId"?: string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * Used as the hint in case you forgot your confirmation code, etc.
         */
        "hint"?: string | FunctionalComponent | null;
        /**
          * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
         */
        "inputProps"?: object;
        /**
          * Used for the Phone label
         */
        "label"?: string;
        /**
          * Used for the placeholder label
         */
        "placeholder"?: string;
        /**
          * The required flag in order to make an input required prior to submitting a form
         */
        "required"?: boolean;
        /**
          * The value of the content inside of the input field
         */
        "value"?: string;
    }
    interface AmplifyRadioButton {
        /**
          * If `true`, the radio button is selected.
         */
        "checked"?: boolean;
        /**
          * If `true`, the checkbox is disabled
         */
        "disabled"?: boolean;
        /**
          * Field ID used for the 'for' in the label
         */
        "fieldId"?: string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
         */
        "inputProps"?: object;
        /**
          * Label for the radio button
         */
        "label"?: string;
        /**
          * (Optional) Name of radio button
         */
        "name"?: string;
        /**
          * (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users.
         */
        "placeholder"?: string;
        /**
          * (Optional) Value of radio button
         */
        "value"?: string;
    }
    interface AmplifyRequireNewPassword {
        /**
          * The form fields displayed inside of the forgot password form
         */
        "formFields"?: FormFieldTypes;
        /**
          * Auth state change handler for this component
         */
        "handleAuthStateChange"?: AuthStateHandler;
        /**
          * The function called when submitting a new password
         */
        "handleSubmit"?: (event: Event) => void;
        /**
          * The header text of the forgot password section
         */
        "headerText"?: string;
        /**
          * The text displayed inside of the submit button for the form
         */
        "submitButtonText"?: string;
        /**
          * Used for the username to be passed to resend code
         */
        "user"?: CognitoUserInterface;
    }
    interface AmplifySection {
        /**
          * Equivalent to html section role
         */
        "role"?: string;
    }
    interface AmplifySelect {
        /**
          * Used for id field
         */
        "fieldId"?: string;
        /**
          * The callback, called when the select is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * The options of the select input. Must be an Array of Objects with an Object shape of {label: string, value: string|number}
         */
        "options"?: SelectOptionsString | SelectOptionsNumber;
    }
    interface AmplifySelectMfaType {
        /**
          * Types of MFA options
         */
        "MFATypes"?: MFATypesInterface;
        /**
          * Current authenticated user in order to sign requests properly for TOTP
         */
        "authData"?: CognitoUserInterface;
        /**
          * Fires when Verify is clicked
         */
        "handleSubmit"?: (event: Event) => void;
    }
    interface AmplifySignIn {
        /**
          * Federated credentials & configuration.
         */
        "federated"?: FederatedConfig;
        /**
          * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: string,     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
         */
        "formFields"?: FormFieldTypes | string[];
        /**
          * Auth state change handler for this component
         */
        "handleAuthStateChange"?: AuthStateHandler;
        /**
          * Fires when sign in form is submitted
         */
        "handleSubmit"?: (event: Event) => void;
        /**
          * Used for header text in sign in component
         */
        "headerText"?: string;
        /**
          * Hides the sign up link
         */
        "hideSignUp"?: boolean;
        /**
          * Used for the submit button text in sign in component
         */
        "submitButtonText"?: string;
        /**
          * Username Alias is used to setup authentication with `username`, `email` or `phone_number`
         */
        "usernameAlias"?: UsernameAliasStrings;
    }
    interface AmplifySignInButton {
        /**
          * Specifies the federation provider.
         */
        "provider"?: 'amazon' | 'auth0' | 'facebook' | 'google' | 'oauth';
    }
    interface AmplifySignOut {
        /**
          * Text inside of the Sign Out button
         */
        "buttonText"?: string;
        /**
          * Auth state change handler for this component
         */
        "handleAuthStateChange"?: AuthStateHandler;
    }
    interface AmplifySignUp {
        /**
          * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc. by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing text for a label or adjust a placeholder, you can follow the structure below in order to do just that. ``` [   {     type: string,     label: string,     placeholder: string,     hint: string | Functional Component | null,     required: boolean   } ] ```
         */
        "formFields"?: FormFieldTypes | string[];
        /**
          * Auth state change handler for this component e.g. SignIn -> 'Create Account' link -> SignUp
         */
        "handleAuthStateChange"?: AuthStateHandler;
        /**
          * Fires when sign up form is submitted
         */
        "handleSubmit"?: (event: Event) => void;
        /**
          * Used for the submit button text in sign up component
         */
        "haveAccountText"?: string;
        /**
          * Used for header text in sign up component
         */
        "headerText"?: string;
        /**
          * Used for the submit button text in sign up component
         */
        "signInText"?: string;
        /**
          * Used for the submit button text in sign up component
         */
        "submitButtonText"?: string;
        /**
          * Username Alias is used to setup authentication with `username`, `email` or `phone_number`
         */
        "usernameAlias"?: UsernameAliasStrings;
        /**
          * Engages when invalid actions occur, such as missing field, etc.
         */
        "validationErrors"?: string;
    }
    interface AmplifyStrike {
    }
    interface AmplifyToast {
        /**
          * Used in order to add a dismissable `x` for the Toast component
         */
        "handleClose"?: () => void;
        /**
          * Message to be displayed inside the toast
         */
        "message"?: string;
    }
    interface AmplifyTooltip {
        /**
          * (Optional) Whether or not the tooltip should be automatically shown, i.e. not disappear when not hovered
         */
        "shouldAutoShow"?: boolean;
        /**
          * (Required) The text in the tooltip
         */
        "text"?: string;
    }
    interface AmplifyTotpSetup {
        /**
          * Auth state change handler for this component
         */
        "handleAuthStateChange"?: AuthStateHandler;
        /**
          * Used for header text in totp setup component
         */
        "headerText"?: string;
        /**
          * Used in order to configure TOTP for a user
         */
        "user"?: CognitoUserInterface;
    }
    interface AmplifyUsernameField {
        /**
          * Will disable the input if set to true
         */
        "disabled"?: boolean;
        /**
          * Based on the type of field e.g. sign in, sign up, forgot password, etc.
         */
        "fieldId"?: string;
        /**
          * The callback, called when the input is modified by the user.
         */
        "handleInputChange"?: (inputEvent: Event) => void;
        /**
          * Attributes places on the input element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes
         */
        "inputProps"?: object;
        /**
          * Used for the username label
         */
        "label"?: string;
        /**
          * Used for the placeholder label
         */
        "placeholder"?: string;
        /**
          * The required flag in order to make an input required prior to submitting a form
         */
        "required"?: boolean;
        /**
          * The value of the content inside of the input field
         */
        "value"?: string;
    }
    interface AmplifyVerifyContact {
        /**
          * Authentication state handler
         */
        "handleAuthStateChange"?: AuthStateHandler;
        /**
          * User with unverified contact information
         */
        "user"?: CognitoUserInterface;
    }
    interface IntrinsicElements {
        "amplify-amazon-button": AmplifyAmazonButton;
        "amplify-auth-fields": AmplifyAuthFields;
        "amplify-auth0-button": AmplifyAuth0Button;
        "amplify-authenticator": AmplifyAuthenticator;
        "amplify-button": AmplifyButton;
        "amplify-checkbox": AmplifyCheckbox;
        "amplify-code-field": AmplifyCodeField;
        "amplify-confirm-sign-in": AmplifyConfirmSignIn;
        "amplify-confirm-sign-up": AmplifyConfirmSignUp;
        "amplify-container": AmplifyContainer;
        "amplify-country-dial-code": AmplifyCountryDialCode;
        "amplify-email-field": AmplifyEmailField;
        "amplify-facebook-button": AmplifyFacebookButton;
        "amplify-federated-buttons": AmplifyFederatedButtons;
        "amplify-federated-sign-in": AmplifyFederatedSignIn;
        "amplify-forgot-password": AmplifyForgotPassword;
        "amplify-form-field": AmplifyFormField;
        "amplify-form-section": AmplifyFormSection;
        "amplify-google-button": AmplifyGoogleButton;
        "amplify-greetings": AmplifyGreetings;
        "amplify-hint": AmplifyHint;
        "amplify-icon": AmplifyIcon;
        "amplify-icon-button": AmplifyIconButton;
        "amplify-input": AmplifyInput;
        "amplify-label": AmplifyLabel;
        "amplify-link": AmplifyLink;
        "amplify-loading-spinner": AmplifyLoadingSpinner;
        "amplify-nav": AmplifyNav;
        "amplify-oauth-button": AmplifyOauthButton;
        "amplify-password-field": AmplifyPasswordField;
        "amplify-phone-field": AmplifyPhoneField;
        "amplify-radio-button": AmplifyRadioButton;
        "amplify-require-new-password": AmplifyRequireNewPassword;
        "amplify-section": AmplifySection;
        "amplify-select": AmplifySelect;
        "amplify-select-mfa-type": AmplifySelectMfaType;
        "amplify-sign-in": AmplifySignIn;
        "amplify-sign-in-button": AmplifySignInButton;
        "amplify-sign-out": AmplifySignOut;
        "amplify-sign-up": AmplifySignUp;
        "amplify-strike": AmplifyStrike;
        "amplify-toast": AmplifyToast;
        "amplify-tooltip": AmplifyTooltip;
        "amplify-totp-setup": AmplifyTotpSetup;
        "amplify-username-field": AmplifyUsernameField;
        "amplify-verify-contact": AmplifyVerifyContact;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "amplify-amazon-button": LocalJSX.AmplifyAmazonButton & JSXBase.HTMLAttributes<HTMLAmplifyAmazonButtonElement>;
            "amplify-auth-fields": LocalJSX.AmplifyAuthFields & JSXBase.HTMLAttributes<HTMLAmplifyAuthFieldsElement>;
            "amplify-auth0-button": LocalJSX.AmplifyAuth0Button & JSXBase.HTMLAttributes<HTMLAmplifyAuth0ButtonElement>;
            "amplify-authenticator": LocalJSX.AmplifyAuthenticator & JSXBase.HTMLAttributes<HTMLAmplifyAuthenticatorElement>;
            "amplify-button": LocalJSX.AmplifyButton & JSXBase.HTMLAttributes<HTMLAmplifyButtonElement>;
            "amplify-checkbox": LocalJSX.AmplifyCheckbox & JSXBase.HTMLAttributes<HTMLAmplifyCheckboxElement>;
            "amplify-code-field": LocalJSX.AmplifyCodeField & JSXBase.HTMLAttributes<HTMLAmplifyCodeFieldElement>;
            "amplify-confirm-sign-in": LocalJSX.AmplifyConfirmSignIn & JSXBase.HTMLAttributes<HTMLAmplifyConfirmSignInElement>;
            "amplify-confirm-sign-up": LocalJSX.AmplifyConfirmSignUp & JSXBase.HTMLAttributes<HTMLAmplifyConfirmSignUpElement>;
            "amplify-container": LocalJSX.AmplifyContainer & JSXBase.HTMLAttributes<HTMLAmplifyContainerElement>;
            "amplify-country-dial-code": LocalJSX.AmplifyCountryDialCode & JSXBase.HTMLAttributes<HTMLAmplifyCountryDialCodeElement>;
            "amplify-email-field": LocalJSX.AmplifyEmailField & JSXBase.HTMLAttributes<HTMLAmplifyEmailFieldElement>;
            "amplify-facebook-button": LocalJSX.AmplifyFacebookButton & JSXBase.HTMLAttributes<HTMLAmplifyFacebookButtonElement>;
            "amplify-federated-buttons": LocalJSX.AmplifyFederatedButtons & JSXBase.HTMLAttributes<HTMLAmplifyFederatedButtonsElement>;
            "amplify-federated-sign-in": LocalJSX.AmplifyFederatedSignIn & JSXBase.HTMLAttributes<HTMLAmplifyFederatedSignInElement>;
            "amplify-forgot-password": LocalJSX.AmplifyForgotPassword & JSXBase.HTMLAttributes<HTMLAmplifyForgotPasswordElement>;
            "amplify-form-field": LocalJSX.AmplifyFormField & JSXBase.HTMLAttributes<HTMLAmplifyFormFieldElement>;
            "amplify-form-section": LocalJSX.AmplifyFormSection & JSXBase.HTMLAttributes<HTMLAmplifyFormSectionElement>;
            "amplify-google-button": LocalJSX.AmplifyGoogleButton & JSXBase.HTMLAttributes<HTMLAmplifyGoogleButtonElement>;
            "amplify-greetings": LocalJSX.AmplifyGreetings & JSXBase.HTMLAttributes<HTMLAmplifyGreetingsElement>;
            "amplify-hint": LocalJSX.AmplifyHint & JSXBase.HTMLAttributes<HTMLAmplifyHintElement>;
            "amplify-icon": LocalJSX.AmplifyIcon & JSXBase.HTMLAttributes<HTMLAmplifyIconElement>;
            "amplify-icon-button": LocalJSX.AmplifyIconButton & JSXBase.HTMLAttributes<HTMLAmplifyIconButtonElement>;
            "amplify-input": LocalJSX.AmplifyInput & JSXBase.HTMLAttributes<HTMLAmplifyInputElement>;
            "amplify-label": LocalJSX.AmplifyLabel & JSXBase.HTMLAttributes<HTMLAmplifyLabelElement>;
            "amplify-link": LocalJSX.AmplifyLink & JSXBase.HTMLAttributes<HTMLAmplifyLinkElement>;
            "amplify-loading-spinner": LocalJSX.AmplifyLoadingSpinner & JSXBase.HTMLAttributes<HTMLAmplifyLoadingSpinnerElement>;
            "amplify-nav": LocalJSX.AmplifyNav & JSXBase.HTMLAttributes<HTMLAmplifyNavElement>;
            "amplify-oauth-button": LocalJSX.AmplifyOauthButton & JSXBase.HTMLAttributes<HTMLAmplifyOauthButtonElement>;
            "amplify-password-field": LocalJSX.AmplifyPasswordField & JSXBase.HTMLAttributes<HTMLAmplifyPasswordFieldElement>;
            "amplify-phone-field": LocalJSX.AmplifyPhoneField & JSXBase.HTMLAttributes<HTMLAmplifyPhoneFieldElement>;
            "amplify-radio-button": LocalJSX.AmplifyRadioButton & JSXBase.HTMLAttributes<HTMLAmplifyRadioButtonElement>;
            "amplify-require-new-password": LocalJSX.AmplifyRequireNewPassword & JSXBase.HTMLAttributes<HTMLAmplifyRequireNewPasswordElement>;
            "amplify-section": LocalJSX.AmplifySection & JSXBase.HTMLAttributes<HTMLAmplifySectionElement>;
            "amplify-select": LocalJSX.AmplifySelect & JSXBase.HTMLAttributes<HTMLAmplifySelectElement>;
            "amplify-select-mfa-type": LocalJSX.AmplifySelectMfaType & JSXBase.HTMLAttributes<HTMLAmplifySelectMfaTypeElement>;
            "amplify-sign-in": LocalJSX.AmplifySignIn & JSXBase.HTMLAttributes<HTMLAmplifySignInElement>;
            "amplify-sign-in-button": LocalJSX.AmplifySignInButton & JSXBase.HTMLAttributes<HTMLAmplifySignInButtonElement>;
            "amplify-sign-out": LocalJSX.AmplifySignOut & JSXBase.HTMLAttributes<HTMLAmplifySignOutElement>;
            "amplify-sign-up": LocalJSX.AmplifySignUp & JSXBase.HTMLAttributes<HTMLAmplifySignUpElement>;
            "amplify-strike": LocalJSX.AmplifyStrike & JSXBase.HTMLAttributes<HTMLAmplifyStrikeElement>;
            "amplify-toast": LocalJSX.AmplifyToast & JSXBase.HTMLAttributes<HTMLAmplifyToastElement>;
            "amplify-tooltip": LocalJSX.AmplifyTooltip & JSXBase.HTMLAttributes<HTMLAmplifyTooltipElement>;
            "amplify-totp-setup": LocalJSX.AmplifyTotpSetup & JSXBase.HTMLAttributes<HTMLAmplifyTotpSetupElement>;
            "amplify-username-field": LocalJSX.AmplifyUsernameField & JSXBase.HTMLAttributes<HTMLAmplifyUsernameFieldElement>;
            "amplify-verify-contact": LocalJSX.AmplifyVerifyContact & JSXBase.HTMLAttributes<HTMLAmplifyVerifyContactElement>;
        }
    }
}
