'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

const index = require('./index-b93ab635.js');
const core = require('@aws-amplify/core');
const authTypes = require('./auth-types-cd1f71d2.js');
require('./Translations-7087b270.js');
const constants = require('./constants-3aa9204f.js');
const Auth = require('@aws-amplify/auth');
const Auth__default = _interopDefault(Auth);
const helpers = require('./helpers-7af08dc1.js');

const amplifyAuthenticatorCss = ":host{--background-color:var(--amplify-background-color)}";

const logger = new core.Logger('Authenticator');
class AmplifyAuthenticator {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /** Initial starting state of the Authenticator component. E.g. If `signup` is passed the default component is set to AmplifySignUp */
        this.initialAuthState = authTypes.AuthState.SignIn;
        /** Callback for Authenticator state machine changes */
        this.handleAuthStateChange = () => { };
        this.authState = authTypes.AuthState.Loading;
        this.toastMessage = '';
        this.handleExternalAuthEvent = ({ payload }) => {
            switch (payload.event) {
                case 'cognitoHostedUI':
                    return helpers.dispatchAuthStateChangeEvent(authTypes.AuthState.SignedIn, payload.data);
                case 'cognitoHostedUI_failure':
                case 'parsingUrl_failure':
                case 'signOut':
                case 'customGreetingSignOut':
                    return helpers.dispatchAuthStateChangeEvent(this.initialAuthState);
            }
        };
        this.handleToastEvent = ({ payload }) => {
            switch (payload.event) {
                case constants.TOAST_AUTH_ERROR_EVENT:
                    if (payload.message)
                        this.toastMessage = payload.message;
                    break;
            }
        };
    }
    async componentWillLoad() {
        helpers.onAuthUIStateChange((authState, authData) => {
            this.onAuthStateChange(authState, authData);
            this.toastMessage = '';
        });
        core.Hub.listen(constants.UI_AUTH_CHANNEL, this.handleToastEvent);
        core.Hub.listen(constants.AUTH_CHANNEL, this.handleExternalAuthEvent);
        Auth.appendToCognitoUserAgent('amplify-authenticator');
        const byHostedUI = localStorage.getItem(constants.REDIRECTED_FROM_HOSTED_UI);
        localStorage.removeItem(constants.REDIRECTED_FROM_HOSTED_UI);
        if (byHostedUI !== 'true')
            await this.checkUser();
    }
    async checkUser() {
        if (!Auth.Auth || typeof Auth.Auth.currentAuthenticatedUser !== 'function') {
            throw new Error(constants.NO_AUTH_MODULE_FOUND);
        }
        try {
            const user = await Auth.Auth.currentAuthenticatedUser();
            helpers.dispatchAuthStateChangeEvent(authTypes.AuthState.SignedIn, user);
        }
        catch (error) {
            let cachedAuthState = null;
            try {
                cachedAuthState = localStorage.getItem(constants.AUTHENTICATOR_AUTHSTATE);
            }
            catch (error) {
                logger.debug('Failed to get the auth state from local storage', error);
            }
            try {
                if (cachedAuthState === authTypes.AuthState.SignedIn) {
                    await Auth.Auth.signOut();
                }
                helpers.dispatchAuthStateChangeEvent(this.initialAuthState);
            }
            catch (error) {
                logger.debug('Failed to sign out', error);
            }
        }
    }
    async onAuthStateChange(nextAuthState, data) {
        if (nextAuthState === undefined)
            return logger.error('nextAuthState cannot be undefined');
        logger.info('Inside onAuthStateChange Method current authState:', this.authState);
        if (nextAuthState === authTypes.AuthState.SignedOut) {
            this.authState = this.initialAuthState;
        }
        else {
            this.authState = nextAuthState;
        }
        this.authData = data;
        if (this.authData)
            logger.log('Auth Data was set:', this.authData);
        if (this.authState === nextAuthState) {
            this.handleAuthStateChange(this.authState, this.authData);
            logger.info(`authState has been updated to ${this.authState}`);
        }
    }
    renderAuthComponent(authState) {
        switch (authState) {
            case authTypes.AuthState.SignIn:
                return (index.h("slot", { name: "sign-in" }, index.h("amplify-sign-in", { federated: this.federated, usernameAlias: this.usernameAlias })));
            case authTypes.AuthState.ConfirmSignIn:
                return (index.h("slot", { name: "confirm-sign-in" }, index.h("amplify-confirm-sign-in", { user: this.authData })));
            case authTypes.AuthState.SignUp:
                return (index.h("slot", { name: "sign-up" }, index.h("amplify-sign-up", { usernameAlias: this.usernameAlias })));
            case authTypes.AuthState.ConfirmSignUp:
                return (index.h("slot", { name: "confirm-sign-up" }, index.h("amplify-confirm-sign-up", { user: this.authData, usernameAlias: this.usernameAlias })));
            case authTypes.AuthState.ForgotPassword:
                return (index.h("slot", { name: "forgot-password" }, index.h("amplify-forgot-password", { usernameAlias: this.usernameAlias })));
            case authTypes.AuthState.ResetPassword:
                return (index.h("slot", { name: "require-new-password" }, index.h("amplify-require-new-password", { user: this.authData })));
            case authTypes.AuthState.VerifyContact:
                return (index.h("slot", { name: "verify-contact" }, index.h("amplify-verify-contact", { user: this.authData })));
            case authTypes.AuthState.TOTPSetup:
                return (index.h("slot", { name: "totp-setup" }, index.h("amplify-totp-setup", { user: this.authData })));
            case authTypes.AuthState.Loading:
                return (index.h("slot", { name: "loading" }, index.h("div", null, "Loading...")));
            case authTypes.AuthState.SignedIn:
                return [index.h("slot", { name: "greetings" }), index.h("slot", null)];
            default:
                throw new Error(`Unhandled auth state: ${authState}`);
        }
    }
    componentWillUnload() {
        core.Hub.remove(constants.AUTH_CHANNEL, this.handleExternalAuthEvent);
        core.Hub.remove(constants.UI_AUTH_CHANNEL, this.handleToastEvent);
        return helpers.onAuthUIStateChange;
    }
    render() {
        return (index.h(index.Host, null, this.toastMessage ? (index.h("amplify-toast", { message: this.toastMessage, handleClose: () => {
                this.toastMessage = '';
            }, "data-test": "authenticator-error" })) : null, this.renderAuthComponent(this.authState)));
    }
}
AmplifyAuthenticator.style = amplifyAuthenticatorCss;

exports.amplify_authenticator = AmplifyAuthenticator;
