import { Element, Component, Prop, h } from '@stencil/core';
import { hasShadowDom } from '../../common/helpers';
export class AmplifyButton {
    constructor() {
        /** Type of the button: 'button', 'submit' or 'reset' */
        this.type = 'button';
        /** Variant of a button: 'button' | 'anchor' */
        this.variant = 'button';
        /** Disabled state of the button */
        this.disabled = false;
        this.handleClick = (ev) => {
            if (this.handleButtonClick) {
                this.handleButtonClick(ev);
            }
            else if (hasShadowDom(this.el) && this.type == 'submit') {
                // this button wants to specifically submit a form
                // climb up the dom to see if we're in a <form>
                // and if so, then use JS to submit it
                let form = this.el.closest('form');
                if (!form) {
                    // Check for form inside of form section's shadow dom
                    const formSection = this.el.closest('amplify-form-section');
                    form = formSection && formSection.shadowRoot.querySelector('form');
                }
                if (form) {
                    ev.preventDefault();
                    const fakeButton = document.createElement('button');
                    fakeButton.type = this.type;
                    fakeButton.style.display = 'none';
                    form.appendChild(fakeButton);
                    fakeButton.click();
                    fakeButton.remove();
                }
            }
        };
    }
    render() {
        return (h("button", { class: {
                [this.variant]: true,
            }, type: this.type, disabled: this.disabled, onClick: this.handleClick },
            h("slot", null)));
    }
    static get is() { return "amplify-button"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["amplify-button.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["amplify-button.css"]
    }; }
    static get properties() { return {
        "type": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "ButtonTypes",
                "resolved": "\"button\" | \"reset\" | \"submit\"",
                "references": {
                    "ButtonTypes": {
                        "location": "import",
                        "path": "../../common/types/ui-types"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Type of the button: 'button', 'submit' or 'reset'"
            },
            "attribute": "type",
            "reflect": false,
            "defaultValue": "'button'"
        },
        "variant": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "ButtonVariant",
                "resolved": "\"anchor\" | \"button\"",
                "references": {
                    "ButtonVariant": {
                        "location": "import",
                        "path": "../../common/types/ui-types"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Variant of a button: 'button' | 'anchor'"
            },
            "attribute": "variant",
            "reflect": false,
            "defaultValue": "'button'"
        },
        "handleButtonClick": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(evt: Event) => void",
                "resolved": "(evt: Event) => void",
                "references": {
                    "Event": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "(Optional) Callback called when a user clicks on the button"
            }
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Disabled state of the button"
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get elementRef() { return "el"; }
}
