import { I18n } from '@aws-amplify/core';
import { Component, Prop, State, h } from '@stencil/core';
import { AuthState, ChallengeName, AuthFormField, } from '../../common/types/auth-types';
import { NO_AUTH_MODULE_FOUND } from '../../common/constants';
import { Translations } from '../../common/Translations';
import { Auth } from '@aws-amplify/auth';
import { ConsoleLogger as Logger, isEmpty } from '@aws-amplify/core';
import { dispatchToastHubEvent, dispatchAuthStateChangeEvent, requiredAttributesMap } from '../../common/helpers';
const logger = new Logger('amplify-require-new-password');
export class AmplifyRequireNewPassword {
    constructor() {
        /** The header text of the forgot password section */
        this.headerText = I18n.get(Translations.CHANGE_PASSWORD);
        /** The text displayed inside of the submit button for the form */
        this.submitButtonText = I18n.get(Translations.CHANGE_PASSWORD_ACTION);
        /** The function called when submitting a new password */
        this.handleSubmit = event => this.completeNewPassword(event);
        /** Auth state change handler for this component */
        this.handleAuthStateChange = dispatchAuthStateChangeEvent;
        /** The form fields displayed inside of the forgot password form */
        this.formFields = [
            {
                type: AuthFormField.Password,
                required: true,
                handleInputChange: event => this.handlePasswordChange(event),
                label: I18n.get(Translations.NEW_PASSWORD_LABEL),
                placeholder: I18n.get(Translations.NEW_PASSWORD_PLACEHOLDER),
                inputProps: {
                    'data-test': 'require-new-password-password-input',
                },
            },
        ];
        this.loading = false;
        this.requiredAttributes = {};
        this.newFormFields = this.formFields;
    }
    handleRequiredAttributeInputChange(attribute, event) {
        this.requiredAttributes[attribute] = event.target.value;
    }
    componentWillLoad() {
        if (this.user && this.user.challengeParam.requiredAttributes) {
            const userRequiredAttributes = this.user.challengeParam.requiredAttributes;
            userRequiredAttributes.forEach(attribute => {
                const formField = {
                    type: attribute,
                    required: true,
                    label: requiredAttributesMap[attribute].label,
                    placeholder: requiredAttributesMap[attribute].placeholder,
                    handleInputChange: event => this.handleRequiredAttributeInputChange(attribute, event),
                    inputProps: {
                        'data-test': `require-new-password-${attribute}-input`,
                    },
                };
                this.newFormFields.push(formField);
            });
        }
    }
    handlePasswordChange(event) {
        this.password = event.target.value;
    }
    async checkContact(user) {
        if (!Auth || typeof Auth.verifiedContact !== 'function') {
            throw new Error(NO_AUTH_MODULE_FOUND);
        }
        try {
            const data = await Auth.verifiedContact(user);
            if (!isEmpty(data.verified)) {
                this.handleAuthStateChange(AuthState.SignedIn, user);
            }
            else {
                user = Object.assign(user, data);
                this.handleAuthStateChange(AuthState.VerifyContact, user);
            }
        }
        catch (error) {
            dispatchToastHubEvent(error);
        }
    }
    async completeNewPassword(event) {
        if (event) {
            event.preventDefault();
        }
        if (!Auth || typeof Auth.completeNewPassword !== 'function') {
            throw new Error(NO_AUTH_MODULE_FOUND);
        }
        this.loading = true;
        try {
            const user = await Auth.completeNewPassword(this.user, this.password, this.requiredAttributes);
            logger.debug('complete new password', user);
            switch (user.challengeName) {
                case ChallengeName.SMSMFA:
                    this.handleAuthStateChange(AuthState.ConfirmSignIn, user);
                    break;
                case ChallengeName.MFASetup:
                    logger.debug('TOTP setup', user.challengeParam);
                    this.handleAuthStateChange(AuthState.TOTPSetup, user);
                    break;
                default:
                    this.checkContact(user);
            }
        }
        catch (error) {
            dispatchToastHubEvent(error);
        }
        finally {
            this.loading = false;
        }
    }
    render() {
        return (h("amplify-form-section", { headerText: this.headerText, handleSubmit: this.handleSubmit, loading: this.loading, secondaryFooterContent: h("amplify-button", { variant: "anchor", onClick: () => this.handleAuthStateChange(AuthState.SignIn) }, I18n.get(Translations.BACK_TO_SIGN_IN)) },
            h("amplify-auth-fields", { formFields: this.newFormFields })));
    }
    static get is() { return "amplify-require-new-password"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "headerText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The header text of the forgot password section"
            },
            "attribute": "header-text",
            "reflect": false,
            "defaultValue": "I18n.get(Translations.CHANGE_PASSWORD)"
        },
        "submitButtonText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The text displayed inside of the submit button for the form"
            },
            "attribute": "submit-button-text",
            "reflect": false,
            "defaultValue": "I18n.get(Translations.CHANGE_PASSWORD_ACTION)"
        },
        "handleSubmit": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(event: Event) => void",
                "resolved": "(event: Event) => void",
                "references": {
                    "Event": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The function called when submitting a new password"
            },
            "defaultValue": "event => this.completeNewPassword(event)"
        },
        "handleAuthStateChange": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "AuthStateHandler",
                "resolved": "(nextAuthState: AuthState, data?: object) => void",
                "references": {
                    "AuthStateHandler": {
                        "location": "import",
                        "path": "../../common/types/auth-types"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Auth state change handler for this component"
            },
            "defaultValue": "dispatchAuthStateChangeEvent"
        },
        "user": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "CognitoUserInterface",
                "resolved": "CognitoUserInterface",
                "references": {
                    "CognitoUserInterface": {
                        "location": "import",
                        "path": "../../common/types/auth-types"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Used for the username to be passed to resend code"
            }
        },
        "formFields": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "FormFieldTypes",
                "resolved": "FormFieldTypes",
                "references": {
                    "FormFieldTypes": {
                        "location": "import",
                        "path": "../amplify-auth-fields/amplify-auth-fields-interface"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The form fields displayed inside of the forgot password form"
            },
            "defaultValue": "[\n    {\n      type: AuthFormField.Password,\n      required: true,\n      handleInputChange: event => this.handlePasswordChange(event),\n      label: I18n.get(Translations.NEW_PASSWORD_LABEL),\n      placeholder: I18n.get(Translations.NEW_PASSWORD_PLACEHOLDER),\n      inputProps: {\n        'data-test': 'require-new-password-password-input',\n      },\n    },\n  ]"
        }
    }; }
    static get states() { return {
        "password": {},
        "loading": {}
    }; }
}
