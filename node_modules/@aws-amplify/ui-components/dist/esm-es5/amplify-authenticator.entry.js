var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { r as registerInstance, h, H as Host } from './index-82dae9d1.js';
import { Logger, Hub } from '@aws-amplify/core';
import { A as AuthState } from './auth-types-78df304e.js';
import './Translations-baba3f2c.js';
import { T as TOAST_AUTH_ERROR_EVENT, U as UI_AUTH_CHANNEL, A as AUTH_CHANNEL, R as REDIRECTED_FROM_HOSTED_UI, N as NO_AUTH_MODULE_FOUND, b as AUTHENTICATOR_AUTHSTATE } from './constants-3e1b5fcc.js';
import { appendToCognitoUserAgent, Auth } from '@aws-amplify/auth';
import { d as dispatchAuthStateChangeEvent, o as onAuthUIStateChange } from './helpers-9dae6f2a.js';
var amplifyAuthenticatorCss = ":host{--background-color:var(--amplify-background-color)}";
var logger = new Logger('Authenticator');
var AmplifyAuthenticator = /** @class */ (function () {
    function AmplifyAuthenticator(hostRef) {
        var _this = this;
        registerInstance(this, hostRef);
        /** Initial starting state of the Authenticator component. E.g. If `signup` is passed the default component is set to AmplifySignUp */
        this.initialAuthState = AuthState.SignIn;
        /** Callback for Authenticator state machine changes */
        this.handleAuthStateChange = function () { };
        this.authState = AuthState.Loading;
        this.toastMessage = '';
        this.handleExternalAuthEvent = function (_a) {
            var payload = _a.payload;
            switch (payload.event) {
                case 'cognitoHostedUI':
                    return dispatchAuthStateChangeEvent(AuthState.SignedIn, payload.data);
                case 'cognitoHostedUI_failure':
                case 'parsingUrl_failure':
                case 'signOut':
                case 'customGreetingSignOut':
                    return dispatchAuthStateChangeEvent(_this.initialAuthState);
            }
        };
        this.handleToastEvent = function (_a) {
            var payload = _a.payload;
            switch (payload.event) {
                case TOAST_AUTH_ERROR_EVENT:
                    if (payload.message)
                        _this.toastMessage = payload.message;
                    break;
            }
        };
    }
    AmplifyAuthenticator.prototype.componentWillLoad = function () {
        return __awaiter(this, void 0, void 0, function () {
            var byHostedUI;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onAuthUIStateChange(function (authState, authData) {
                            _this.onAuthStateChange(authState, authData);
                            _this.toastMessage = '';
                        });
                        Hub.listen(UI_AUTH_CHANNEL, this.handleToastEvent);
                        Hub.listen(AUTH_CHANNEL, this.handleExternalAuthEvent);
                        appendToCognitoUserAgent('amplify-authenticator');
                        byHostedUI = localStorage.getItem(REDIRECTED_FROM_HOSTED_UI);
                        localStorage.removeItem(REDIRECTED_FROM_HOSTED_UI);
                        if (!(byHostedUI !== 'true')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.checkUser()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    AmplifyAuthenticator.prototype.checkUser = function () {
        return __awaiter(this, void 0, void 0, function () {
            var user, error_1, cachedAuthState, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!Auth || typeof Auth.currentAuthenticatedUser !== 'function') {
                            throw new Error(NO_AUTH_MODULE_FOUND);
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 9]);
                        return [4 /*yield*/, Auth.currentAuthenticatedUser()];
                    case 2:
                        user = _a.sent();
                        dispatchAuthStateChangeEvent(AuthState.SignedIn, user);
                        return [3 /*break*/, 9];
                    case 3:
                        error_1 = _a.sent();
                        cachedAuthState = null;
                        try {
                            cachedAuthState = localStorage.getItem(AUTHENTICATOR_AUTHSTATE);
                        }
                        catch (error) {
                            logger.debug('Failed to get the auth state from local storage', error);
                        }
                        _a.label = 4;
                    case 4:
                        _a.trys.push([4, 7, , 8]);
                        if (!(cachedAuthState === AuthState.SignedIn)) return [3 /*break*/, 6];
                        return [4 /*yield*/, Auth.signOut()];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        dispatchAuthStateChangeEvent(this.initialAuthState);
                        return [3 /*break*/, 8];
                    case 7:
                        error_2 = _a.sent();
                        logger.debug('Failed to sign out', error_2);
                        return [3 /*break*/, 8];
                    case 8: return [3 /*break*/, 9];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    AmplifyAuthenticator.prototype.onAuthStateChange = function (nextAuthState, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (nextAuthState === undefined)
                    return [2 /*return*/, logger.error('nextAuthState cannot be undefined')];
                logger.info('Inside onAuthStateChange Method current authState:', this.authState);
                if (nextAuthState === AuthState.SignedOut) {
                    this.authState = this.initialAuthState;
                }
                else {
                    this.authState = nextAuthState;
                }
                this.authData = data;
                if (this.authData)
                    logger.log('Auth Data was set:', this.authData);
                if (this.authState === nextAuthState) {
                    this.handleAuthStateChange(this.authState, this.authData);
                    logger.info("authState has been updated to " + this.authState);
                }
                return [2 /*return*/];
            });
        });
    };
    AmplifyAuthenticator.prototype.renderAuthComponent = function (authState) {
        switch (authState) {
            case AuthState.SignIn:
                return (h("slot", { name: "sign-in" }, h("amplify-sign-in", { federated: this.federated, usernameAlias: this.usernameAlias })));
            case AuthState.ConfirmSignIn:
                return (h("slot", { name: "confirm-sign-in" }, h("amplify-confirm-sign-in", { user: this.authData })));
            case AuthState.SignUp:
                return (h("slot", { name: "sign-up" }, h("amplify-sign-up", { usernameAlias: this.usernameAlias })));
            case AuthState.ConfirmSignUp:
                return (h("slot", { name: "confirm-sign-up" }, h("amplify-confirm-sign-up", { user: this.authData, usernameAlias: this.usernameAlias })));
            case AuthState.ForgotPassword:
                return (h("slot", { name: "forgot-password" }, h("amplify-forgot-password", { usernameAlias: this.usernameAlias })));
            case AuthState.ResetPassword:
                return (h("slot", { name: "require-new-password" }, h("amplify-require-new-password", { user: this.authData })));
            case AuthState.VerifyContact:
                return (h("slot", { name: "verify-contact" }, h("amplify-verify-contact", { user: this.authData })));
            case AuthState.TOTPSetup:
                return (h("slot", { name: "totp-setup" }, h("amplify-totp-setup", { user: this.authData })));
            case AuthState.Loading:
                return (h("slot", { name: "loading" }, h("div", null, "Loading...")));
            case AuthState.SignedIn:
                return [h("slot", { name: "greetings" }), h("slot", null)];
            default:
                throw new Error("Unhandled auth state: " + authState);
        }
    };
    AmplifyAuthenticator.prototype.componentWillUnload = function () {
        Hub.remove(AUTH_CHANNEL, this.handleExternalAuthEvent);
        Hub.remove(UI_AUTH_CHANNEL, this.handleToastEvent);
        return onAuthUIStateChange;
    };
    AmplifyAuthenticator.prototype.render = function () {
        var _this = this;
        return (h(Host, null, this.toastMessage ? (h("amplify-toast", { message: this.toastMessage, handleClose: function () {
                _this.toastMessage = '';
            }, "data-test": "authenticator-error" })) : null, this.renderAuthComponent(this.authState)));
    };
    return AmplifyAuthenticator;
}());
AmplifyAuthenticator.style = amplifyAuthenticatorCss;
export { AmplifyAuthenticator as amplify_authenticator };
