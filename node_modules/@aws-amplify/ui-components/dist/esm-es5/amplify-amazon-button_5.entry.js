var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { r as registerInstance, h } from './index-82dae9d1.js';
import { ConsoleLogger, I18n } from '@aws-amplify/core';
import { A as AuthState } from './auth-types-78df304e.js';
import { T as Translations } from './Translations-baba3f2c.js';
import { N as NO_AUTH_MODULE_FOUND, h as AUTH_SOURCE_KEY } from './constants-3e1b5fcc.js';
import { Auth } from '@aws-amplify/auth';
import { d as dispatchAuthStateChangeEvent } from './helpers-9dae6f2a.js';
var logger = new ConsoleLogger('amplify-amazon-button');
var AmplifyAmazonButton = /** @class */ (function () {
    function AmplifyAmazonButton(hostRef) {
        var _this = this;
        registerInstance(this, hostRef);
        /** Auth state change handler for this component
         * e.g. SignIn -> 'Create Account' link -> SignUp
         */
        this.handleAuthStateChange = dispatchAuthStateChangeEvent;
        this.federatedSignIn = function (response) {
            var access_token = response.access_token, expires_in = response.expires_in;
            if (!access_token) {
                return;
            }
            if (!Auth || typeof Auth.federatedSignIn !== 'function' || typeof Auth.currentAuthenticatedUser !== 'function') {
                throw new Error(NO_AUTH_MODULE_FOUND);
            }
            var date = new Date();
            var expires_at = expires_in * 1000 + date.getTime();
            window['amazon'].Login.retrieveProfile(function (userInfo) { return __awaiter(_this, void 0, void 0, function () {
                var user, authenticatedUser;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!userInfo.success) {
                                return [2 /*return*/, logger.debug('Get user Info failed')];
                            }
                            user = {
                                name: userInfo.profile.Name,
                                email: userInfo.profile.PrimaryEmail,
                            };
                            return [4 /*yield*/, Auth.federatedSignIn('amazon', { token: access_token, expires_at: expires_at }, user)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, Auth.currentAuthenticatedUser()];
                        case 2:
                            authenticatedUser = _a.sent();
                            this.handleAuthStateChange(AuthState.SignedIn, authenticatedUser);
                            return [2 /*return*/];
                    }
                });
            }); });
        };
    }
    /**
     * @see https://developer.amazon.com/docs/login-with-amazon/install-sdk-javascript.html
     */
    AmplifyAmazonButton.prototype.signInWithAmazon = function (event) {
        var _this = this;
        event.preventDefault();
        window['amazon'].Login.setClientId(this.clientId);
        window['amazon'].Login.authorize({ scope: 'profile' }, function (response) {
            if (response.error) {
                return logger.debug('Failed to login with amazon: ' + response.error);
            }
            try {
                window.localStorage.setItem(AUTH_SOURCE_KEY, JSON.stringify({ provider: 'amazon' }));
            }
            catch (e) {
                logger.debug('Failed to cache auth source into localStorage', e);
            }
            _this.federatedSignIn(response);
        });
    };
    AmplifyAmazonButton.prototype.render = function () {
        var _this = this;
        return (h("amplify-sign-in-button", { onClick: function (event) { return _this.signInWithAmazon(event); }, provider: "amazon" }, h("script", { src: "https://assets.loginwithamazon.com/sdk/na/login1.js" }), I18n.get(Translations.SIGN_IN_WITH_AMAZON)));
    };
    return AmplifyAmazonButton;
}());
var logger$1 = new ConsoleLogger('amplify-auth0-button');
var AmplifyAuth0Button = /** @class */ (function () {
    function AmplifyAuth0Button(hostRef) {
        var _this = this;
        registerInstance(this, hostRef);
        /** Auth state change handler for this component */
        this.handleAuthStateChange = dispatchAuthStateChangeEvent;
        this.handleLoad = function () {
            // @ts-ignore Property 'auth0' does not exist on type '{}'.
            var _a = Auth.configure({}).oauth, oauth = _a === void 0 ? {} : _a;
            // @ts-ignore Property 'auth0' does not exist on type '{}'.
            var _b = _this.config, config = _b === void 0 ? oauth.auth0 : _b;
            if (!config) {
                logger$1.debug('Auth0 is not configured');
                return;
            }
            logger$1.debug('auth0 configuration', config);
            if (!_this._auth0) {
                _this._auth0 = new window['auth0'].WebAuth(config);
            }
            _this._auth0.parseHash(function (err, authResult) {
                if (err) {
                    logger$1.debug('Failed to parse the url for Auth0', err);
                    return;
                }
                if (!authResult) {
                    logger$1.debug('Auth0 found no authResult in hash');
                    return;
                }
                var payload = {
                    provider: 'auth0',
                    opts: {
                        returnTo: config.returnTo,
                        clientID: config.clientID,
                        federated: config.federated,
                    },
                };
                try {
                    localStorage.setItem(AUTH_SOURCE_KEY, JSON.stringify(payload));
                }
                catch (e) {
                    logger$1.debug('Failed to cache auth source into localStorage', e);
                }
                _this._auth0.client.userInfo(authResult.accessToken, function (err, user) { return __awaiter(_this, void 0, void 0, function () {
                    var username, email, authenticatedUser;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                username = undefined;
                                email = undefined;
                                if (err) {
                                    logger$1.debug('Failed to get the user info', err);
                                }
                                else {
                                    username = user.name;
                                    email = user.email;
                                }
                                return [4 /*yield*/, Auth.federatedSignIn(config.domain, {
                                        token: authResult.idToken,
                                        expires_at: authResult.expiresIn * 1000 + new Date().getTime(),
                                    }, { name: username, email: email })];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, Auth.currentAuthenticatedUser()];
                            case 2:
                                authenticatedUser = _a.sent();
                                this.handleAuthStateChange(AuthState.SignedIn, authenticatedUser);
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        };
    }
    AmplifyAuth0Button.prototype.signInWithAuth0 = function (event) {
        event.preventDefault();
        if (!this._auth0) {
            throw new Error('the auth0 client is not configured');
        }
        this._auth0.authorize();
    };
    AmplifyAuth0Button.prototype.render = function () {
        var _this = this;
        return (h("amplify-sign-in-button", { onClick: function (event) { return _this.signInWithAuth0(event); }, provider: "auth0" }, h("script", { onLoad: this.handleLoad, src: "https://cdn.auth0.com/js/auth0/9.11/auth0.min.js" }), I18n.get(Translations.SIGN_IN_WITH_AUTH0)));
    };
    return AmplifyAuth0Button;
}());
var logger$2 = new ConsoleLogger('amplify-facebook-button');
var AmplifyFacebookButton = /** @class */ (function () {
    function AmplifyFacebookButton(hostRef) {
        var _this = this;
        registerInstance(this, hostRef);
        /** Auth state change handler for this component
         * e.g. SignIn -> 'Create Account' link -> SignUp
         */
        this.handleAuthStateChange = dispatchAuthStateChangeEvent;
        this.federatedSignIn = function (authResponse) {
            var accessToken = authResponse.accessToken, expiresIn = authResponse.expiresIn;
            if (!accessToken) {
                return;
            }
            if (!Auth || typeof Auth.federatedSignIn !== 'function' || typeof Auth.currentAuthenticatedUser !== 'function') {
                throw new Error(NO_AUTH_MODULE_FOUND);
            }
            var date = new Date();
            var expires_at = expiresIn * 1000 + date.getTime();
            var fields = 'name,email';
            window['FB'].api('/me', { fields: fields }, function (response) { return __awaiter(_this, void 0, void 0, function () {
                var user, authenticatedUser;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            user = {
                                name: response.name,
                                email: response.email,
                            };
                            return [4 /*yield*/, Auth.federatedSignIn('facebook', { token: accessToken, expires_at: expires_at }, user)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, Auth.currentAuthenticatedUser()];
                        case 2:
                            authenticatedUser = _a.sent();
                            this.handleAuthStateChange(AuthState.SignedIn, authenticatedUser);
                            return [2 /*return*/];
                    }
                });
            }); });
        };
        this.getLoginStatus = function () {
            window['FB'].getLoginStatus(function (response) {
                try {
                    window.localStorage.setItem(AUTH_SOURCE_KEY, JSON.stringify({ provider: 'facebook' }));
                }
                catch (e) {
                    logger$2.debug('Failed to cache auth source into localStorage', e);
                }
                if (response.status === 'connected') {
                    return _this.federatedSignIn(response.authResponse);
                }
                _this.login();
            });
        };
        this.login = function () {
            var scope = 'public_profile,email';
            window['FB'].login(function (response) {
                if (response && response.authResponse) {
                    _this.federatedSignIn(response.authResponse);
                }
            }, { scope: scope });
        };
    }
    /**
     * @see https://developers.facebook.com/docs/javascript/reference/FB.init/v5.0
     */
    AmplifyFacebookButton.prototype.signInWithFacebook = function (event) {
        event.preventDefault();
        window['FB'].init({
            appId: this.appId,
            cookie: true,
            xfbml: false,
            version: 'v5.0',
        });
        this.getLoginStatus();
    };
    AmplifyFacebookButton.prototype.render = function () {
        var _this = this;
        return (h("amplify-sign-in-button", { onClick: function (event) { return _this.signInWithFacebook(event); }, provider: "facebook" }, h("script", { async: true, defer: true, src: "https://connect.facebook.net/en_US/sdk.js" }), I18n.get(Translations.SIGN_IN_WITH_FACEBOOK)));
    };
    return AmplifyFacebookButton;
}());
var logger$3 = new ConsoleLogger('amplify-google-button');
var AmplifyGoogleButton = /** @class */ (function () {
    function AmplifyGoogleButton(hostRef) {
        var _this = this;
        registerInstance(this, hostRef);
        /** Auth state change handler for this component
         * e.g. SignIn -> 'Create Account' link -> SignUp
         */
        this.handleAuthStateChange = dispatchAuthStateChangeEvent;
        this.handleError = function (error) {
            console.error(error);
        };
        /**
         * @see https://developers.google.com/identity/sign-in/web/build-button#building_a_button_with_a_custom_graphic
         */
        this.handleLoad = function () {
            window['gapi'].load('auth2');
        };
        this.handleUser = function (user) { return __awaiter(_this, void 0, void 0, function () {
            var _a, id_token, expires_at, profile, authenticatedUser;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!Auth || typeof Auth.federatedSignIn !== 'function' || typeof Auth.currentAuthenticatedUser !== 'function') {
                            throw new Error(NO_AUTH_MODULE_FOUND);
                        }
                        try {
                            window.localStorage.setItem(AUTH_SOURCE_KEY, JSON.stringify({ provider: 'google' }));
                        }
                        catch (e) {
                            logger$3.debug('Failed to cache auth source into localStorage', e);
                        }
                        _a = user.getAuthResponse(), id_token = _a.id_token, expires_at = _a.expires_at;
                        profile = user.getBasicProfile();
                        return [4 /*yield*/, Auth.federatedSignIn('google', { token: id_token, expires_at: expires_at }, {
                                email: profile.getEmail(),
                                name: profile.getName(),
                                picture: profile.getImageUrl(),
                            })];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, Auth.currentAuthenticatedUser()];
                    case 2:
                        authenticatedUser = _b.sent();
                        try {
                            this.handleAuthStateChange(AuthState.SignedIn, authenticatedUser);
                        }
                        catch (error) {
                            this.handleError(error);
                        }
                        return [2 /*return*/];
                }
            });
        }); };
    }
    AmplifyGoogleButton.prototype.getAuthInstance = function () {
        if (window['gapi'] && window['gapi'].auth2) {
            return (window['gapi'].auth2.getAuthInstance() ||
                window['gapi'].auth2.init({
                    client_id: this.clientId,
                    cookiepolicy: 'single_host_origin',
                    scope: 'profile email openid',
                }));
        }
        return null;
    };
    AmplifyGoogleButton.prototype.signInWithGoogle = function (event) {
        event.preventDefault();
        this.getAuthInstance()
            .signIn()
            .then(this.handleUser)
            .catch(this.handleError);
    };
    AmplifyGoogleButton.prototype.render = function () {
        var _this = this;
        return (h("amplify-sign-in-button", { onClick: function (event) { return _this.signInWithGoogle(event); }, provider: "google" }, h("script", { onLoad: this.handleLoad, src: "https://apis.google.com/js/api:client.js" }), I18n.get(Translations.SIGN_IN_WITH_GOOGLE)));
    };
    return AmplifyGoogleButton;
}());
var AmplifyOAuthButton = /** @class */ (function () {
    function AmplifyOAuthButton(hostRef) {
        registerInstance(this, hostRef);
        /** Federated credentials & configuration. */
        this.config = {};
    }
    AmplifyOAuthButton.prototype.signInWithOAuth = function (event) {
        event.preventDefault();
        Auth.federatedSignIn();
    };
    AmplifyOAuthButton.prototype.render = function () {
        var _this = this;
        return (h("amplify-sign-in-button", { onClick: function (event) { return _this.signInWithOAuth(event); }, provider: "oauth" }, this.config.label || I18n.get(Translations.SIGN_IN_WITH_AWS)));
    };
    return AmplifyOAuthButton;
}());
export { AmplifyAmazonButton as amplify_amazon_button, AmplifyAuth0Button as amplify_auth0_button, AmplifyFacebookButton as amplify_facebook_button, AmplifyGoogleButton as amplify_google_button, AmplifyOAuthButton as amplify_oauth_button };
