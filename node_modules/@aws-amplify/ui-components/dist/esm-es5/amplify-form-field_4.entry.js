import { r as registerInstance, h, c as createEvent, H as Host } from './index-82dae9d1.js';
var amplifyFormFieldCss = ":host{--label-font-size:var(--amplify-text-md);--description-font-size:var(--amplify-text-sm)}.form-field{margin-bottom:15px}.form-field-label{display:block;font-size:var(--label-font-size);padding-bottom:0.5em}.form-field-description{font-size:var(--description-font-size);padding-top:0.5em}";
var AmplifyFormField = /** @class */ (function () {
    function AmplifyFormField(hostRef) {
        registerInstance(this, hostRef);
        /** The input type.  Can be any HTML input type. */
        this.type = 'text';
        /** The required flag in order to make an input required prior to submitting a form */
        this.required = false;
        /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */
        this.placeholder = '';
    }
    AmplifyFormField.prototype.render = function () {
        return (h("div", { class: "form-field" }, this.label && (h("div", { class: "form-field-label" }, h("amplify-label", { htmlFor: this.fieldId }, this.label))), this.description && (h("div", { id: this.fieldId + "-description", class: "form-field-description", "data-test": "form-field-description" }, this.description)), h("div", null, h("slot", { name: "input" }, h("amplify-input", { fieldId: this.fieldId, description: this.description, type: this.type, handleInputChange: this.handleInputChange, placeholder: this.placeholder, name: this.name, value: this.value, inputProps: this.inputProps, disabled: this.disabled }))), this.hint && h("amplify-hint", { id: this.fieldId + "-hint" }, this.hint)));
    };
    return AmplifyFormField;
}());
AmplifyFormField.style = amplifyFormFieldCss;
var amplifyHintCss = ":host{--color:var(--amplify-grey);--font-family:var(--amplify-font-family);--font-size:var(--amplify-text-xs)}.hint{color:var(--color);font-family:var(--font-family);font-weight:300;font-size:var(--font-size);margin-bottom:2.625rem}";
var AmplifyHint = /** @class */ (function () {
    function AmplifyHint(hostRef) {
        registerInstance(this, hostRef);
    }
    AmplifyHint.prototype.render = function () {
        return (h("div", { class: "hint" }, h("slot", null)));
    };
    return AmplifyHint;
}());
AmplifyHint.style = amplifyHintCss;
var amplifyInputCss = ":host{--color:var(--amplify-secondary-color);--background-color:var(--amplify-secondary-contrast);--border-color:var(--amplify-light-grey);--border-color-focus:var(--amplify-primary-color)}.input-host{width:100%}.input{display:block;width:100%;padding:16px;font-size:var(--amplify-text-sm);color:var(--color);background-color:var(--background-color);background-image:none;border:1px solid var(--border-color);border-radius:3px;-webkit-box-sizing:border-box;box-sizing:border-box;margin:0 0 0.625rem 0}.input:focus{outline:none;border-color:var(--border-color-focus)}.input:disabled{opacity:0.5}";
var AmplifyInput = /** @class */ (function () {
    function AmplifyInput(hostRef) {
        registerInstance(this, hostRef);
        /** The input type.  Can be any HTML input type. */
        this.type = 'text';
        /** The callback, called when the input is modified by the user. */
        this.handleInputChange = function () { return void 0; };
        /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */
        this.placeholder = '';
        this.formSubmit = createEvent(this, "formSubmit", 7);
    }
    // eslint-disable-next-line
    AmplifyInput.prototype.handleKeyDown = function (ev) {
        if (ev.key === 'Enter') {
            this.formSubmit.emit(ev);
        }
    };
    AmplifyInput.prototype.render = function () {
        var _this = this;
        return (h(Host, { class: "input-host" }, h("input", Object.assign({ id: this.fieldId, "aria-describedby": this.fieldId && this.description ? this.fieldId + "-description" : null, type: this.type, onInput: function (event) { return _this.handleInputChange(event); }, placeholder: this.placeholder, name: this.name, class: "input", value: this.value, disabled: this.disabled }, this.inputProps))));
    };
    return AmplifyInput;
}());
AmplifyInput.style = amplifyInputCss;
var amplifyLabelCss = ":host{--label-color:var(--amplify-secondary-color)}.label{color:var(--label-color);font-size:var(--amplify-text-sm);margin-bottom:16px}";
var AmplifyLabel = /** @class */ (function () {
    function AmplifyLabel(hostRef) {
        registerInstance(this, hostRef);
    }
    AmplifyLabel.prototype.render = function () {
        return (h("label", { class: "label", htmlFor: this.htmlFor }, h("slot", null)));
    };
    return AmplifyLabel;
}());
AmplifyLabel.style = amplifyLabelCss;
export { AmplifyFormField as amplify_form_field, AmplifyHint as amplify_hint, AmplifyInput as amplify_input, AmplifyLabel as amplify_label };
