"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var subtleCryptoMethods = [
    "decrypt",
    "digest",
    "encrypt",
    "exportKey",
    "generateKey",
    "importKey",
    "sign",
    "verify"
];
function supportsWebCrypto(window) {
    if (supportsSecureRandom(window) &&
        typeof window.crypto.subtle === "object") {
        var subtle = window.crypto.subtle;
        return supportsSubtleCrypto(subtle);
    }
    return false;
}
exports.supportsWebCrypto = supportsWebCrypto;
function supportsSecureRandom(window) {
    if (typeof window === "object" && typeof window.crypto === "object") {
        var getRandomValues = window.crypto.getRandomValues;
        return typeof getRandomValues === "function";
    }
    return false;
}
exports.supportsSecureRandom = supportsSecureRandom;
function supportsSubtleCrypto(subtle) {
    return (subtle &&
        subtleCryptoMethods.every(function (methodName) { return typeof subtle[methodName] === "function"; }));
}
exports.supportsSubtleCrypto = supportsSubtleCrypto;
function supportsZeroByteGCM(subtle) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var key, zeroByteAuthTag, _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!supportsSubtleCrypto(subtle))
                        return [2 /*return*/, false];
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 4, , 5]);
                    return [4 /*yield*/, subtle.generateKey({ name: "AES-GCM", length: 128 }, false, ["encrypt"])];
                case 2:
                    key = _b.sent();
                    return [4 /*yield*/, subtle.encrypt({
                            name: "AES-GCM",
                            iv: new Uint8Array(Array(12)),
                            additionalData: new Uint8Array(Array(16)),
                            tagLength: 128
                        }, key, new Uint8Array(0))];
                case 3:
                    zeroByteAuthTag = _b.sent();
                    return [2 /*return*/, zeroByteAuthTag.byteLength === 16];
                case 4:
                    _a = _b.sent();
                    return [2 /*return*/, false];
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.supportsZeroByteGCM = supportsZeroByteGCM;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcG9ydHNXZWJDcnlwdG8uanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJzdXBwb3J0c1dlYkNyeXB0by50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFVQSxJQUFNLG1CQUFtQixHQUE4QjtJQUNyRCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsYUFBYTtJQUNiLFdBQVc7SUFDWCxNQUFNO0lBQ04sUUFBUTtDQUNULENBQUM7QUFFRixTQUFnQixpQkFBaUIsQ0FBQyxNQUFjO0lBQzlDLElBQ0Usb0JBQW9CLENBQUMsTUFBTSxDQUFDO1FBQzVCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssUUFBUSxFQUN4QztRQUNRLElBQUEsNkJBQU0sQ0FBbUI7UUFFakMsT0FBTyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNyQztJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQVhELDhDQVdDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQUMsTUFBYztJQUNqRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxPQUFPLE1BQU0sQ0FBQyxNQUFNLEtBQUssUUFBUSxFQUFFO1FBQzNELElBQUEsK0NBQWUsQ0FBbUI7UUFFMUMsT0FBTyxPQUFPLGVBQWUsS0FBSyxVQUFVLENBQUM7S0FDOUM7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFSRCxvREFRQztBQUVELFNBQWdCLG9CQUFvQixDQUFDLE1BQW9CO0lBQ3ZELE9BQU8sQ0FDTCxNQUFNO1FBQ04sbUJBQW1CLENBQUMsS0FBSyxDQUN2QixVQUFBLFVBQVUsSUFBSSxPQUFBLE9BQU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLFVBQVUsRUFBeEMsQ0FBd0MsQ0FDdkQsQ0FDRixDQUFDO0FBQ0osQ0FBQztBQVBELG9EQU9DO0FBRUQsU0FBc0IsbUJBQW1CLENBQUMsTUFBb0I7Ozs7OztvQkFDNUQsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQzt3QkFBRSxzQkFBTyxLQUFLLEVBQUM7Ozs7b0JBRWxDLHFCQUFNLE1BQU0sQ0FBQyxXQUFXLENBQ2xDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQ2hDLEtBQUssRUFDTCxDQUFDLFNBQVMsQ0FBQyxDQUNaLEVBQUE7O29CQUpLLEdBQUcsR0FBRyxTQUlYO29CQUN1QixxQkFBTSxNQUFNLENBQUMsT0FBTyxDQUMxQzs0QkFDRSxJQUFJLEVBQUUsU0FBUzs0QkFDZixFQUFFLEVBQUUsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUM3QixjQUFjLEVBQUUsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUN6QyxTQUFTLEVBQUUsR0FBRzt5QkFDZixFQUNELEdBQUcsRUFDSCxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FDbEIsRUFBQTs7b0JBVEssZUFBZSxHQUFHLFNBU3ZCO29CQUNELHNCQUFPLGVBQWUsQ0FBQyxVQUFVLEtBQUssRUFBRSxFQUFDOzs7b0JBRXpDLHNCQUFPLEtBQUssRUFBQzs7Ozs7Q0FFaEI7QUF0QkQsa0RBc0JDIiwic291cmNlc0NvbnRlbnQiOlsidHlwZSBTdWJ0bGVDcnlwdG9NZXRob2QgPVxuICB8IFwiZGVjcnlwdFwiXG4gIHwgXCJkaWdlc3RcIlxuICB8IFwiZW5jcnlwdFwiXG4gIHwgXCJleHBvcnRLZXlcIlxuICB8IFwiZ2VuZXJhdGVLZXlcIlxuICB8IFwiaW1wb3J0S2V5XCJcbiAgfCBcInNpZ25cIlxuICB8IFwidmVyaWZ5XCI7XG5cbmNvbnN0IHN1YnRsZUNyeXB0b01ldGhvZHM6IEFycmF5PFN1YnRsZUNyeXB0b01ldGhvZD4gPSBbXG4gIFwiZGVjcnlwdFwiLFxuICBcImRpZ2VzdFwiLFxuICBcImVuY3J5cHRcIixcbiAgXCJleHBvcnRLZXlcIixcbiAgXCJnZW5lcmF0ZUtleVwiLFxuICBcImltcG9ydEtleVwiLFxuICBcInNpZ25cIixcbiAgXCJ2ZXJpZnlcIlxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzV2ViQ3J5cHRvKHdpbmRvdzogV2luZG93KTogYm9vbGVhbiB7XG4gIGlmIChcbiAgICBzdXBwb3J0c1NlY3VyZVJhbmRvbSh3aW5kb3cpICYmXG4gICAgdHlwZW9mIHdpbmRvdy5jcnlwdG8uc3VidGxlID09PSBcIm9iamVjdFwiXG4gICkge1xuICAgIGNvbnN0IHsgc3VidGxlIH0gPSB3aW5kb3cuY3J5cHRvO1xuXG4gICAgcmV0dXJuIHN1cHBvcnRzU3VidGxlQ3J5cHRvKHN1YnRsZSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0c1NlY3VyZVJhbmRvbSh3aW5kb3c6IFdpbmRvdyk6IGJvb2xlYW4ge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygd2luZG93LmNyeXB0byA9PT0gXCJvYmplY3RcIikge1xuICAgIGNvbnN0IHsgZ2V0UmFuZG9tVmFsdWVzIH0gPSB3aW5kb3cuY3J5cHRvO1xuXG4gICAgcmV0dXJuIHR5cGVvZiBnZXRSYW5kb21WYWx1ZXMgPT09IFwiZnVuY3Rpb25cIjtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzU3VidGxlQ3J5cHRvKHN1YnRsZTogU3VidGxlQ3J5cHRvKSB7XG4gIHJldHVybiAoXG4gICAgc3VidGxlICYmXG4gICAgc3VidGxlQ3J5cHRvTWV0aG9kcy5ldmVyeShcbiAgICAgIG1ldGhvZE5hbWUgPT4gdHlwZW9mIHN1YnRsZVttZXRob2ROYW1lXSA9PT0gXCJmdW5jdGlvblwiXG4gICAgKVxuICApO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3VwcG9ydHNaZXJvQnl0ZUdDTShzdWJ0bGU6IFN1YnRsZUNyeXB0bykge1xuICBpZiAoIXN1cHBvcnRzU3VidGxlQ3J5cHRvKHN1YnRsZSkpIHJldHVybiBmYWxzZTtcbiAgdHJ5IHtcbiAgICBjb25zdCBrZXkgPSBhd2FpdCBzdWJ0bGUuZ2VuZXJhdGVLZXkoXG4gICAgICB7IG5hbWU6IFwiQUVTLUdDTVwiLCBsZW5ndGg6IDEyOCB9LFxuICAgICAgZmFsc2UsXG4gICAgICBbXCJlbmNyeXB0XCJdXG4gICAgKTtcbiAgICBjb25zdCB6ZXJvQnl0ZUF1dGhUYWcgPSBhd2FpdCBzdWJ0bGUuZW5jcnlwdChcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJBRVMtR0NNXCIsXG4gICAgICAgIGl2OiBuZXcgVWludDhBcnJheShBcnJheSgxMikpLFxuICAgICAgICBhZGRpdGlvbmFsRGF0YTogbmV3IFVpbnQ4QXJyYXkoQXJyYXkoMTYpKSxcbiAgICAgICAgdGFnTGVuZ3RoOiAxMjhcbiAgICAgIH0sXG4gICAgICBrZXksXG4gICAgICBuZXcgVWludDhBcnJheSgwKVxuICAgICk7XG4gICAgcmV0dXJuIHplcm9CeXRlQXV0aFRhZy5ieXRlTGVuZ3RoID09PSAxNjtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iXX0=