import { __awaiter, __generator } from "tslib";
import { SHA256_HEADER, UNSIGNED_PAYLOAD } from "./constants";
import { isArrayBuffer } from "@aws-sdk/is-array-buffer";
import { toHex } from "@aws-sdk/util-hex-encoding";
/**
 * @internal
 */
export function getPayloadHash(_a, hashConstructor) {
    var headers = _a.headers, body = _a.body;
    return __awaiter(this, void 0, void 0, function () {
        var _i, _b, headerName, hashCtor, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    for (_i = 0, _b = Object.keys(headers); _i < _b.length; _i++) {
                        headerName = _b[_i];
                        if (headerName.toLowerCase() === SHA256_HEADER) {
                            return [2 /*return*/, headers[headerName]];
                        }
                    }
                    if (!(body == undefined)) return [3 /*break*/, 1];
                    return [2 /*return*/, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"];
                case 1:
                    if (!(typeof body === "string" ||
                        ArrayBuffer.isView(body) ||
                        isArrayBuffer(body))) return [3 /*break*/, 3];
                    hashCtor = new hashConstructor();
                    hashCtor.update(body);
                    _c = toHex;
                    return [4 /*yield*/, hashCtor.digest()];
                case 2: return [2 /*return*/, _c.apply(void 0, [_d.sent()])];
                case 3: 
                // As any defined body that is not a string or binary data is a stream, this
                // body is unsignable. Attempt to send the request with an unsigned payload,
                // which may or may not be accepted by the service.
                return [2 /*return*/, UNSIGNED_PAYLOAD];
            }
        });
    });
}
//# sourceMappingURL=getPayloadHash.js.map