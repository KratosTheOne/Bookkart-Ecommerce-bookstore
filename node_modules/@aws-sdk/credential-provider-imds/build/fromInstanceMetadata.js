"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var RemoteProviderInit_1 = require("./remoteProvider/RemoteProviderInit");
var httpGet_1 = require("./remoteProvider/httpGet");
var ImdsCredentials_1 = require("./remoteProvider/ImdsCredentials");
var retry_1 = require("./remoteProvider/retry");
var property_provider_1 = require("@aws-sdk/property-provider");
/**
 * Creates a credential provider that will source credentials from the EC2
 * Instance Metadata Service
 */
function fromInstanceMetadata(init) {
    var _this = this;
    if (init === void 0) { init = {}; }
    var _a = RemoteProviderInit_1.providerConfigFromInit(init), timeout = _a.timeout, maxRetries = _a.maxRetries;
    return function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var profile;
        var _this = this;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, retry_1.retry(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, requestFromEc2Imds(timeout)];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    }); }); }, maxRetries)];
                case 1:
                    profile = (_a.sent()).trim();
                    return [2 /*return*/, retry_1.retry(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var credsResponse, _a, _b;
                            return tslib_1.__generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _b = (_a = JSON).parse;
                                        return [4 /*yield*/, requestFromEc2Imds(timeout, profile)];
                                    case 1:
                                        credsResponse = _b.apply(_a, [_c.sent()]);
                                        if (!ImdsCredentials_1.isImdsCredentials(credsResponse)) {
                                            throw new property_provider_1.ProviderError("Invalid response received from instance metadata service.");
                                        }
                                        return [2 /*return*/, ImdsCredentials_1.fromImdsCredentials(credsResponse)];
                                }
                            });
                        }); }, maxRetries)];
            }
        });
    }); };
}
exports.fromInstanceMetadata = fromInstanceMetadata;
var IMDS_IP = "169.254.169.254";
var IMDS_PATH = "latest/meta-data/iam/security-credentials";
function requestFromEc2Imds(timeout, path) {
    return httpGet_1.httpGet({
        host: IMDS_IP,
        path: "/" + IMDS_PATH + "/" + (path ? path : ""),
        timeout: timeout
    }).then(function (buffer) { return buffer.toString(); });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbUluc3RhbmNlTWV0YWRhdGEuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJmcm9tSW5zdGFuY2VNZXRhZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwwRUFHNkM7QUFDN0Msb0RBQW1EO0FBQ25ELG9FQUcwQztBQUMxQyxnREFBK0M7QUFDL0MsZ0VBQTJEO0FBRTNEOzs7R0FHRztBQUNILFNBQWdCLG9CQUFvQixDQUNsQyxJQUE2QjtJQUQvQixpQkF5QkM7SUF4QkMscUJBQUEsRUFBQSxTQUE2QjtJQUV2QixJQUFBLHNEQUFzRCxFQUFwRCxvQkFBTyxFQUFFLDBCQUEyQyxDQUFDO0lBQzdELE9BQU87Ozs7O3dCQUVILHFCQUFNLGFBQUssQ0FDVDs7b0NBQVkscUJBQU0sa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUE7b0NBQWpDLHNCQUFBLFNBQWlDLEVBQUE7OzZCQUFBLEVBQzdDLFVBQVUsQ0FDWCxFQUFBOztvQkFKRyxPQUFPLEdBQUcsQ0FDZCxTQUdDLENBQ0YsQ0FBQyxJQUFJLEVBQUU7b0JBRVIsc0JBQU8sYUFBSyxDQUFDOzs7Ozt3Q0FDVyxLQUFBLENBQUEsS0FBQSxJQUFJLENBQUEsQ0FBQyxLQUFLLENBQUE7d0NBQzlCLHFCQUFNLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBQTs7d0NBRHRDLGFBQWEsR0FBRyxjQUNwQixTQUEwQyxFQUMzQzt3Q0FDRCxJQUFJLENBQUMsbUNBQWlCLENBQUMsYUFBYSxDQUFDLEVBQUU7NENBQ3JDLE1BQU0sSUFBSSxpQ0FBYSxDQUNyQiwyREFBMkQsQ0FDNUQsQ0FBQzt5Q0FDSDt3Q0FFRCxzQkFBTyxxQ0FBbUIsQ0FBQyxhQUFhLENBQUMsRUFBQzs7OzZCQUMzQyxFQUFFLFVBQVUsQ0FBQyxFQUFDOzs7U0FDaEIsQ0FBQztBQUNKLENBQUM7QUF6QkQsb0RBeUJDO0FBRUQsSUFBTSxPQUFPLEdBQUcsaUJBQWlCLENBQUM7QUFDbEMsSUFBTSxTQUFTLEdBQUcsMkNBQTJDLENBQUM7QUFFOUQsU0FBUyxrQkFBa0IsQ0FBQyxPQUFlLEVBQUUsSUFBYTtJQUN4RCxPQUFPLGlCQUFPLENBQUM7UUFDYixJQUFJLEVBQUUsT0FBTztRQUNiLElBQUksRUFBRSxNQUFJLFNBQVMsVUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFFO1FBQ3pDLE9BQU8sU0FBQTtLQUNSLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQWpCLENBQWlCLENBQUMsQ0FBQztBQUN2QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3JlZGVudGlhbFByb3ZpZGVyIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQge1xuICBSZW1vdGVQcm92aWRlckluaXQsXG4gIHByb3ZpZGVyQ29uZmlnRnJvbUluaXRcbn0gZnJvbSBcIi4vcmVtb3RlUHJvdmlkZXIvUmVtb3RlUHJvdmlkZXJJbml0XCI7XG5pbXBvcnQgeyBodHRwR2V0IH0gZnJvbSBcIi4vcmVtb3RlUHJvdmlkZXIvaHR0cEdldFwiO1xuaW1wb3J0IHtcbiAgZnJvbUltZHNDcmVkZW50aWFscyxcbiAgaXNJbWRzQ3JlZGVudGlhbHNcbn0gZnJvbSBcIi4vcmVtb3RlUHJvdmlkZXIvSW1kc0NyZWRlbnRpYWxzXCI7XG5pbXBvcnQgeyByZXRyeSB9IGZyb20gXCIuL3JlbW90ZVByb3ZpZGVyL3JldHJ5XCI7XG5pbXBvcnQgeyBQcm92aWRlckVycm9yIH0gZnJvbSBcIkBhd3Mtc2RrL3Byb3BlcnR5LXByb3ZpZGVyXCI7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNyZWRlbnRpYWwgcHJvdmlkZXIgdGhhdCB3aWxsIHNvdXJjZSBjcmVkZW50aWFscyBmcm9tIHRoZSBFQzJcbiAqIEluc3RhbmNlIE1ldGFkYXRhIFNlcnZpY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21JbnN0YW5jZU1ldGFkYXRhKFxuICBpbml0OiBSZW1vdGVQcm92aWRlckluaXQgPSB7fVxuKTogQ3JlZGVudGlhbFByb3ZpZGVyIHtcbiAgY29uc3QgeyB0aW1lb3V0LCBtYXhSZXRyaWVzIH0gPSBwcm92aWRlckNvbmZpZ0Zyb21Jbml0KGluaXQpO1xuICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHByb2ZpbGUgPSAoXG4gICAgICBhd2FpdCByZXRyeTxzdHJpbmc+KFxuICAgICAgICBhc3luYyAoKSA9PiBhd2FpdCByZXF1ZXN0RnJvbUVjMkltZHModGltZW91dCksXG4gICAgICAgIG1heFJldHJpZXNcbiAgICAgIClcbiAgICApLnRyaW0oKTtcblxuICAgIHJldHVybiByZXRyeShhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjcmVkc1Jlc3BvbnNlID0gSlNPTi5wYXJzZShcbiAgICAgICAgYXdhaXQgcmVxdWVzdEZyb21FYzJJbWRzKHRpbWVvdXQsIHByb2ZpbGUpXG4gICAgICApO1xuICAgICAgaWYgKCFpc0ltZHNDcmVkZW50aWFscyhjcmVkc1Jlc3BvbnNlKSkge1xuICAgICAgICB0aHJvdyBuZXcgUHJvdmlkZXJFcnJvcihcbiAgICAgICAgICBcIkludmFsaWQgcmVzcG9uc2UgcmVjZWl2ZWQgZnJvbSBpbnN0YW5jZSBtZXRhZGF0YSBzZXJ2aWNlLlwiXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmcm9tSW1kc0NyZWRlbnRpYWxzKGNyZWRzUmVzcG9uc2UpO1xuICAgIH0sIG1heFJldHJpZXMpO1xuICB9O1xufVxuXG5jb25zdCBJTURTX0lQID0gXCIxNjkuMjU0LjE2OS4yNTRcIjtcbmNvbnN0IElNRFNfUEFUSCA9IFwibGF0ZXN0L21ldGEtZGF0YS9pYW0vc2VjdXJpdHktY3JlZGVudGlhbHNcIjtcblxuZnVuY3Rpb24gcmVxdWVzdEZyb21FYzJJbWRzKHRpbWVvdXQ6IG51bWJlciwgcGF0aD86IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHJldHVybiBodHRwR2V0KHtcbiAgICBob3N0OiBJTURTX0lQLFxuICAgIHBhdGg6IGAvJHtJTURTX1BBVEh9LyR7cGF0aCA/IHBhdGggOiBcIlwifWAsXG4gICAgdGltZW91dFxuICB9KS50aGVuKGJ1ZmZlciA9PiBidWZmZXIudG9TdHJpbmcoKSk7XG59XG4iXX0=