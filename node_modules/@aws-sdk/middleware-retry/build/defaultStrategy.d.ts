import { SdkError, FinalizeHandler, MetadataBearer, FinalizeHandlerArguments, RetryStrategy } from "@aws-sdk/types";
/**
 * Determines whether an error is retryable based on the number of retries
 * already attempted, the HTTP status code, and the error received (if any).
 *
 * @param error         The error encountered.
 */
export interface RetryDecider {
    (error: SdkError): boolean;
}
/**
 * Determines the number of milliseconds to wait before retrying an action.
 *
 * @param delayBase The base delay (in milliseconds).
 * @param attempts  The number of times the action has already been tried.
 */
export interface DelayDecider {
    (delayBase: number, attempts: number): number;
}
export declare class ExponentialBackOffStrategy implements RetryStrategy {
    readonly maxRetries: number;
    private retryDecider;
    private delayDecider;
    constructor(maxRetries: number, retryDecider?: RetryDecider, delayDecider?: DelayDecider);
    private shouldRetry;
    retry<Input extends object, Ouput extends MetadataBearer>(next: FinalizeHandler<Input, Ouput>, args: FinalizeHandlerArguments<Input>): Promise<{
        response: unknown;
        output: Ouput;
    }>;
}
