"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var buffer_1 = require("buffer");
var is_array_buffer_1 = require("@aws-sdk/is-array-buffer");
function fromArrayBuffer(input, offset, length) {
    if (offset === void 0) { offset = 0; }
    if (length === void 0) { length = input.byteLength - offset; }
    if (!is_array_buffer_1.isArrayBuffer(input)) {
        throw new Error("argument passed to fromArrayBuffer was not an ArrayBuffer");
    }
    if (typeof buffer_1.Buffer.from === "function" && buffer_1.Buffer.from !== Uint8Array.from) {
        return buffer_1.Buffer.from(input, offset, length);
    }
    // Any version of node that supports the optional offset and length
    // parameters, which were added in Node 6.0.0, will support Buffer.from and
    // have already returned. Throw if offset is not 0 or if length differs from
    // the underlying buffer's length.
    if (offset !== 0 || length !== input.byteLength) {
        throw new Error("Unable to convert TypedArray to Buffer in Node " + process.version);
    }
    return new buffer_1.Buffer(input);
}
exports.fromArrayBuffer = fromArrayBuffer;
function fromString(input, encoding) {
    if (typeof input !== "string") {
        throw new Error("argument passed to fromString was not a string");
    }
    if (typeof buffer_1.Buffer.from === "function" && buffer_1.Buffer.from !== Uint8Array.from) {
        return buffer_1.Buffer.from(input, encoding);
    }
    return new buffer_1.Buffer(input, encoding);
}
exports.fromString = fromString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFnQztBQUNoQyw0REFBeUQ7QUFFekQsU0FBZ0IsZUFBZSxDQUM3QixLQUFrQixFQUNsQixNQUFrQixFQUNsQixNQUEwQztJQUQxQyx1QkFBQSxFQUFBLFVBQWtCO0lBQ2xCLHVCQUFBLEVBQUEsU0FBaUIsS0FBSyxDQUFDLFVBQVUsR0FBRyxNQUFNO0lBRTFDLElBQUksQ0FBQywrQkFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQ2IsMkRBQTJELENBQzVELENBQUM7S0FDSDtJQUVELElBQUksT0FBTyxlQUFNLENBQUMsSUFBSSxLQUFLLFVBQVUsSUFBSSxlQUFNLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxJQUFJLEVBQUU7UUFDeEUsT0FBTyxlQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDM0M7SUFFRCxtRUFBbUU7SUFDbkUsMkVBQTJFO0lBQzNFLDRFQUE0RTtJQUM1RSxrQ0FBa0M7SUFDbEMsSUFBSSxNQUFNLEtBQUssQ0FBQyxJQUFJLE1BQU0sS0FBSyxLQUFLLENBQUMsVUFBVSxFQUFFO1FBQy9DLE1BQU0sSUFBSSxLQUFLLENBQ2Isb0RBQWtELE9BQU8sQ0FBQyxPQUFTLENBQ3BFLENBQUM7S0FDSDtJQUNELE9BQU8sSUFBSSxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0IsQ0FBQztBQXpCRCwwQ0F5QkM7QUFFRCxTQUFnQixVQUFVLENBQ3hCLEtBQWEsRUFDYixRQVNVO0lBRVYsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0tBQ25FO0lBRUQsSUFBSSxPQUFPLGVBQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxJQUFJLGVBQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLElBQUksRUFBRTtRQUN4RSxPQUFPLGVBQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQ3JDO0lBRUQsT0FBTyxJQUFJLGVBQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDckMsQ0FBQztBQXRCRCxnQ0FzQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyXCI7XG5pbXBvcnQgeyBpc0FycmF5QnVmZmVyIH0gZnJvbSBcIkBhd3Mtc2RrL2lzLWFycmF5LWJ1ZmZlclwiO1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyKFxuICBpbnB1dDogQXJyYXlCdWZmZXIsXG4gIG9mZnNldDogbnVtYmVyID0gMCxcbiAgbGVuZ3RoOiBudW1iZXIgPSBpbnB1dC5ieXRlTGVuZ3RoIC0gb2Zmc2V0XG4pOiBCdWZmZXIge1xuICBpZiAoIWlzQXJyYXlCdWZmZXIoaW5wdXQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJhcmd1bWVudCBwYXNzZWQgdG8gZnJvbUFycmF5QnVmZmVyIHdhcyBub3QgYW4gQXJyYXlCdWZmZXJcIlxuICAgICk7XG4gIH1cblxuICBpZiAodHlwZW9mIEJ1ZmZlci5mcm9tID09PSBcImZ1bmN0aW9uXCIgJiYgQnVmZmVyLmZyb20gIT09IFVpbnQ4QXJyYXkuZnJvbSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShpbnB1dCwgb2Zmc2V0LCBsZW5ndGgpO1xuICB9XG5cbiAgLy8gQW55IHZlcnNpb24gb2Ygbm9kZSB0aGF0IHN1cHBvcnRzIHRoZSBvcHRpb25hbCBvZmZzZXQgYW5kIGxlbmd0aFxuICAvLyBwYXJhbWV0ZXJzLCB3aGljaCB3ZXJlIGFkZGVkIGluIE5vZGUgNi4wLjAsIHdpbGwgc3VwcG9ydCBCdWZmZXIuZnJvbSBhbmRcbiAgLy8gaGF2ZSBhbHJlYWR5IHJldHVybmVkLiBUaHJvdyBpZiBvZmZzZXQgaXMgbm90IDAgb3IgaWYgbGVuZ3RoIGRpZmZlcnMgZnJvbVxuICAvLyB0aGUgdW5kZXJseWluZyBidWZmZXIncyBsZW5ndGguXG4gIGlmIChvZmZzZXQgIT09IDAgfHwgbGVuZ3RoICE9PSBpbnB1dC5ieXRlTGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFVuYWJsZSB0byBjb252ZXJ0IFR5cGVkQXJyYXkgdG8gQnVmZmVyIGluIE5vZGUgJHtwcm9jZXNzLnZlcnNpb259YFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIG5ldyBCdWZmZXIoaW5wdXQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVN0cmluZyhcbiAgaW5wdXQ6IHN0cmluZyxcbiAgZW5jb2Rpbmc/OlxuICAgIHwgXCJhc2NpaVwiXG4gICAgfCBcInV0ZjhcIlxuICAgIHwgXCJ1dGYxNmxlXCJcbiAgICB8IFwidWNzMlwiXG4gICAgfCBcImJhc2U2NFwiXG4gICAgfCBcImxhdGluMVwiXG4gICAgfCBcImJpbmFyeVwiXG4gICAgfCBcImhleFwiXG4gICAgfCBzdHJpbmdcbik6IEJ1ZmZlciB7XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJhcmd1bWVudCBwYXNzZWQgdG8gZnJvbVN0cmluZyB3YXMgbm90IGEgc3RyaW5nXCIpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBCdWZmZXIuZnJvbSA9PT0gXCJmdW5jdGlvblwiICYmIEJ1ZmZlci5mcm9tICE9PSBVaW50OEFycmF5LmZyb20pIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oaW5wdXQsIGVuY29kaW5nKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgQnVmZmVyKGlucHV0LCBlbmNvZGluZyk7XG59XG4iXX0=