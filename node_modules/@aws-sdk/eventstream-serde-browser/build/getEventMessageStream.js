"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getEventMessageStream(chunkedStream, eventMarshaller) {
    var chunkReader = chunkedStream.getReader();
    var messageStream = new ReadableStream({
        start: function (controller) {
            function push() {
                chunkReader.read().then(function (_a) {
                    var _b, _c;
                    var done = _a.done, value = _a.value;
                    if (done) {
                        controller.close();
                        return;
                    }
                    // @ts-ignore: error TS2345: Argument of type 'Uint8Array | undefined'
                    // is not assignable to parameter of type 'ArrayBufferView'
                    var message = eventMarshaller.unmarshall(value);
                    var messageType = message.headers[":message-type"].value;
                    if (messageType === "error") {
                        // Unmodeled exception in event
                        var unmodeledError = new Error(message.headers[":error-message"].value ||
                            "UnknownError");
                        unmodeledError.name = message.headers[":error-code"]
                            .value;
                        controller.error(unmodeledError);
                    }
                    else if (messageType === "exception") {
                        // throw this.exceptionsDeserializer(message);
                        controller.enqueue((_b = {},
                            _b[message.headers[":exception-type"].value] = message,
                            _b));
                    }
                    else if (messageType === "event") {
                        controller.enqueue((_c = {},
                            _c[message.headers[":event-type"].value] = message,
                            _c));
                    }
                    else {
                        controller.error(new Error("Unrecognizable event type: " + message.headers[":event-type"].value));
                    }
                    push();
                });
            }
            push();
        }
    });
    return messageStream;
}
exports.getEventMessageStream = getEventMessageStream;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0RXZlbnRNZXNzYWdlU3RyZWFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2dldEV2ZW50TWVzc2FnZVN0cmVhbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLFNBQWdCLHFCQUFxQixDQUNuQyxhQUF5QyxFQUN6QyxlQUFnQztJQUVoQyxJQUFNLFdBQVcsR0FBRyxhQUFhLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDOUMsSUFBTSxhQUFhLEdBQUcsSUFBSSxjQUFjLENBQThCO1FBQ3BFLEtBQUssRUFBTCxVQUFNLFVBQVU7WUFDZCxTQUFTLElBQUk7Z0JBQ1gsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFDLEVBQWU7O3dCQUFiLGNBQUksRUFBRSxnQkFBSztvQkFDcEMsSUFBSSxJQUFJLEVBQUU7d0JBQ1IsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO3dCQUNuQixPQUFPO3FCQUNSO29CQUVELHNFQUFzRTtvQkFDdEUsMkRBQTJEO29CQUMzRCxJQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUMxQyxJQUFBLG9EQUFrQixDQUFzQztvQkFDaEUsSUFBSSxXQUFXLEtBQUssT0FBTyxFQUFFO3dCQUMzQiwrQkFBK0I7d0JBQy9CLElBQU0sY0FBYyxHQUFHLElBQUksS0FBSyxDQUM3QixPQUFPLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsS0FBZ0I7NEJBQ2pELGNBQWMsQ0FDakIsQ0FBQzt3QkFDRixjQUFjLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDOzZCQUNqRCxLQUFlLENBQUM7d0JBQ25CLFVBQVUsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7cUJBQ2xDO3lCQUFNLElBQUksV0FBVyxLQUFLLFdBQVcsRUFBRTt3QkFDdEMsOENBQThDO3dCQUM5QyxVQUFVLENBQUMsT0FBTzs0QkFDaEIsR0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsS0FBZSxJQUFHLE9BQU87Z0NBQzdELENBQUM7cUJBQ0o7eUJBQU0sSUFBSSxXQUFXLEtBQUssT0FBTyxFQUFFO3dCQUNsQyxVQUFVLENBQUMsT0FBTzs0QkFDaEIsR0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEtBQWUsSUFBRyxPQUFPO2dDQUN6RCxDQUFDO3FCQUNKO3lCQUFNO3dCQUNMLFVBQVUsQ0FBQyxLQUFLLENBQ2QsSUFBSSxLQUFLLENBQ1AsZ0NBQThCLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsS0FBTyxDQUNyRSxDQUNGLENBQUM7cUJBQ0g7b0JBQ0QsSUFBSSxFQUFFLENBQUM7Z0JBQ1QsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDO1lBRUQsSUFBSSxFQUFFLENBQUM7UUFDVCxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsT0FBTyxhQUFhLENBQUM7QUFDdkIsQ0FBQztBQXBERCxzREFvREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudFN0cmVhbU1hcnNoYWxsZXIgYXMgRXZlbnRNYXJzaGFsbGVyIH0gZnJvbSBcIkBhd3Mtc2RrL2V2ZW50c3RyZWFtLW1hcnNoYWxsZXJcIjtcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEV2ZW50TWVzc2FnZVN0cmVhbShcbiAgY2h1bmtlZFN0cmVhbTogUmVhZGFibGVTdHJlYW08VWludDhBcnJheT4sXG4gIGV2ZW50TWFyc2hhbGxlcjogRXZlbnRNYXJzaGFsbGVyXG4pOiBSZWFkYWJsZVN0cmVhbTx7IFtuYW1lOiBzdHJpbmddOiBNZXNzYWdlIH0+IHtcbiAgY29uc3QgY2h1bmtSZWFkZXIgPSBjaHVua2VkU3RyZWFtLmdldFJlYWRlcigpO1xuICBjb25zdCBtZXNzYWdlU3RyZWFtID0gbmV3IFJlYWRhYmxlU3RyZWFtPHsgW25hbWU6IHN0cmluZ106IE1lc3NhZ2UgfT4oe1xuICAgIHN0YXJ0KGNvbnRyb2xsZXIpIHtcbiAgICAgIGZ1bmN0aW9uIHB1c2goKSB7XG4gICAgICAgIGNodW5rUmVhZGVyLnJlYWQoKS50aGVuKCh7IGRvbmUsIHZhbHVlIH0pID0+IHtcbiAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEB0cy1pZ25vcmU6IGVycm9yIFRTMjM0NTogQXJndW1lbnQgb2YgdHlwZSAnVWludDhBcnJheSB8IHVuZGVmaW5lZCdcbiAgICAgICAgICAvLyBpcyBub3QgYXNzaWduYWJsZSB0byBwYXJhbWV0ZXIgb2YgdHlwZSAnQXJyYXlCdWZmZXJWaWV3J1xuICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBldmVudE1hcnNoYWxsZXIudW5tYXJzaGFsbCh2YWx1ZSk7XG4gICAgICAgICAgY29uc3QgeyB2YWx1ZTogbWVzc2FnZVR5cGUgfSA9IG1lc3NhZ2UuaGVhZGVyc1tcIjptZXNzYWdlLXR5cGVcIl07XG4gICAgICAgICAgaWYgKG1lc3NhZ2VUeXBlID09PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIC8vIFVubW9kZWxlZCBleGNlcHRpb24gaW4gZXZlbnRcbiAgICAgICAgICAgIGNvbnN0IHVubW9kZWxlZEVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAgICAgICAobWVzc2FnZS5oZWFkZXJzW1wiOmVycm9yLW1lc3NhZ2VcIl0udmFsdWUgYXMgc3RyaW5nKSB8fFxuICAgICAgICAgICAgICAgIFwiVW5rbm93bkVycm9yXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB1bm1vZGVsZWRFcnJvci5uYW1lID0gbWVzc2FnZS5oZWFkZXJzW1wiOmVycm9yLWNvZGVcIl1cbiAgICAgICAgICAgICAgLnZhbHVlIGFzIHN0cmluZztcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZXJyb3IodW5tb2RlbGVkRXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZVR5cGUgPT09IFwiZXhjZXB0aW9uXCIpIHtcbiAgICAgICAgICAgIC8vIHRocm93IHRoaXMuZXhjZXB0aW9uc0Rlc2VyaWFsaXplcihtZXNzYWdlKTtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgIFttZXNzYWdlLmhlYWRlcnNbXCI6ZXhjZXB0aW9uLXR5cGVcIl0udmFsdWUgYXMgc3RyaW5nXTogbWVzc2FnZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlVHlwZSA9PT0gXCJldmVudFwiKSB7XG4gICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICBbbWVzc2FnZS5oZWFkZXJzW1wiOmV2ZW50LXR5cGVcIl0udmFsdWUgYXMgc3RyaW5nXTogbWVzc2FnZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZXJyb3IoXG4gICAgICAgICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5yZWNvZ25pemFibGUgZXZlbnQgdHlwZTogJHttZXNzYWdlLmhlYWRlcnNbXCI6ZXZlbnQtdHlwZVwiXS52YWx1ZX1gXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHB1c2goKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHB1c2goKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBtZXNzYWdlU3RyZWFtO1xufVxuIl19