"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var eventstream_marshaller_1 = require("@aws-sdk/eventstream-marshaller");
var utils_1 = require("./utils");
var getChunkedStream_1 = require("./getChunkedStream");
var getEventMessageStream_1 = require("./getEventMessageStream");
var getDeserializingStream_1 = require("./getDeserializingStream");
var EventStreamMarshaller = /** @class */ (function () {
    function EventStreamMarshaller(_a) {
        var utf8Encoder = _a.utf8Encoder, utf8Decoder = _a.utf8Decoder;
        this.eventMarshaller = new eventstream_marshaller_1.EventStreamMarshaller(utf8Encoder, utf8Decoder);
    }
    EventStreamMarshaller.prototype.deserialize = function (body, deserializer) {
        var chunkedStream = getChunkedStream_1.getChunkedStream(body);
        var messageStream = getEventMessageStream_1.getEventMessageStream(chunkedStream, this.eventMarshaller);
        var deserialingStream = getDeserializingStream_1.getDeserializingStream(messageStream, deserializer);
        return utils_1.ReadableStreamtoIterable(deserialingStream);
    };
    /**
     * Generate a ReadableStream that serialize events
     * to event stream binary chunks; Use a pull stream
     * here to support low connection speed.
     *
     * This doesn't work on browser currently because
     * browser doesn't support upload streaming.
     * reference:
     * * https://bugs.chromium.org/p/chromium/issues/detail?id=688906
     * * https://bugzilla.mozilla.org/show_bug.cgi?id=1387483
     *
     */
    EventStreamMarshaller.prototype.serialize = function (input, serializer) {
        throw new Error("event stream request in browser is not supported\nReference: https://bugs.chromium.org/p/chromium/issues/detail?id=688906");
    };
    return EventStreamMarshaller;
}());
exports.EventStreamMarshaller = EventStreamMarshaller;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRTdHJlYW1NYXJzaGFsbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0V2ZW50U3RyZWFtTWFyc2hhbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBFQUEyRjtBQU8zRixpQ0FBbUQ7QUFDbkQsdURBQXNEO0FBQ3RELGlFQUFnRTtBQUNoRSxtRUFBa0U7QUFTbEU7SUFFRSwrQkFBWSxFQUEwRDtZQUF4RCw0QkFBVyxFQUFFLDRCQUFXO1FBQ3BDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSw4Q0FBZSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsMkNBQVcsR0FBWCxVQUNFLElBQW9CLEVBQ3BCLFlBQXdEO1FBRXhELElBQU0sYUFBYSxHQUFHLG1DQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLElBQU0sYUFBYSxHQUFHLDZDQUFxQixDQUN6QyxhQUFhLEVBQ2IsSUFBSSxDQUFDLGVBQWUsQ0FDckIsQ0FBQztRQUNGLElBQU0saUJBQWlCLEdBQUcsK0NBQXNCLENBQzlDLGFBQWEsRUFDYixZQUFZLENBQ2IsQ0FBQztRQUNGLE9BQU8sZ0NBQXdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7O09BV0c7SUFDSCx5Q0FBUyxHQUFULFVBQ0UsS0FBdUIsRUFDdkIsVUFBaUM7UUFFakMsTUFBTSxJQUFJLEtBQUssQ0FBQywySEFDb0QsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFDSCw0QkFBQztBQUFELENBQUMsQUF6Q0QsSUF5Q0M7QUF6Q1ksc0RBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRTdHJlYW1NYXJzaGFsbGVyIGFzIEV2ZW50TWFyc2hhbGxlciB9IGZyb20gXCJAYXdzLXNkay9ldmVudHN0cmVhbS1tYXJzaGFsbGVyXCI7XG5pbXBvcnQge1xuICBFbmNvZGVyLFxuICBEZWNvZGVyLFxuICBNZXNzYWdlLFxuICBFdmVudFN0cmVhbU1hcnNoYWxsZXIgYXMgSUV2ZW50U3RyZWFtTWFyc2hhbGxlclxufSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcbmltcG9ydCB7IFJlYWRhYmxlU3RyZWFtdG9JdGVyYWJsZSB9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBnZXRDaHVua2VkU3RyZWFtIH0gZnJvbSBcIi4vZ2V0Q2h1bmtlZFN0cmVhbVwiO1xuaW1wb3J0IHsgZ2V0RXZlbnRNZXNzYWdlU3RyZWFtIH0gZnJvbSBcIi4vZ2V0RXZlbnRNZXNzYWdlU3RyZWFtXCI7XG5pbXBvcnQgeyBnZXREZXNlcmlhbGl6aW5nU3RyZWFtIH0gZnJvbSBcIi4vZ2V0RGVzZXJpYWxpemluZ1N0cmVhbVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50U3RyZWFtTWFyc2hhbGxlciBleHRlbmRzIElFdmVudFN0cmVhbU1hcnNoYWxsZXIge31cblxuZXhwb3J0IGludGVyZmFjZSBFdmVudFN0cmVhbU1hcnNoYWxsZXJPcHRpb25zIHtcbiAgdXRmOEVuY29kZXI6IEVuY29kZXI7XG4gIHV0ZjhEZWNvZGVyOiBEZWNvZGVyO1xufVxuXG5leHBvcnQgY2xhc3MgRXZlbnRTdHJlYW1NYXJzaGFsbGVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBldmVudE1hcnNoYWxsZXI6IEV2ZW50TWFyc2hhbGxlcjtcbiAgY29uc3RydWN0b3IoeyB1dGY4RW5jb2RlciwgdXRmOERlY29kZXIgfTogRXZlbnRTdHJlYW1NYXJzaGFsbGVyT3B0aW9ucykge1xuICAgIHRoaXMuZXZlbnRNYXJzaGFsbGVyID0gbmV3IEV2ZW50TWFyc2hhbGxlcih1dGY4RW5jb2RlciwgdXRmOERlY29kZXIpO1xuICB9XG5cbiAgZGVzZXJpYWxpemU8VD4oXG4gICAgYm9keTogUmVhZGFibGVTdHJlYW0sXG4gICAgZGVzZXJpYWxpemVyOiAoaW5wdXQ6IHsgW2V2ZW50OiBzdHJpbmddOiBNZXNzYWdlIH0pID0+IFRcbiAgKTogQXN5bmNJdGVyYWJsZTxUPiB7XG4gICAgY29uc3QgY2h1bmtlZFN0cmVhbSA9IGdldENodW5rZWRTdHJlYW0oYm9keSk7XG4gICAgY29uc3QgbWVzc2FnZVN0cmVhbSA9IGdldEV2ZW50TWVzc2FnZVN0cmVhbShcbiAgICAgIGNodW5rZWRTdHJlYW0sXG4gICAgICB0aGlzLmV2ZW50TWFyc2hhbGxlclxuICAgICk7XG4gICAgY29uc3QgZGVzZXJpYWxpbmdTdHJlYW0gPSBnZXREZXNlcmlhbGl6aW5nU3RyZWFtKFxuICAgICAgbWVzc2FnZVN0cmVhbSxcbiAgICAgIGRlc2VyaWFsaXplclxuICAgICk7XG4gICAgcmV0dXJuIFJlYWRhYmxlU3RyZWFtdG9JdGVyYWJsZShkZXNlcmlhbGluZ1N0cmVhbSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSBSZWFkYWJsZVN0cmVhbSB0aGF0IHNlcmlhbGl6ZSBldmVudHNcbiAgICogdG8gZXZlbnQgc3RyZWFtIGJpbmFyeSBjaHVua3M7IFVzZSBhIHB1bGwgc3RyZWFtXG4gICAqIGhlcmUgdG8gc3VwcG9ydCBsb3cgY29ubmVjdGlvbiBzcGVlZC5cbiAgICpcbiAgICogVGhpcyBkb2Vzbid0IHdvcmsgb24gYnJvd3NlciBjdXJyZW50bHkgYmVjYXVzZVxuICAgKiBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCB1cGxvYWQgc3RyZWFtaW5nLlxuICAgKiByZWZlcmVuY2U6XG4gICAqICogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Njg4OTA2XG4gICAqICogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM4NzQ4M1xuICAgKlxuICAgKi9cbiAgc2VyaWFsaXplPFQ+KFxuICAgIGlucHV0OiBBc3luY0l0ZXJhYmxlPFQ+LFxuICAgIHNlcmlhbGl6ZXI6IChldmVudDogVCkgPT4gTWVzc2FnZVxuICApOiBSZWFkYWJsZVN0cmVhbSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBldmVudCBzdHJlYW0gcmVxdWVzdCBpbiBicm93c2VyIGlzIG5vdCBzdXBwb3J0ZWRcblJlZmVyZW5jZTogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Njg4OTA2YCk7XG4gIH1cbn1cbiJdfQ==