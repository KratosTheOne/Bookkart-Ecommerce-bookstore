"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var os_1 = require("os");
var path_1 = require("path");
var fs_1 = require("fs");
exports.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
exports.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
var swallowError = function () { return ({}); };
function loadSharedConfigFiles(init) {
    if (init === void 0) { init = {}; }
    var _a = init.filepath, filepath = _a === void 0 ? process.env[exports.ENV_CREDENTIALS_PATH] ||
        path_1.join(getHomeDir(), ".aws", "credentials") : _a, _b = init.configFilepath, configFilepath = _b === void 0 ? process.env[exports.ENV_CONFIG_PATH] ||
        path_1.join(getHomeDir(), ".aws", "config") : _b;
    return Promise.all([
        slurpFile(configFilepath)
            .then(parseIni)
            .then(normalizeConfigFile)
            .catch(swallowError),
        slurpFile(filepath).then(parseIni).catch(swallowError)
    ]).then(function (parsedFiles) {
        var configFile = parsedFiles[0], credentialsFile = parsedFiles[1];
        return {
            configFile: configFile,
            credentialsFile: credentialsFile
        };
    });
}
exports.loadSharedConfigFiles = loadSharedConfigFiles;
var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
function normalizeConfigFile(data) {
    var map = {};
    for (var _i = 0, _a = Object.keys(data); _i < _a.length; _i++) {
        var key = _a[_i];
        var matches = void 0;
        if (key === "default") {
            map.default = data.default;
        }
        else if ((matches = profileKeyRegex.exec(key))) {
            var _1 = matches[0], _2 = matches[1], normalizedKey = matches[2];
            if (normalizedKey) {
                map[normalizedKey] = data[key];
            }
        }
    }
    return map;
}
function parseIni(iniData) {
    var map = {};
    var currentSection;
    for (var _i = 0, _a = iniData.split(/\r?\n/); _i < _a.length; _i++) {
        var line = _a[_i];
        line = line.split(/(^|\s)[;#]/)[0]; // remove comments
        var section = line.match(/^\s*\[([^\[\]]+)]\s*$/);
        if (section) {
            currentSection = section[1];
        }
        else if (currentSection) {
            var item = line.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);
            if (item) {
                map[currentSection] = map[currentSection] || {};
                map[currentSection][item[1]] = item[2];
            }
        }
    }
    return map;
}
function slurpFile(path) {
    return new Promise(function (resolve, reject) {
        fs_1.readFile(path, "utf8", function (err, data) {
            if (err) {
                reject(err);
            }
            else {
                resolve(data);
            }
        });
    });
}
function getHomeDir() {
    var _a = process.env, HOME = _a.HOME, USERPROFILE = _a.USERPROFILE, HOMEPATH = _a.HOMEPATH, _b = _a.HOMEDRIVE, HOMEDRIVE = _b === void 0 ? "C:" + path_1.sep : _b;
    if (HOME)
        return HOME;
    if (USERPROFILE)
        return USERPROFILE;
    if (HOMEPATH)
        return "" + HOMEDRIVE + HOMEPATH;
    return os_1.homedir();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlCQUE2QjtBQUM3Qiw2QkFBaUM7QUFDakMseUJBQThCO0FBRWpCLFFBQUEsb0JBQW9CLEdBQUcsNkJBQTZCLENBQUM7QUFDckQsUUFBQSxlQUFlLEdBQUcsaUJBQWlCLENBQUM7QUErQmpELElBQU0sWUFBWSxHQUFHLGNBQU0sT0FBQSxDQUFDLEVBQUUsQ0FBQyxFQUFKLENBQUksQ0FBQztBQUVoQyxTQUFnQixxQkFBcUIsQ0FDbkMsSUFBMkI7SUFBM0IscUJBQUEsRUFBQSxTQUEyQjtJQUd6QixJQUFBLGtCQUMyQyxFQUQzQzs2REFDMkMsRUFDM0Msd0JBQ3NDLEVBRHRDO3dEQUNzQyxDQUMvQjtJQUVULE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUNqQixTQUFTLENBQUMsY0FBYyxDQUFDO2FBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDZCxJQUFJLENBQUMsbUJBQW1CLENBQUM7YUFDekIsS0FBSyxDQUFDLFlBQVksQ0FBQztRQUN0QixTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUM7S0FDdkQsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLFdBQWlDO1FBQ2pDLElBQUEsMkJBQVUsRUFBRSxnQ0FBZSxDQUFnQjtRQUNsRCxPQUFPO1lBQ0wsVUFBVSxZQUFBO1lBQ1YsZUFBZSxpQkFBQTtTQUNoQixDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBdkJELHNEQXVCQztBQUVELElBQU0sZUFBZSxHQUFHLDhCQUE4QixDQUFDO0FBQ3ZELFNBQVMsbUJBQW1CLENBQUMsSUFBbUI7SUFDOUMsSUFBTSxHQUFHLEdBQWtCLEVBQUUsQ0FBQztJQUM5QixLQUFnQixVQUFpQixFQUFqQixLQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQWpCLGNBQWlCLEVBQWpCLElBQWlCLEVBQUU7UUFBOUIsSUFBSSxHQUFHLFNBQUE7UUFDVixJQUFJLE9BQU8sU0FBc0IsQ0FBQztRQUNsQyxJQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7WUFDckIsR0FBRyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQzVCO2FBQU0sSUFBSSxDQUFDLE9BQU8sR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDekMsSUFBQSxlQUFFLEVBQUUsZUFBRSxFQUFFLDBCQUFhLENBQVk7WUFDeEMsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDaEM7U0FDRjtLQUNGO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsT0FBZTtJQUMvQixJQUFNLEdBQUcsR0FBa0IsRUFBRSxDQUFDO0lBQzlCLElBQUksY0FBa0MsQ0FBQztJQUN2QyxLQUFpQixVQUFzQixFQUF0QixLQUFBLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQXRCLGNBQXNCLEVBQXRCLElBQXNCLEVBQUU7UUFBcEMsSUFBSSxJQUFJLFNBQUE7UUFDWCxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQjtRQUN0RCxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDcEQsSUFBSSxPQUFPLEVBQUU7WUFDWCxjQUFjLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdCO2FBQU0sSUFBSSxjQUFjLEVBQUU7WUFDekIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1lBQ3JELElBQUksSUFBSSxFQUFFO2dCQUNSLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNoRCxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3hDO1NBQ0Y7S0FDRjtJQUVELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLElBQVk7SUFDN0IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1FBQ2pDLGFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFVBQUMsR0FBRyxFQUFFLElBQUk7WUFDL0IsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2I7aUJBQU07Z0JBQ0wsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2Y7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELFNBQVMsVUFBVTtJQUNYLElBQUEsZ0JBQXFFLEVBQW5FLGNBQUksRUFBRSw0QkFBVyxFQUFFLHNCQUFRLEVBQUUsaUJBQXNCLEVBQXRCLGtEQUFzQyxDQUFDO0lBRTVFLElBQUksSUFBSTtRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQ3RCLElBQUksV0FBVztRQUFFLE9BQU8sV0FBVyxDQUFDO0lBQ3BDLElBQUksUUFBUTtRQUFFLE9BQU8sS0FBRyxTQUFTLEdBQUcsUUFBVSxDQUFDO0lBRS9DLE9BQU8sWUFBTyxFQUFFLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhvbWVkaXIgfSBmcm9tIFwib3NcIjtcbmltcG9ydCB7IGpvaW4sIHNlcCB9IGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyByZWFkRmlsZSB9IGZyb20gXCJmc1wiO1xuXG5leHBvcnQgY29uc3QgRU5WX0NSRURFTlRJQUxTX1BBVEggPSBcIkFXU19TSEFSRURfQ1JFREVOVElBTFNfRklMRVwiO1xuZXhwb3J0IGNvbnN0IEVOVl9DT05GSUdfUEFUSCA9IFwiQVdTX0NPTkZJR19GSUxFXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2hhcmVkQ29uZmlnSW5pdCB7XG4gIC8qKlxuICAgKiBUaGUgcGF0aCBhdCB3aGljaCB0byBsb2NhdGUgdGhlIGluaSBjcmVkZW50aWFscyBmaWxlLiBEZWZhdWx0cyB0byB0aGVcbiAgICogdmFsdWUgb2YgdGhlIGBBV1NfU0hBUkVEX0NSRURFTlRJQUxTX0ZJTEVgIGVudmlyb25tZW50IHZhcmlhYmxlIChpZlxuICAgKiBkZWZpbmVkKSBvciBgfi8uYXdzL2NyZWRlbnRpYWxzYCBvdGhlcndpc2UuXG4gICAqL1xuICBmaWxlcGF0aD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHBhdGggYXQgd2hpY2ggdG8gbG9jYXRlIHRoZSBpbmkgY29uZmlnIGZpbGUuIERlZmF1bHRzIHRvIHRoZSB2YWx1ZSBvZlxuICAgKiB0aGUgYEFXU19DT05GSUdfRklMRWAgZW52aXJvbm1lbnQgdmFyaWFibGUgKGlmIGRlZmluZWQpIG9yXG4gICAqIGB+Ly5hd3MvY29uZmlnYCBvdGhlcndpc2UuXG4gICAqL1xuICBjb25maWdGaWxlcGF0aD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQcm9maWxlIHtcbiAgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhcnNlZEluaURhdGEge1xuICBba2V5OiBzdHJpbmddOiBQcm9maWxlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNoYXJlZENvbmZpZ0ZpbGVzIHtcbiAgY3JlZGVudGlhbHNGaWxlOiBQYXJzZWRJbmlEYXRhO1xuICBjb25maWdGaWxlOiBQYXJzZWRJbmlEYXRhO1xufVxuXG5jb25zdCBzd2FsbG93RXJyb3IgPSAoKSA9PiAoe30pO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFNoYXJlZENvbmZpZ0ZpbGVzKFxuICBpbml0OiBTaGFyZWRDb25maWdJbml0ID0ge31cbik6IFByb21pc2U8U2hhcmVkQ29uZmlnRmlsZXM+IHtcbiAgY29uc3Qge1xuICAgIGZpbGVwYXRoID0gcHJvY2Vzcy5lbnZbRU5WX0NSRURFTlRJQUxTX1BBVEhdIHx8XG4gICAgICBqb2luKGdldEhvbWVEaXIoKSwgXCIuYXdzXCIsIFwiY3JlZGVudGlhbHNcIiksXG4gICAgY29uZmlnRmlsZXBhdGggPSBwcm9jZXNzLmVudltFTlZfQ09ORklHX1BBVEhdIHx8XG4gICAgICBqb2luKGdldEhvbWVEaXIoKSwgXCIuYXdzXCIsIFwiY29uZmlnXCIpXG4gIH0gPSBpbml0O1xuXG4gIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgc2x1cnBGaWxlKGNvbmZpZ0ZpbGVwYXRoKVxuICAgICAgLnRoZW4ocGFyc2VJbmkpXG4gICAgICAudGhlbihub3JtYWxpemVDb25maWdGaWxlKVxuICAgICAgLmNhdGNoKHN3YWxsb3dFcnJvciksXG4gICAgc2x1cnBGaWxlKGZpbGVwYXRoKS50aGVuKHBhcnNlSW5pKS5jYXRjaChzd2FsbG93RXJyb3IpXG4gIF0pLnRoZW4oKHBhcnNlZEZpbGVzOiBBcnJheTxQYXJzZWRJbmlEYXRhPikgPT4ge1xuICAgIGNvbnN0IFtjb25maWdGaWxlLCBjcmVkZW50aWFsc0ZpbGVdID0gcGFyc2VkRmlsZXM7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbmZpZ0ZpbGUsXG4gICAgICBjcmVkZW50aWFsc0ZpbGVcbiAgICB9O1xuICB9KTtcbn1cblxuY29uc3QgcHJvZmlsZUtleVJlZ2V4ID0gL15wcm9maWxlXFxzKFtcIiddKT8oW15cXDFdKylcXDEkLztcbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbmZpZ0ZpbGUoZGF0YTogUGFyc2VkSW5pRGF0YSk6IFBhcnNlZEluaURhdGEge1xuICBjb25zdCBtYXA6IFBhcnNlZEluaURhdGEgPSB7fTtcbiAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKGRhdGEpKSB7XG4gICAgbGV0IG1hdGNoZXM6IEFycmF5PHN0cmluZz4gfCBudWxsO1xuICAgIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICBtYXAuZGVmYXVsdCA9IGRhdGEuZGVmYXVsdDtcbiAgICB9IGVsc2UgaWYgKChtYXRjaGVzID0gcHJvZmlsZUtleVJlZ2V4LmV4ZWMoa2V5KSkpIHtcbiAgICAgIGNvbnN0IFtfMSwgXzIsIG5vcm1hbGl6ZWRLZXldID0gbWF0Y2hlcztcbiAgICAgIGlmIChub3JtYWxpemVkS2V5KSB7XG4gICAgICAgIG1hcFtub3JtYWxpemVkS2V5XSA9IGRhdGFba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWFwO1xufVxuXG5mdW5jdGlvbiBwYXJzZUluaShpbmlEYXRhOiBzdHJpbmcpOiBQYXJzZWRJbmlEYXRhIHtcbiAgY29uc3QgbWFwOiBQYXJzZWRJbmlEYXRhID0ge307XG4gIGxldCBjdXJyZW50U2VjdGlvbjogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBmb3IgKGxldCBsaW5lIG9mIGluaURhdGEuc3BsaXQoL1xccj9cXG4vKSkge1xuICAgIGxpbmUgPSBsaW5lLnNwbGl0KC8oXnxcXHMpWzsjXS8pWzBdOyAvLyByZW1vdmUgY29tbWVudHNcbiAgICBjb25zdCBzZWN0aW9uID0gbGluZS5tYXRjaCgvXlxccypcXFsoW15cXFtcXF1dKyldXFxzKiQvKTtcbiAgICBpZiAoc2VjdGlvbikge1xuICAgICAgY3VycmVudFNlY3Rpb24gPSBzZWN0aW9uWzFdO1xuICAgIH0gZWxzZSBpZiAoY3VycmVudFNlY3Rpb24pIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBsaW5lLm1hdGNoKC9eXFxzKiguKz8pXFxzKj1cXHMqKC4rPylcXHMqJC8pO1xuICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgbWFwW2N1cnJlbnRTZWN0aW9uXSA9IG1hcFtjdXJyZW50U2VjdGlvbl0gfHwge307XG4gICAgICAgIG1hcFtjdXJyZW50U2VjdGlvbl1baXRlbVsxXV0gPSBpdGVtWzJdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXA7XG59XG5cbmZ1bmN0aW9uIHNsdXJwRmlsZShwYXRoOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHJlYWRGaWxlKHBhdGgsIFwidXRmOFwiLCAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEhvbWVEaXIoKTogc3RyaW5nIHtcbiAgY29uc3QgeyBIT01FLCBVU0VSUFJPRklMRSwgSE9NRVBBVEgsIEhPTUVEUklWRSA9IGBDOiR7c2VwfWAgfSA9IHByb2Nlc3MuZW52O1xuXG4gIGlmIChIT01FKSByZXR1cm4gSE9NRTtcbiAgaWYgKFVTRVJQUk9GSUxFKSByZXR1cm4gVVNFUlBST0ZJTEU7XG4gIGlmIChIT01FUEFUSCkgcmV0dXJuIGAke0hPTUVEUklWRX0ke0hPTUVQQVRIfWA7XG5cbiAgcmV0dXJuIGhvbWVkaXIoKTtcbn1cbiJdfQ==