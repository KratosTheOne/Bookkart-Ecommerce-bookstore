/// <reference types="node" />
import { LexRuntimeServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../LexRuntimeServiceClient";
import { PostContentRequest, PostContentResponse } from "../models/index";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export declare type PostContentCommandInput = Omit<PostContentRequest, "inputStream"> & {
    inputStream: PostContentRequest["inputStream"] | string | Uint8Array | Buffer;
};
export declare type PostContentCommandOutput = PostContentResponse & __MetadataBearer;
export declare class PostContentCommand extends $Command<PostContentCommandInput, PostContentCommandOutput, LexRuntimeServiceClientResolvedConfig> {
    readonly input: PostContentCommandInput;
    constructor(input: PostContentCommandInput);
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LexRuntimeServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PostContentCommandInput, PostContentCommandOutput>;
    private serialize;
    private deserialize;
}
