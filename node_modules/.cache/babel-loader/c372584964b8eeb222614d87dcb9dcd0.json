{"ast":null,"code":"'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false //A tag can have attributes without any value\n\n};\nconst props = ['allowBooleanAttributes']; //const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\n\nexports.validate = function (xmlData, options) {\n  options = util.buildOptions(options, defaultOptions, props); //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n\n  const tags = [];\n  let tagFound = false; //indicates that the root tag has been closed (aka. depth 0 has been reached)\n\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n\n  for (let i = 0; i < xmlData.length; i++) {\n    if (xmlData[i] === '<' && xmlData[i + 1] === '?') {\n      i += 2;\n      i = readPI(xmlData, i);\n      if (i.err) return i;\n    } else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      i++;\n\n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        } //read tagname\n\n\n        let tagName = '';\n\n        for (; i < xmlData.length && xmlData[i] !== '>' && xmlData[i] !== ' ' && xmlData[i] !== '\\t' && xmlData[i] !== '\\n' && xmlData[i] !== '\\r'; i++) {\n          tagName += xmlData[i];\n        }\n\n        tagName = tagName.trim(); //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1); //continue;\n\n          i--;\n        }\n\n        if (!validateTagName(tagName)) {\n          let msg;\n\n          if (tagName.trim().length === 0) {\n            msg = \"There is an unnecessary space between tag name and backward slash '</ ..'.\";\n          } else {\n            msg = \"Tag '\" + tagName + \"' is an invalid name.\";\n          }\n\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\" + tagName + \"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n\n          if (isValid === true) {\n            tagFound = true; //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\" + tagName + \"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\" + tagName + \"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, i));\n          } else {\n            const otg = tags.pop();\n\n            if (tagName !== otg) {\n              return getErrorObject('InvalidTag', \"Closing tag '\" + otg + \"' is expected inplace of '\" + tagName + \"'.\", getLineNumberForPosition(xmlData, i));\n            } //when there are no more tags, we reached the root level.\n\n\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          } //if the root level has been reached before ...\n\n\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else {\n            tags.push(tagName);\n          }\n\n          tagFound = true;\n        } //skip tag text value\n        //It may include comments and CDATA value\n\n\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i + 1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else {\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1) return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }\n        } //end of reading tag text value\n\n\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if (xmlData[i] === ' ' || xmlData[i] === '\\t' || xmlData[i] === '\\n' || xmlData[i] === '\\r') {\n        continue;\n      }\n\n      return getErrorObject('InvalidChar', \"char '\" + xmlData[i] + \"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  } else if (tags.length > 0) {\n    return getErrorObject('InvalidXml', \"Invalid '\" + JSON.stringify(tags, null, 4).replace(/\\r?\\n/g, '') + \"' found.\", 1);\n  }\n\n  return true;\n};\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\n\n\nfunction readPI(xmlData, i) {\n  var start = i;\n\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      var tagname = xmlData.substr(start, i - start);\n\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (xmlData.length > i + 8 && xmlData[i + 1] === 'D' && xmlData[i + 2] === 'O' && xmlData[i + 3] === 'C' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'Y' && xmlData[i + 6] === 'P' && xmlData[i + 7] === 'E') {\n    let angleBracketsCount = 1;\n\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (xmlData.length > i + 9 && xmlData[i + 1] === '[' && xmlData[i + 2] === 'C' && xmlData[i + 3] === 'D' && xmlData[i + 4] === 'A' && xmlData[i + 5] === 'T' && xmlData[i + 6] === 'A' && xmlData[i + 7] === '[') {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nvar doubleQuote = '\"';\nvar singleQuote = \"'\";\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\n\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n        continue;\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n\n    attrStr += xmlData[i];\n  }\n\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n/**\n * Select all the attributes whether valid or invalid.\n */\n\n\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g'); //attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n  //if(attrStr.trim().length === 0) return true; //empty string\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\" + matches[i][2] + \"' has no space in starting.\", getPositionFromMatch(attrStr, matches[i][0]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\" + matches[i][2] + \"' is not allowed.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n\n\n    const attrName = matches[i][2];\n\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\" + attrName + \"' is an invalid name.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\" + attrName + \"' is repeated.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';') return i;\n    if (!xmlData[i].match(re)) break;\n  }\n\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';') return -1;\n\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n\n  let count = 0;\n\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20) continue;\n    if (xmlData[i] === ';') break;\n    return -1;\n  }\n\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber\n    }\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n} // const startsWithXML = /^xml/i;\n\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname)\n  /* && !tagname.match(startsWithXML) */\n  ;\n} //this function returns the line number for the character at the given index\n\n\nfunction getLineNumberForPosition(xmlData, index) {\n  var lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return lines.length;\n} //this function returns the position of the last character of match within attrStr\n\n\nfunction getPositionFromMatch(attrStr, match) {\n  return attrStr.indexOf(match) + match.length;\n}","map":{"version":3,"sources":["C:/Users/Kaustubh Sinha/Desktop/bookkart/node_modules/fast-xml-parser/src/validator.js"],"names":["util","require","defaultOptions","allowBooleanAttributes","props","exports","validate","xmlData","options","buildOptions","tags","tagFound","reachedRoot","substr","i","length","readPI","err","readCommentAndCDATA","closingTag","tagName","trim","substring","validateTagName","msg","getErrorObject","getLineNumberForPosition","result","readAttributeStr","attrStr","value","index","isValid","validateAttributeString","code","line","tagClosed","otg","pop","push","afterAmp","validateAmpersand","JSON","stringify","replace","start","tagname","angleBracketsCount","doubleQuote","singleQuote","startChar","validAttrStrRegxp","RegExp","matches","getAllMatches","attrNames","getPositionFromMatch","undefined","attrName","validateAttrName","hasOwnProperty","validateNumberAmpersand","re","match","count","message","lineNumber","isName","lines","split","indexOf"],"mappings":"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","sourcesContent":["'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n};\n\nconst props = ['allowBooleanAttributes'];\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = util.buildOptions(options, defaultOptions, props);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n\n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"There is an unnecessary space between tag name and backward slash '</ ..'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, i));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg) {\n              return getErrorObject('InvalidTag', \"Closing tag '\"+otg+\"' is expected inplace of '\"+tagName+\"'.\", getLineNumberForPosition(xmlData, i));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else {\n            tags.push(tagName);\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if (xmlData[i] === ' ' || xmlData[i] === '\\t' || xmlData[i] === '\\n' || xmlData[i] === '\\r') {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  } else if (tags.length > 0) {\n    return getErrorObject('InvalidXml', \"Invalid '\"+JSON.stringify(tags, null, 4).replace(/\\r?\\n/g, '')+\"' found.\", 1);\n  }\n\n  return true;\n};\n\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  var start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      var tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nvar doubleQuote = '\"';\nvar singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n        continue;\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(attrStr, matches[i][0]))\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  var lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return lines.length;\n}\n\n//this function returns the position of the last character of match within attrStr\nfunction getPositionFromMatch(attrStr, match) {\n  return attrStr.indexOf(match) + match.length;\n}\n"]},"metadata":{},"sourceType":"script"}