{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { sleep } from \"./utils/sleep\";\nimport { WaiterState } from \"./waiter\";\n/**\n * Reference: https://awslabs.github.io/smithy/1.0/spec/waiters.html#waiter-retries\n */\n\nvar exponentialBackoffWithJitter = function (minDelay, maxDelay, attemptCeiling, attempt) {\n  if (attempt > attemptCeiling) return maxDelay;\n  var delay = minDelay * Math.pow(2, attempt - 1);\n  return randomInRange(minDelay, delay);\n};\n\nvar randomInRange = function (min, max) {\n  return min + Math.random() * (max - min);\n};\n/**\n * Function that runs polling as part of waiters. This will make one inital attempt and then\n * subsequent attempts with an increasing delay.\n * @param params options passed to the waiter.\n * @param client AWS SDK Client\n * @param input client input\n * @param stateChecker function that checks the acceptor states on each poll.\n */\n\n\nexport var runPolling = function (_a, input, acceptorChecks) {\n  var minDelay = _a.minDelay,\n      maxDelay = _a.maxDelay,\n      maxWaitTime = _a.maxWaitTime,\n      abortController = _a.abortController,\n      client = _a.client;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var state, currentAttempt, waitUntil, attemptCeiling, delay, state_1;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , acceptorChecks(client, input)];\n\n        case 1:\n          state = _c.sent().state;\n\n          if (state !== WaiterState.RETRY) {\n            return [2\n            /*return*/\n            , {\n              state: state\n            }];\n          }\n\n          currentAttempt = 1;\n          waitUntil = Date.now() + maxWaitTime * 1000;\n          attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;\n          _c.label = 2;\n\n        case 2:\n          if (!true) return [3\n          /*break*/\n          , 5];\n\n          if ((_b = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _b === void 0 ? void 0 : _b.aborted) {\n            return [2\n            /*return*/\n            , {\n              state: WaiterState.ABORTED\n            }];\n          }\n\n          delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt); // Resolve the promise explicitly at timeout or aborted. Otherwise this while loop will keep making API call until\n          // `acceptorCheck` returns non-retry status, even with the Promise.race() outside.\n\n          if (Date.now() + delay * 1000 > waitUntil) {\n            return [2\n            /*return*/\n            , {\n              state: WaiterState.TIMEOUT\n            }];\n          }\n\n          return [4\n          /*yield*/\n          , sleep(delay)];\n\n        case 3:\n          _c.sent();\n\n          return [4\n          /*yield*/\n          , acceptorChecks(client, input)];\n\n        case 4:\n          state_1 = _c.sent().state;\n\n          if (state_1 !== WaiterState.RETRY) {\n            return [2\n            /*return*/\n            , {\n              state: state_1\n            }];\n          }\n\n          currentAttempt += 1;\n          return [3\n          /*break*/\n          , 2];\n\n        case 5:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n};","map":{"version":3,"sources":["../../src/poller.ts"],"names":[],"mappings":"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","sourcesContent":["import { sleep } from \"./utils/sleep\";\nimport { WaiterOptions, WaiterResult, WaiterState } from \"./waiter\";\n\n/**\n * Reference: https://awslabs.github.io/smithy/1.0/spec/waiters.html#waiter-retries\n */\nconst exponentialBackoffWithJitter = (minDelay: number, maxDelay: number, attemptCeiling: number, attempt: number) => {\n  if (attempt > attemptCeiling) return maxDelay;\n  const delay = minDelay * 2 ** (attempt - 1);\n  return randomInRange(minDelay, delay);\n};\n\nconst randomInRange = (min: number, max: number) => min + Math.random() * (max - min);\n\n/**\n * Function that runs polling as part of waiters. This will make one inital attempt and then\n * subsequent attempts with an increasing delay.\n * @param params options passed to the waiter.\n * @param client AWS SDK Client\n * @param input client input\n * @param stateChecker function that checks the acceptor states on each poll.\n */\nexport const runPolling = async <Client, Input>(\n  { minDelay, maxDelay, maxWaitTime, abortController, client }: WaiterOptions<Client>,\n  input: Input,\n  acceptorChecks: (client: Client, input: Input) => Promise<WaiterResult>\n): Promise<WaiterResult> => {\n  const { state } = await acceptorChecks(client, input);\n  if (state !== WaiterState.RETRY) {\n    return { state };\n  }\n\n  let currentAttempt = 1;\n  const waitUntil = Date.now() + maxWaitTime * 1000;\n  // The max attempt number that the derived delay time tend to increase.\n  // Pre-compute this number to avoid Number type overflow.\n  const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;\n  while (true) {\n    if (abortController?.signal?.aborted) {\n      return { state: WaiterState.ABORTED };\n    }\n    const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);\n    // Resolve the promise explicitly at timeout or aborted. Otherwise this while loop will keep making API call until\n    // `acceptorCheck` returns non-retry status, even with the Promise.race() outside.\n    if (Date.now() + delay * 1000 > waitUntil) {\n      return { state: WaiterState.TIMEOUT };\n    }\n    await sleep(delay);\n    const { state } = await acceptorChecks(client, input);\n    if (state !== WaiterState.RETRY) {\n      return { state };\n    }\n\n    currentAttempt += 1;\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}