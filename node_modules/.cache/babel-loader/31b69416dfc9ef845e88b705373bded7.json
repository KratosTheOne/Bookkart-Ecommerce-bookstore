{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { ALGORITHM_IDENTIFIER, ALGORITHM_QUERY_PARAM, AMZ_DATE_HEADER, AMZ_DATE_QUERY_PARAM, AUTH_HEADER, CREDENTIAL_QUERY_PARAM, EVENT_ALGORITHM_IDENTIFIER, EXPIRES_QUERY_PARAM, MAX_PRESIGNED_TTL, SHA256_HEADER, SIGNATURE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, TOKEN_HEADER, TOKEN_QUERY_PARAM } from \"./constants\";\nimport { createScope, getSigningKey } from \"./credentialDerivation\";\nimport { getCanonicalHeaders } from \"./getCanonicalHeaders\";\nimport { getCanonicalQuery } from \"./getCanonicalQuery\";\nimport { getPayloadHash } from \"./getPayloadHash\";\nimport { hasHeader } from \"./hasHeader\";\nimport { moveHeadersToQuery } from \"./moveHeadersToQuery\";\nimport { prepareRequest } from \"./prepareRequest\";\nimport { iso8601 } from \"./utilDate\";\n\nvar SignatureV4 =\n/** @class */\nfunction () {\n  function SignatureV4(_a) {\n    var applyChecksum = _a.applyChecksum,\n        credentials = _a.credentials,\n        region = _a.region,\n        service = _a.service,\n        sha256 = _a.sha256,\n        _b = _a.uriEscapePath,\n        uriEscapePath = _b === void 0 ? true : _b;\n    this.service = service;\n    this.sha256 = sha256;\n    this.uriEscapePath = uriEscapePath; // default to true if applyChecksum isn't set\n\n    this.applyChecksum = typeof applyChecksum === \"boolean\" ? applyChecksum : true;\n    this.regionProvider = normalizeRegionProvider(region);\n    this.credentialProvider = normalizeCredentialsProvider(credentials);\n  }\n\n  SignatureV4.prototype.presign = function (originalRequest, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, signingDate, _b, expiresIn, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, credentials, region, _c, _d, longDate, shortDate, scope, request, canonicalHeaders, _e, _f, _g, _h, _j, _k;\n\n      return __generator(this, function (_l) {\n        switch (_l.label) {\n          case 0:\n            _a = options.signingDate, signingDate = _a === void 0 ? new Date() : _a, _b = options.expiresIn, expiresIn = _b === void 0 ? 3600 : _b, unsignableHeaders = options.unsignableHeaders, unhoistableHeaders = options.unhoistableHeaders, signableHeaders = options.signableHeaders, signingRegion = options.signingRegion, signingService = options.signingService;\n            return [4\n            /*yield*/\n            , this.credentialProvider()];\n\n          case 1:\n            credentials = _l.sent();\n            if (!(signingRegion !== null && signingRegion !== void 0)) return [3\n            /*break*/\n            , 2];\n            _c = signingRegion;\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.regionProvider()];\n\n          case 3:\n            _c = _l.sent();\n            _l.label = 4;\n\n          case 4:\n            region = _c;\n            _d = formatDate(signingDate), longDate = _d.longDate, shortDate = _d.shortDate;\n\n            if (expiresIn > MAX_PRESIGNED_TTL) {\n              return [2\n              /*return*/\n              , Promise.reject(\"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\")];\n            }\n\n            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);\n            request = moveHeadersToQuery(prepareRequest(originalRequest), {\n              unhoistableHeaders: unhoistableHeaders\n            });\n\n            if (credentials.sessionToken) {\n              request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n            }\n\n            request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n            request.query[CREDENTIAL_QUERY_PARAM] = credentials.accessKeyId + \"/\" + scope;\n            request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n            request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n            canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n            request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);\n            _e = request.query;\n            _f = SIGNATURE_QUERY_PARAM;\n            _g = this.getSignature;\n            _h = [longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService)];\n            _j = this.createCanonicalRequest;\n            _k = [request, canonicalHeaders];\n            return [4\n            /*yield*/\n            , getPayloadHash(originalRequest, this.sha256)];\n\n          case 5:\n            return [4\n            /*yield*/\n            , _g.apply(this, _h.concat([_j.apply(this, _k.concat([_l.sent()]))]))];\n\n          case 6:\n            _e[_f] = _l.sent();\n            return [2\n            /*return*/\n            , request];\n        }\n      });\n    });\n  };\n\n  SignatureV4.prototype.sign = function (toSign, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (typeof toSign === \"string\") {\n          return [2\n          /*return*/\n          , this.signString(toSign, options)];\n        } else if (toSign.headers && toSign.payload) {\n          return [2\n          /*return*/\n          , this.signEvent(toSign, options)];\n        } else {\n          return [2\n          /*return*/\n          , this.signRequest(toSign, options)];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  SignatureV4.prototype.signEvent = function (_a, _b) {\n    var headers = _a.headers,\n        payload = _a.payload;\n    var _c = _b.signingDate,\n        signingDate = _c === void 0 ? new Date() : _c,\n        priorSignature = _b.priorSignature,\n        signingRegion = _b.signingRegion,\n        signingService = _b.signingService;\n    return __awaiter(this, void 0, void 0, function () {\n      var region, _d, _e, shortDate, longDate, scope, hashedPayload, hash, hashedHeaders, _f, stringToSign;\n\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            if (!(signingRegion !== null && signingRegion !== void 0)) return [3\n            /*break*/\n            , 1];\n            _d = signingRegion;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.regionProvider()];\n\n          case 2:\n            _d = _g.sent();\n            _g.label = 3;\n\n          case 3:\n            region = _d;\n            _e = formatDate(signingDate), shortDate = _e.shortDate, longDate = _e.longDate;\n            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);\n            return [4\n            /*yield*/\n            , getPayloadHash({\n              headers: {},\n              body: payload\n            }, this.sha256)];\n\n          case 4:\n            hashedPayload = _g.sent();\n            hash = new this.sha256();\n            hash.update(headers);\n            _f = toHex;\n            return [4\n            /*yield*/\n            , hash.digest()];\n\n          case 5:\n            hashedHeaders = _f.apply(void 0, [_g.sent()]);\n            stringToSign = [EVENT_ALGORITHM_IDENTIFIER, longDate, scope, priorSignature, hashedHeaders, hashedPayload].join(\"\\n\");\n            return [2\n            /*return*/\n            , this.signString(stringToSign, {\n              signingDate: signingDate,\n              signingRegion: region,\n              signingService: signingService\n            })];\n        }\n      });\n    });\n  };\n\n  SignatureV4.prototype.signString = function (stringToSign, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.signingDate,\n        signingDate = _c === void 0 ? new Date() : _c,\n        signingRegion = _b.signingRegion,\n        signingService = _b.signingService;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, region, _d, shortDate, hash, _e, _f, _g;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.credentialProvider()];\n\n          case 1:\n            credentials = _h.sent();\n            if (!(signingRegion !== null && signingRegion !== void 0)) return [3\n            /*break*/\n            , 2];\n            _d = signingRegion;\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.regionProvider()];\n\n          case 3:\n            _d = _h.sent();\n            _h.label = 4;\n\n          case 4:\n            region = _d;\n            shortDate = formatDate(signingDate).shortDate;\n            _f = (_e = this.sha256).bind;\n            return [4\n            /*yield*/\n            , this.getSigningKey(credentials, region, shortDate, signingService)];\n\n          case 5:\n            hash = new (_f.apply(_e, [void 0, _h.sent()]))();\n            hash.update(stringToSign);\n            _g = toHex;\n            return [4\n            /*yield*/\n            , hash.digest()];\n\n          case 6:\n            return [2\n            /*return*/\n            , _g.apply(void 0, [_h.sent()])];\n        }\n      });\n    });\n  };\n\n  SignatureV4.prototype.signRequest = function (requestToSign, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.signingDate,\n        signingDate = _c === void 0 ? new Date() : _c,\n        signableHeaders = _b.signableHeaders,\n        unsignableHeaders = _b.unsignableHeaders,\n        signingRegion = _b.signingRegion,\n        signingService = _b.signingService;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, region, _d, request, _e, longDate, shortDate, scope, payloadHash, canonicalHeaders, signature;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.credentialProvider()];\n\n          case 1:\n            credentials = _f.sent();\n            if (!(signingRegion !== null && signingRegion !== void 0)) return [3\n            /*break*/\n            , 2];\n            _d = signingRegion;\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.regionProvider()];\n\n          case 3:\n            _d = _f.sent();\n            _f.label = 4;\n\n          case 4:\n            region = _d;\n            request = prepareRequest(requestToSign);\n            _e = formatDate(signingDate), longDate = _e.longDate, shortDate = _e.shortDate;\n            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);\n            request.headers[AMZ_DATE_HEADER] = longDate;\n\n            if (credentials.sessionToken) {\n              request.headers[TOKEN_HEADER] = credentials.sessionToken;\n            }\n\n            return [4\n            /*yield*/\n            , getPayloadHash(request, this.sha256)];\n\n          case 5:\n            payloadHash = _f.sent();\n\n            if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n              request.headers[SHA256_HEADER] = payloadHash;\n            }\n\n            canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n            return [4\n            /*yield*/\n            , this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash))];\n\n          case 6:\n            signature = _f.sent();\n            request.headers[AUTH_HEADER] = ALGORITHM_IDENTIFIER + \" \" + (\"Credential=\" + credentials.accessKeyId + \"/\" + scope + \", \") + (\"SignedHeaders=\" + getCanonicalHeaderList(canonicalHeaders) + \", \") + (\"Signature=\" + signature);\n            return [2\n            /*return*/\n            , request];\n        }\n      });\n    });\n  };\n\n  SignatureV4.prototype.createCanonicalRequest = function (request, canonicalHeaders, payloadHash) {\n    var sortedHeaders = Object.keys(canonicalHeaders).sort();\n    return request.method + \"\\n\" + this.getCanonicalPath(request) + \"\\n\" + getCanonicalQuery(request) + \"\\n\" + sortedHeaders.map(function (name) {\n      return name + \":\" + canonicalHeaders[name];\n    }).join(\"\\n\") + \"\\n\\n\" + sortedHeaders.join(\";\") + \"\\n\" + payloadHash;\n  };\n\n  SignatureV4.prototype.createStringToSign = function (longDate, credentialScope, canonicalRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hash, hashedRequest;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            hash = new this.sha256();\n            hash.update(canonicalRequest);\n            return [4\n            /*yield*/\n            , hash.digest()];\n\n          case 1:\n            hashedRequest = _a.sent();\n            return [2\n            /*return*/\n            , ALGORITHM_IDENTIFIER + \"\\n\" + longDate + \"\\n\" + credentialScope + \"\\n\" + toHex(hashedRequest)];\n        }\n      });\n    });\n  };\n\n  SignatureV4.prototype.getCanonicalPath = function (_a) {\n    var path = _a.path;\n\n    if (this.uriEscapePath) {\n      var doubleEncoded = encodeURIComponent(path.replace(/^\\//, \"\"));\n      return \"/\" + doubleEncoded.replace(/%2F/g, \"/\");\n    }\n\n    return path;\n  };\n\n  SignatureV4.prototype.getSignature = function (longDate, credentialScope, keyPromise, canonicalRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stringToSign, hash, _a, _b, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.createStringToSign(longDate, credentialScope, canonicalRequest)];\n\n          case 1:\n            stringToSign = _d.sent();\n            _b = (_a = this.sha256).bind;\n            return [4\n            /*yield*/\n            , keyPromise];\n\n          case 2:\n            hash = new (_b.apply(_a, [void 0, _d.sent()]))();\n            hash.update(stringToSign);\n            _c = toHex;\n            return [4\n            /*yield*/\n            , hash.digest()];\n\n          case 3:\n            return [2\n            /*return*/\n            , _c.apply(void 0, [_d.sent()])];\n        }\n      });\n    });\n  };\n\n  SignatureV4.prototype.getSigningKey = function (credentials, region, shortDate, service) {\n    return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n  };\n\n  return SignatureV4;\n}();\n\nexport { SignatureV4 };\n\nvar formatDate = function formatDate(now) {\n  var longDate = iso8601(now).replace(/[\\-:]/g, \"\");\n  return {\n    longDate: longDate,\n    shortDate: longDate.substr(0, 8)\n  };\n};\n\nvar getCanonicalHeaderList = function getCanonicalHeaderList(headers) {\n  return Object.keys(headers).sort().join(\";\");\n};\n\nvar normalizeRegionProvider = function normalizeRegionProvider(region) {\n  if (typeof region === \"string\") {\n    var promisified_1 = Promise.resolve(region);\n    return function () {\n      return promisified_1;\n    };\n  } else {\n    return region;\n  }\n};\n\nvar normalizeCredentialsProvider = function normalizeCredentialsProvider(credentials) {\n  if (typeof credentials === \"object\") {\n    var promisified_2 = Promise.resolve(credentials);\n    return function () {\n      return promisified_2;\n    };\n  } else {\n    return credentials;\n  }\n};","map":{"version":3,"sources":["../../src/SignatureV4.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Credentials,\n  DateInput,\n  EventSigner,\n  EventSigningArguments,\n  FormattedEvent,\n  HashConstructor,\n  HeaderBag,\n  HttpRequest,\n  Provider,\n  RequestPresigner,\n  RequestPresigningArguments,\n  RequestSigner,\n  RequestSigningArguments,\n  SigningArguments,\n  StringSigner,\n} from \"@aws-sdk/types\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\n\nimport {\n  ALGORITHM_IDENTIFIER,\n  ALGORITHM_QUERY_PARAM,\n  AMZ_DATE_HEADER,\n  AMZ_DATE_QUERY_PARAM,\n  AUTH_HEADER,\n  CREDENTIAL_QUERY_PARAM,\n  EVENT_ALGORITHM_IDENTIFIER,\n  EXPIRES_QUERY_PARAM,\n  MAX_PRESIGNED_TTL,\n  SHA256_HEADER,\n  SIGNATURE_QUERY_PARAM,\n  SIGNED_HEADERS_QUERY_PARAM,\n  TOKEN_HEADER,\n  TOKEN_QUERY_PARAM,\n} from \"./constants\";\nimport { createScope, getSigningKey } from \"./credentialDerivation\";\nimport { getCanonicalHeaders } from \"./getCanonicalHeaders\";\nimport { getCanonicalQuery } from \"./getCanonicalQuery\";\nimport { getPayloadHash } from \"./getPayloadHash\";\nimport { hasHeader } from \"./hasHeader\";\nimport { moveHeadersToQuery } from \"./moveHeadersToQuery\";\nimport { prepareRequest } from \"./prepareRequest\";\nimport { iso8601 } from \"./utilDate\";\n\nexport interface SignatureV4Init {\n  /**\n   * The service signing name.\n   */\n  service: string;\n\n  /**\n   * The region name or a function that returns a promise that will be\n   * resolved with the region name.\n   */\n  region: string | Provider<string>;\n\n  /**\n   * The credentials with which the request should be signed or a function\n   * that returns a promise that will be resolved with credentials.\n   */\n  credentials: Credentials | Provider<Credentials>;\n\n  /**\n   * A constructor function for a hash object that will calculate SHA-256 HMAC\n   * checksums.\n   */\n  sha256?: HashConstructor;\n\n  /**\n   * Whether to uri-escape the request URI path as part of computing the\n   * canonical request string. This is required for every AWS service, except\n   * Amazon S3, as of late 2017.\n   *\n   * @default [true]\n   */\n  uriEscapePath?: boolean;\n\n  /**\n   * Whether to calculate a checksum of the request body and include it as\n   * either a request header (when signing) or as a query string parameter\n   * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n   * every other AWS service as of late 2017.\n   *\n   * @default [true]\n   */\n  applyChecksum?: boolean;\n}\n\nexport interface SignatureV4CryptoInit {\n  sha256: HashConstructor;\n}\n\nexport class SignatureV4 implements RequestPresigner, RequestSigner, StringSigner, EventSigner {\n  private readonly service: string;\n  private readonly regionProvider: Provider<string>;\n  private readonly credentialProvider: Provider<Credentials>;\n  private readonly sha256: HashConstructor;\n  private readonly uriEscapePath: boolean;\n  private readonly applyChecksum: boolean;\n\n  constructor({\n    applyChecksum,\n    credentials,\n    region,\n    service,\n    sha256,\n    uriEscapePath = true,\n  }: SignatureV4Init & SignatureV4CryptoInit) {\n    this.service = service;\n    this.sha256 = sha256;\n    this.uriEscapePath = uriEscapePath;\n    // default to true if applyChecksum isn't set\n    this.applyChecksum = typeof applyChecksum === \"boolean\" ? applyChecksum : true;\n    this.regionProvider = normalizeRegionProvider(region);\n    this.credentialProvider = normalizeCredentialsProvider(credentials);\n  }\n\n  public async presign(originalRequest: HttpRequest, options: RequestPresigningArguments = {}): Promise<HttpRequest> {\n    const {\n      signingDate = new Date(),\n      expiresIn = 3600,\n      unsignableHeaders,\n      unhoistableHeaders,\n      signableHeaders,\n      signingRegion,\n      signingService,\n    } = options;\n    const credentials = await this.credentialProvider();\n    const region = signingRegion ?? (await this.regionProvider());\n\n    const { longDate, shortDate } = formatDate(signingDate);\n    if (expiresIn > MAX_PRESIGNED_TTL) {\n      return Promise.reject(\n        \"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\"\n      );\n    }\n\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n    const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });\n\n    if (credentials.sessionToken) {\n      request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n    }\n    request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n    request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n    request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n    request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n\n    const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n    request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);\n\n    request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(\n      longDate,\n      scope,\n      this.getSigningKey(credentials, region, shortDate, signingService),\n      this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256))\n    );\n\n    return request;\n  }\n\n  public async sign(stringToSign: string, options?: SigningArguments): Promise<string>;\n  public async sign(event: FormattedEvent, options: EventSigningArguments): Promise<string>;\n  public async sign(requestToSign: HttpRequest, options?: RequestSigningArguments): Promise<HttpRequest>;\n  public async sign(toSign: any, options: any): Promise<any> {\n    if (typeof toSign === \"string\") {\n      return this.signString(toSign, options);\n    } else if (toSign.headers && toSign.payload) {\n      return this.signEvent(toSign, options);\n    } else {\n      return this.signRequest(toSign, options);\n    }\n  }\n\n  private async signEvent(\n    { headers, payload }: FormattedEvent,\n    { signingDate = new Date(), priorSignature, signingRegion, signingService }: EventSigningArguments\n  ): Promise<string> {\n    const region = signingRegion ?? (await this.regionProvider());\n    const { shortDate, longDate } = formatDate(signingDate);\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n    const hashedPayload = await getPayloadHash({ headers: {}, body: payload } as any, this.sha256);\n    const hash = new this.sha256();\n    hash.update(headers);\n    const hashedHeaders = toHex(await hash.digest());\n    const stringToSign = [\n      EVENT_ALGORITHM_IDENTIFIER,\n      longDate,\n      scope,\n      priorSignature,\n      hashedHeaders,\n      hashedPayload,\n    ].join(\"\\n\");\n    return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });\n  }\n\n  private async signString(\n    stringToSign: string,\n    { signingDate = new Date(), signingRegion, signingService }: SigningArguments = {}\n  ): Promise<string> {\n    const credentials = await this.credentialProvider();\n    const region = signingRegion ?? (await this.regionProvider());\n    const { shortDate } = formatDate(signingDate);\n\n    const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));\n    hash.update(stringToSign);\n    return toHex(await hash.digest());\n  }\n\n  private async signRequest(\n    requestToSign: HttpRequest,\n    {\n      signingDate = new Date(),\n      signableHeaders,\n      unsignableHeaders,\n      signingRegion,\n      signingService,\n    }: RequestSigningArguments = {}\n  ): Promise<HttpRequest> {\n    const credentials = await this.credentialProvider();\n    const region = signingRegion ?? (await this.regionProvider());\n    const request = prepareRequest(requestToSign);\n    const { longDate, shortDate } = formatDate(signingDate);\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n\n    request.headers[AMZ_DATE_HEADER] = longDate;\n    if (credentials.sessionToken) {\n      request.headers[TOKEN_HEADER] = credentials.sessionToken;\n    }\n\n    const payloadHash = await getPayloadHash(request, this.sha256);\n    if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n      request.headers[SHA256_HEADER] = payloadHash;\n    }\n\n    const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n    const signature = await this.getSignature(\n      longDate,\n      scope,\n      this.getSigningKey(credentials, region, shortDate, signingService),\n      this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n    );\n\n    request.headers[AUTH_HEADER] =\n      `${ALGORITHM_IDENTIFIER} ` +\n      `Credential=${credentials.accessKeyId}/${scope}, ` +\n      `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` +\n      `Signature=${signature}`;\n\n    return request;\n  }\n\n  private createCanonicalRequest(request: HttpRequest, canonicalHeaders: HeaderBag, payloadHash: string): string {\n    const sortedHeaders = Object.keys(canonicalHeaders).sort();\n    return `${request.method}\n${this.getCanonicalPath(request)}\n${getCanonicalQuery(request)}\n${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join(\"\\n\")}\n\n${sortedHeaders.join(\";\")}\n${payloadHash}`;\n  }\n\n  private async createStringToSign(\n    longDate: string,\n    credentialScope: string,\n    canonicalRequest: string\n  ): Promise<string> {\n    const hash = new this.sha256();\n    hash.update(canonicalRequest);\n    const hashedRequest = await hash.digest();\n\n    return `${ALGORITHM_IDENTIFIER}\n${longDate}\n${credentialScope}\n${toHex(hashedRequest)}`;\n  }\n\n  private getCanonicalPath({ path }: HttpRequest): string {\n    if (this.uriEscapePath) {\n      const doubleEncoded = encodeURIComponent(path.replace(/^\\//, \"\"));\n      return `/${doubleEncoded.replace(/%2F/g, \"/\")}`;\n    }\n\n    return path;\n  }\n\n  private async getSignature(\n    longDate: string,\n    credentialScope: string,\n    keyPromise: Promise<Uint8Array>,\n    canonicalRequest: string\n  ): Promise<string> {\n    const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);\n\n    const hash = new this.sha256(await keyPromise);\n    hash.update(stringToSign);\n    return toHex(await hash.digest());\n  }\n\n  private getSigningKey(\n    credentials: Credentials,\n    region: string,\n    shortDate: string,\n    service?: string\n  ): Promise<Uint8Array> {\n    return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n  }\n}\n\nconst formatDate = (now: DateInput): { longDate: string; shortDate: string } => {\n  const longDate = iso8601(now).replace(/[\\-:]/g, \"\");\n  return {\n    longDate,\n    shortDate: longDate.substr(0, 8),\n  };\n};\n\nconst getCanonicalHeaderList = (headers: object): string => Object.keys(headers).sort().join(\";\");\n\nconst normalizeRegionProvider = (region: string | Provider<string>): Provider<string> => {\n  if (typeof region === \"string\") {\n    const promisified = Promise.resolve(region);\n    return () => promisified;\n  } else {\n    return region;\n  }\n};\n\nconst normalizeCredentialsProvider = (credentials: Credentials | Provider<Credentials>): Provider<Credentials> => {\n  if (typeof credentials === \"object\") {\n    const promisified = Promise.resolve(credentials);\n    return () => promisified;\n  } else {\n    return credentials;\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}