{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ListMultipartUploadsOutput, ListMultipartUploadsRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlListMultipartUploadsCommand, serializeAws_restXmlListMultipartUploadsCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>This operation lists in-progress multipart uploads. An in-progress multipart upload is a\n *          multipart upload that has been initiated using the Initiate Multipart Upload request, but\n *          has not yet been completed or aborted.</p>\n *\n *          <p>This operation returns at most 1,000 multipart uploads in the response. 1,000 multipart\n *          uploads is the maximum number of uploads a response can include, which is also the default\n *          value. You can further limit the number of uploads in a response by specifying the\n *             <code>max-uploads</code> parameter in the response. If additional multipart uploads\n *          satisfy the list criteria, the response will contain an <code>IsTruncated</code> element\n *          with the value true. To list the additional multipart uploads, use the\n *             <code>key-marker</code> and <code>upload-id-marker</code> request parameters.</p>\n *\n *          <p>In the response, the uploads are sorted by key. If your application has initiated more\n *          than one multipart upload using the same object key, then uploads in the response are first\n *          sorted by key. Additionally, uploads are sorted in ascending order within each key by the\n *          upload initiation time.</p>\n *\n *          <p>For more information on multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html\">Uploading Objects Using Multipart\n *             Upload</a>.</p>\n *\n *          <p>For information on permissions required to use the multipart upload API, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html\">Multipart Upload API and\n *          Permissions</a>.</p>\n *\n *          <p>The following operations are related to <code>ListMultipartUploads</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html\">ListParts</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html\">AbortMultipartUpload</a>\n *                </p>\n *             </li>\n *          </ul>\n */\n\nvar ListMultipartUploadsCommand =\n/** @class */\nfunction (_super) {\n  __extends(ListMultipartUploadsCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function ListMultipartUploadsCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  ListMultipartUploadsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"ListMultipartUploadsCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: ListMultipartUploadsRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: ListMultipartUploadsOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  ListMultipartUploadsCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlListMultipartUploadsCommand(input, context);\n  };\n\n  ListMultipartUploadsCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlListMultipartUploadsCommand(output, context);\n  };\n\n  return ListMultipartUploadsCommand;\n}($Command);\n\nexport { ListMultipartUploadsCommand };","map":{"version":3,"sources":["../../../commands/ListMultipartUploadsCommand.ts"],"names":[],"mappings":";AACA,SAAS,0BAAT,EAAqC,2BAArC,QAAwE,oBAAxE;AACA,SACE,iDADF,EAEE,+CAFF,QAGO,0BAHP;AAIA,SAAS,uBAAT,QAAwC,qCAAxC;AACA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDG;;AACH,IAAA,2BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiD,EAAA,SAAA,CAAA,2BAAA,EAAA,MAAA,CAAA,CAAjD,CAKE;AACA;;;AAEA,WAAA,2BAAA,CAAqB,KAArB,EAA4D;AAA5D,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAAuC,CAG1D;AACD;AAED;;AAEG;;;AACH,EAAA,2BAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AACA,SAAK,eAAL,CAAqB,GAArB,CAAyB,uBAAuB,CAAC,aAAD,CAAhD;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,UAAnB;AACA,QAAM,WAAW,GAAG,6BAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,2BAA2B,CAAC,kBAJE;AAKvD,MAAA,wBAAwB,EAAE,0BAA0B,CAAC;AALE,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GA1BD;;AA4BQ,EAAA,2BAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAA2D,OAA3D,EAAkF;AAChF,WAAO,+CAA+C,CAAC,KAAD,EAAQ,OAAR,CAAtD;AACD,GAFO;;AAIA,EAAA,2BAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,iDAAiD,CAAC,MAAD,EAAS,OAAT,CAAxD;AACD,GAFO;;AAMV,SAAA,2BAAA;AAAC,CAvDD,CAAiD,QAAjD,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { ListMultipartUploadsOutput, ListMultipartUploadsRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlListMultipartUploadsCommand, serializeAws_restXmlListMultipartUploadsCommand, } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>This operation lists in-progress multipart uploads. An in-progress multipart upload is a\n *          multipart upload that has been initiated using the Initiate Multipart Upload request, but\n *          has not yet been completed or aborted.</p>\n *\n *          <p>This operation returns at most 1,000 multipart uploads in the response. 1,000 multipart\n *          uploads is the maximum number of uploads a response can include, which is also the default\n *          value. You can further limit the number of uploads in a response by specifying the\n *             <code>max-uploads</code> parameter in the response. If additional multipart uploads\n *          satisfy the list criteria, the response will contain an <code>IsTruncated</code> element\n *          with the value true. To list the additional multipart uploads, use the\n *             <code>key-marker</code> and <code>upload-id-marker</code> request parameters.</p>\n *\n *          <p>In the response, the uploads are sorted by key. If your application has initiated more\n *          than one multipart upload using the same object key, then uploads in the response are first\n *          sorted by key. Additionally, uploads are sorted in ascending order within each key by the\n *          upload initiation time.</p>\n *\n *          <p>For more information on multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html\">Uploading Objects Using Multipart\n *             Upload</a>.</p>\n *\n *          <p>For information on permissions required to use the multipart upload API, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html\">Multipart Upload API and\n *          Permissions</a>.</p>\n *\n *          <p>The following operations are related to <code>ListMultipartUploads</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html\">ListParts</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html\">AbortMultipartUpload</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nvar ListMultipartUploadsCommand = /** @class */ (function (_super) {\n    __extends(ListMultipartUploadsCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function ListMultipartUploadsCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    ListMultipartUploadsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"S3Client\";\n        var commandName = \"ListMultipartUploadsCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: ListMultipartUploadsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: ListMultipartUploadsOutput.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    ListMultipartUploadsCommand.prototype.serialize = function (input, context) {\n        return serializeAws_restXmlListMultipartUploadsCommand(input, context);\n    };\n    ListMultipartUploadsCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_restXmlListMultipartUploadsCommand(output, context);\n    };\n    return ListMultipartUploadsCommand;\n}($Command));\nexport { ListMultipartUploadsCommand };\n//# sourceMappingURL=ListMultipartUploadsCommand.js.map"]},"metadata":{},"sourceType":"module"}