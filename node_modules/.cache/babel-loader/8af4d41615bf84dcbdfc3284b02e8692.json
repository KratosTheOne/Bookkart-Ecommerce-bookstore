{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport Storage from '@aws-amplify/storage';\nimport { AbstractIdentifyPredictionsProvider } from '../types/Providers';\nimport { RekognitionClient, SearchFacesByImageCommand, DetectTextCommand, DetectLabelsCommand, DetectFacesCommand, DetectModerationLabelsCommand, RecognizeCelebritiesCommand } from '@aws-sdk/client-rekognition';\nimport { isStorageSource, isFileSource, isBytesSource, isIdentifyCelebrities, isIdentifyFromCollection } from '../types';\nimport { TextractClient, DetectDocumentTextCommand, AnalyzeDocumentCommand } from '@aws-sdk/client-textract';\nimport { makeCamelCase, makeCamelCaseArray, blobToArrayBuffer } from './Utils';\nimport { categorizeRekognitionBlocks, categorizeTextractBlocks } from './IdentifyTextUtils';\n\nvar AmazonAIIdentifyPredictionsProvider =\n/** @class */\nfunction (_super) {\n  __extends(AmazonAIIdentifyPredictionsProvider, _super);\n\n  function AmazonAIIdentifyPredictionsProvider() {\n    return _super.call(this) || this;\n  }\n\n  AmazonAIIdentifyPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIIdentifyPredictionsProvider';\n  };\n  /**\n   * Verify user input source and converts it into source object readable by Rekognition and Textract.\n   * Note that Rekognition and Textract use the same source interface, so we need not worry about types.\n   * @param {IdentifySource} source - User input source that directs to the object user wants\n   * to identify (storage, file, or bytes).\n   * @return {Promise<Image>} - Promise resolving to the converted source object.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.configureSource = function (source) {\n    return new Promise(function (res, rej) {\n      if (isStorageSource(source)) {\n        var storageConfig = {\n          level: source.level,\n          identityId: source.identityId\n        };\n        Storage.get(source.key, storageConfig).then(function (url) {\n          var parser = /https:\\/\\/([a-zA-Z0-9%-_.]+)\\.s3\\.[A-Za-z0-9%-._~]+\\/([a-zA-Z0-9%-._~/]+)\\?/;\n          var parsedURL = url.match(parser);\n          if (parsedURL.length < 3) rej('Invalid S3 key was given.');\n          res({\n            S3Object: {\n              Bucket: parsedURL[1],\n              Name: decodeURIComponent(parsedURL[2])\n            }\n          });\n        }).catch(function (err) {\n          return rej(err);\n        });\n      } else if (isFileSource(source)) {\n        blobToArrayBuffer(source.file).then(function (buffer) {\n          res({\n            Bytes: new Uint8Array(buffer)\n          });\n        }).catch(function (err) {\n          return rej(err);\n        });\n      } else if (isBytesSource(source)) {\n        var bytes = source.bytes;\n\n        if (bytes instanceof Blob) {\n          blobToArrayBuffer(bytes).then(function (buffer) {\n            res({\n              Bytes: new Uint8Array(buffer)\n            });\n          }).catch(function (err) {\n            return rej(err);\n          });\n        }\n\n        if (bytes instanceof ArrayBuffer || bytes instanceof Buffer) {\n          res({\n            Bytes: new Uint8Array(bytes)\n          });\n        } // everything else can be directly passed to Rekognition / Textract.\n\n\n        res({\n          Bytes: bytes\n        });\n      } else {\n        rej('Input source is not configured correctly.');\n      }\n    });\n  };\n  /**\n   * Recognize text from real-world images and documents (plain text, forms and tables). Detects text in the input\n   * image and converts it into machine-readable text.\n   * @param {IdentifySource} source - Object containing the source image and feature types to analyze.\n   * @return {Promise<IdentifyTextOutput>} - Promise resolving to object containing identified texts.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyText = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, region, _d, _e, configFormat, inputDocument, err_1, format, featureTypes, textractParam, rekognitionParam, detectTextCommand, rekognitionData, rekognitionResponse, detectDocumentTextCommand, Blocks, err_2, param, analyzeDocumentCommand, Blocks, err_3;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _f.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n            _a = this._config.identifyText, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).format, configFormat = _e === void 0 ? 'PLAIN' : _e;\n            this.rekognitionClient = new RekognitionClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            this.textractClient = new TextractClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            _f.label = 2;\n\n          case 2:\n            _f.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this.configureSource(input.text.source)];\n\n          case 3:\n            inputDocument = _f.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            err_1 = _f.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_1)];\n\n          case 5:\n            format = input.text.format || configFormat;\n            featureTypes = [];\n            if (format === 'FORM' || format === 'ALL') featureTypes.push('FORMS');\n            if (format === 'TABLE' || format === 'ALL') featureTypes.push('TABLES');\n            if (!(featureTypes.length === 0)) return [3\n            /*break*/\n            , 11];\n            textractParam = {\n              Document: inputDocument\n            };\n            rekognitionParam = {\n              Image: inputDocument\n            };\n            _f.label = 6;\n\n          case 6:\n            _f.trys.push([6, 9,, 10]);\n\n            detectTextCommand = new DetectTextCommand(rekognitionParam);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(detectTextCommand)];\n\n          case 7:\n            rekognitionData = _f.sent();\n            rekognitionResponse = categorizeRekognitionBlocks(rekognitionData.TextDetections);\n\n            if (rekognitionResponse.text.words.length < 50) {\n              // did not hit the word limit, return the data\n              return [2\n              /*return*/\n              , rekognitionResponse];\n            }\n\n            detectDocumentTextCommand = new DetectDocumentTextCommand(textractParam);\n            return [4\n            /*yield*/\n            , this.textractClient.send(detectDocumentTextCommand)];\n\n          case 8:\n            Blocks = _f.sent().Blocks;\n\n            if (rekognitionData.TextDetections.length > Blocks.length) {\n              return [2\n              /*return*/\n              , rekognitionResponse];\n            }\n\n            return [2\n            /*return*/\n            , categorizeTextractBlocks(Blocks)];\n\n          case 9:\n            err_2 = _f.sent();\n            Promise.reject(err_2);\n            return [3\n            /*break*/\n            , 10];\n\n          case 10:\n            return [3\n            /*break*/\n            , 15];\n\n          case 11:\n            param = {\n              Document: inputDocument,\n              FeatureTypes: featureTypes\n            };\n            _f.label = 12;\n\n          case 12:\n            _f.trys.push([12, 14,, 15]);\n\n            analyzeDocumentCommand = new AnalyzeDocumentCommand(param);\n            return [4\n            /*yield*/\n            , this.textractClient.send(analyzeDocumentCommand)];\n\n          case 13:\n            Blocks = _f.sent().Blocks;\n            return [2\n            /*return*/\n            , categorizeTextractBlocks(Blocks)];\n\n          case 14:\n            err_3 = _f.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_3)];\n\n          case 15:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Identify instances of real world entities from an image and if it contains unsafe content.\n   * @param {IdentifyLabelsInput} input - Object containing the source image and entity type to identify.\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to an array of identified entities.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyLabels = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, region, _d, _e, type, inputImage_1, param, servicePromises, entityType, err_4;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            _f.trys.push([0, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _f.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n            _a = this._config.identifyLabels, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).type, type = _e === void 0 ? 'LABELS' : _e;\n            this.rekognitionClient = new RekognitionClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            return [4\n            /*yield*/\n            , this.configureSource(input.labels.source).then(function (data) {\n              inputImage_1 = data;\n            }).catch(function (err) {\n              return Promise.reject(err);\n            })];\n\n          case 2:\n            _f.sent();\n\n            param = {\n              Image: inputImage_1\n            };\n            servicePromises = [];\n            entityType = input.labels.type || type;\n\n            if (entityType === 'LABELS' || entityType === 'ALL') {\n              servicePromises.push(this.detectLabels(param));\n            }\n\n            if (entityType === 'UNSAFE' || entityType === 'ALL') {\n              servicePromises.push(this.detectModerationLabels(param));\n            }\n\n            return [2\n            /*return*/\n            , Promise.all(servicePromises).then(function (data) {\n              var identifyResult = {}; // concatenate resolved promises to a single object\n\n              data.forEach(function (val) {\n                identifyResult = __assign(__assign({}, identifyResult), val);\n              });\n              return identifyResult;\n            }).catch(function (err) {\n              return Promise.reject(err);\n            })];\n\n          case 3:\n            err_4 = _f.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_4)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Calls Rekognition.detectLabels and organizes the returned data.\n   * @param {DetectLabelsInput} param - parameter to be passed onto Rekognition\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectLabels response.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.detectLabels = function (param) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectLabelsCommand, data, detectLabelData, err_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            detectLabelsCommand = new DetectLabelsCommand(param);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(detectLabelsCommand)];\n\n          case 1:\n            data = _a.sent();\n            if (!data.Labels) return [2\n            /*return*/\n            , {\n              labels: null\n            }]; // no image was detected\n\n            detectLabelData = data.Labels.map(function (val) {\n              var boxes = val.Instances ? val.Instances.map(function (val) {\n                return makeCamelCase(val.BoundingBox);\n              }) : undefined;\n              return {\n                name: val.Name,\n                boundingBoxes: boxes,\n                metadata: {\n                  confidence: val.Confidence,\n                  parents: makeCamelCaseArray(val.Parents)\n                }\n              };\n            });\n            return [2\n            /*return*/\n            , {\n              labels: detectLabelData\n            }];\n\n          case 2:\n            err_5 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_5)];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Calls Rekognition.detectModerationLabels and organizes the returned data.\n   * @param {Rekognition.DetectLabelsRequest} param - Parameter to be passed onto Rekognition\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectModerationLabels response.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.detectModerationLabels = function (param) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectModerationLabelsCommand, data, err_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            detectModerationLabelsCommand = new DetectModerationLabelsCommand(param);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(detectModerationLabelsCommand)];\n\n          case 1:\n            data = _a.sent();\n\n            if (data.ModerationLabels.length !== 0) {\n              return [2\n              /*return*/\n              , {\n                unsafe: 'YES'\n              }];\n            } else {\n              return [2\n              /*return*/\n              , {\n                unsafe: 'NO'\n              }];\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            err_6 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_6)];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Identify faces within an image that is provided as input, and match faces from a collection\n   * or identify celebrities.\n   * @param {IdentifyEntityInput} input - object containing the source image and face match options.\n   * @return {Promise<IdentifyEntityOutput>} Promise resolving to identify results.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyEntities = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, region, _d, celebrityDetectionEnabled, _e, _f, _g, collectionIdConfig, _h, maxFacesConfig, inputImage, param, recognizeCelebritiesCommand, data, faces, err_7, _j, _k, collectionId, _l, maxFaces, updatedParam, searchFacesByImageCommand, data, faces, err_8, detectFacesCommand, data, faces, err_9;\n\n      var _this = this;\n\n      return __generator(this, function (_m) {\n        switch (_m.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _m.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n            _a = this._config.identifyEntities, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.celebrityDetectionEnabled, celebrityDetectionEnabled = _d === void 0 ? false : _d, _e = _b.defaults, _f = _e === void 0 ? {} : _e, _g = _f.collectionId, collectionIdConfig = _g === void 0 ? '' : _g, _h = _f.maxEntities, maxFacesConfig = _h === void 0 ? 50 : _h; // default arguments\n\n            this.rekognitionClient = new RekognitionClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            return [4\n            /*yield*/\n            , this.configureSource(input.entities.source).then(function (data) {\n              return inputImage = data;\n            }).catch(function (err) {\n              return Promise.reject(err);\n            })];\n\n          case 2:\n            _m.sent();\n\n            param = {\n              Image: inputImage\n            };\n            if (!(isIdentifyCelebrities(input.entities) && input.entities.celebrityDetection)) return [3\n            /*break*/\n            , 7];\n\n            if (!celebrityDetectionEnabled) {\n              return [2\n              /*return*/\n              , Promise.reject('Error: You have to enable celebrity detection first')];\n            }\n\n            _m.label = 3;\n\n          case 3:\n            _m.trys.push([3, 5,, 6]);\n\n            recognizeCelebritiesCommand = new RecognizeCelebritiesCommand(param);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(recognizeCelebritiesCommand)];\n\n          case 4:\n            data = _m.sent();\n            faces = data.CelebrityFaces.map(function (celebrity) {\n              return {\n                boundingBox: makeCamelCase(celebrity.Face.BoundingBox),\n                landmarks: makeCamelCaseArray(celebrity.Face.Landmarks),\n                metadata: __assign(__assign({}, makeCamelCase(celebrity, ['Id', 'Name', 'Urls'])), {\n                  pose: makeCamelCase(celebrity.Face.Pose)\n                })\n              };\n            });\n            return [2\n            /*return*/\n            , {\n              entities: faces\n            }];\n\n          case 5:\n            err_7 = _m.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_7)];\n\n          case 6:\n            return [3\n            /*break*/\n            , 15];\n\n          case 7:\n            if (!(isIdentifyFromCollection(input.entities) && input.entities.collection)) return [3\n            /*break*/\n            , 12];\n            _j = input.entities, _k = _j.collectionId, collectionId = _k === void 0 ? collectionIdConfig : _k, _l = _j.maxEntities, maxFaces = _l === void 0 ? maxFacesConfig : _l;\n            updatedParam = __assign(__assign({}, param), {\n              CollectionId: collectionId,\n              MaxFaces: maxFaces\n            });\n            _m.label = 8;\n\n          case 8:\n            _m.trys.push([8, 10,, 11]);\n\n            searchFacesByImageCommand = new SearchFacesByImageCommand(updatedParam);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(searchFacesByImageCommand)];\n\n          case 9:\n            data = _m.sent();\n            faces = data.FaceMatches.map(function (val) {\n              return {\n                boundingBox: makeCamelCase(val.Face.BoundingBox),\n                metadata: {\n                  externalImageId: _this.decodeExternalImageId(val.Face.ExternalImageId),\n                  similarity: val.Similarity\n                }\n              };\n            });\n            return [2\n            /*return*/\n            , {\n              entities: faces\n            }];\n\n          case 10:\n            err_8 = _m.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_8)];\n\n          case 11:\n            return [3\n            /*break*/\n            , 15];\n\n          case 12:\n            _m.trys.push([12, 14,, 15]);\n\n            detectFacesCommand = new DetectFacesCommand(param);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(detectFacesCommand)];\n\n          case 13:\n            data = _m.sent();\n            faces = data.FaceDetails.map(function (detail) {\n              // face attributes keys we want to extract from Rekognition's response\n              var attributeKeys = ['Smile', 'Eyeglasses', 'Sunglasses', 'Gender', 'Beard', 'Mustache', 'EyesOpen', 'MouthOpen'];\n              var faceAttributes = makeCamelCase(detail, attributeKeys);\n\n              if (detail.Emotions) {\n                faceAttributes['emotions'] = detail.Emotions.map(function (emotion) {\n                  return emotion.Type;\n                });\n              }\n\n              return {\n                boundingBox: makeCamelCase(detail.BoundingBox),\n                landmarks: makeCamelCaseArray(detail.Landmarks),\n                ageRange: makeCamelCase(detail.AgeRange),\n                attributes: makeCamelCase(detail, attributeKeys),\n                metadata: {\n                  confidence: detail.Confidence,\n                  pose: makeCamelCase(detail.Pose)\n                }\n              };\n            });\n            return [2\n            /*return*/\n            , {\n              entities: faces\n            }];\n\n          case 14:\n            err_9 = _m.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_9)];\n\n          case 15:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonAIIdentifyPredictionsProvider.prototype.decodeExternalImageId = function (externalImageId) {\n    return ('' + externalImageId).replace(/::/g, '/');\n  };\n\n  return AmazonAIIdentifyPredictionsProvider;\n}(AbstractIdentifyPredictionsProvider);\n\nexport { AmazonAIIdentifyPredictionsProvider };\n/**\n * @deprecated use named import\n */\n\nexport default AmazonAIIdentifyPredictionsProvider;","map":{"version":3,"sources":["../../src/Providers/AmazonAIIdentifyPredictionsProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { Credentials, getAmplifyUserAgent, } from '@aws-amplify/core';\nimport Storage from '@aws-amplify/storage';\nimport { AbstractIdentifyPredictionsProvider } from '../types/Providers';\nimport { RekognitionClient, SearchFacesByImageCommand, DetectTextCommand, DetectLabelsCommand, DetectFacesCommand, DetectModerationLabelsCommand, RecognizeCelebritiesCommand, } from '@aws-sdk/client-rekognition';\nimport { isStorageSource, isFileSource, isBytesSource, isIdentifyCelebrities, isIdentifyFromCollection, } from '../types';\nimport { TextractClient, DetectDocumentTextCommand, AnalyzeDocumentCommand, } from '@aws-sdk/client-textract';\nimport { makeCamelCase, makeCamelCaseArray, blobToArrayBuffer } from './Utils';\nimport { categorizeRekognitionBlocks, categorizeTextractBlocks, } from './IdentifyTextUtils';\nvar AmazonAIIdentifyPredictionsProvider = /** @class */ (function (_super) {\n    __extends(AmazonAIIdentifyPredictionsProvider, _super);\n    function AmazonAIIdentifyPredictionsProvider() {\n        return _super.call(this) || this;\n    }\n    AmazonAIIdentifyPredictionsProvider.prototype.getProviderName = function () {\n        return 'AmazonAIIdentifyPredictionsProvider';\n    };\n    /**\n     * Verify user input source and converts it into source object readable by Rekognition and Textract.\n     * Note that Rekognition and Textract use the same source interface, so we need not worry about types.\n     * @param {IdentifySource} source - User input source that directs to the object user wants\n     * to identify (storage, file, or bytes).\n     * @return {Promise<Image>} - Promise resolving to the converted source object.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.configureSource = function (source) {\n        return new Promise(function (res, rej) {\n            if (isStorageSource(source)) {\n                var storageConfig = {\n                    level: source.level,\n                    identityId: source.identityId,\n                };\n                Storage.get(source.key, storageConfig)\n                    .then(function (url) {\n                    var parser = /https:\\/\\/([a-zA-Z0-9%-_.]+)\\.s3\\.[A-Za-z0-9%-._~]+\\/([a-zA-Z0-9%-._~/]+)\\?/;\n                    var parsedURL = url.match(parser);\n                    if (parsedURL.length < 3)\n                        rej('Invalid S3 key was given.');\n                    res({\n                        S3Object: {\n                            Bucket: parsedURL[1],\n                            Name: decodeURIComponent(parsedURL[2]),\n                        },\n                    });\n                })\n                    .catch(function (err) { return rej(err); });\n            }\n            else if (isFileSource(source)) {\n                blobToArrayBuffer(source.file)\n                    .then(function (buffer) {\n                    res({ Bytes: new Uint8Array(buffer) });\n                })\n                    .catch(function (err) { return rej(err); });\n            }\n            else if (isBytesSource(source)) {\n                var bytes = source.bytes;\n                if (bytes instanceof Blob) {\n                    blobToArrayBuffer(bytes)\n                        .then(function (buffer) {\n                        res({ Bytes: new Uint8Array(buffer) });\n                    })\n                        .catch(function (err) { return rej(err); });\n                }\n                if (bytes instanceof ArrayBuffer || bytes instanceof Buffer) {\n                    res({ Bytes: new Uint8Array(bytes) });\n                }\n                // everything else can be directly passed to Rekognition / Textract.\n                res({ Bytes: bytes });\n            }\n            else {\n                rej('Input source is not configured correctly.');\n            }\n        });\n    };\n    /**\n     * Recognize text from real-world images and documents (plain text, forms and tables). Detects text in the input\n     * image and converts it into machine-readable text.\n     * @param {IdentifySource} source - Object containing the source image and feature types to analyze.\n     * @return {Promise<IdentifyTextOutput>} - Promise resolving to object containing identified texts.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.identifyText = function (input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, region, _d, _e, configFormat, inputDocument, err_1, format, featureTypes, textractParam, rekognitionParam, detectTextCommand, rekognitionData, rekognitionResponse, detectDocumentTextCommand, Blocks, err_2, param, analyzeDocumentCommand, Blocks, err_3;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0: return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _f.sent();\n                        if (!credentials)\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        _a = this._config.identifyText, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).format, configFormat = _e === void 0 ? 'PLAIN' : _e;\n                        this.rekognitionClient = new RekognitionClient({\n                            region: region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        this.textractClient = new TextractClient({\n                            region: region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        _f.label = 2;\n                    case 2:\n                        _f.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, this.configureSource(input.text.source)];\n                    case 3:\n                        inputDocument = _f.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_1 = _f.sent();\n                        return [2 /*return*/, Promise.reject(err_1)];\n                    case 5:\n                        format = input.text.format || configFormat;\n                        featureTypes = [];\n                        if (format === 'FORM' || format === 'ALL')\n                            featureTypes.push('FORMS');\n                        if (format === 'TABLE' || format === 'ALL')\n                            featureTypes.push('TABLES');\n                        if (!(featureTypes.length === 0)) return [3 /*break*/, 11];\n                        textractParam = {\n                            Document: inputDocument,\n                        };\n                        rekognitionParam = {\n                            Image: inputDocument,\n                        };\n                        _f.label = 6;\n                    case 6:\n                        _f.trys.push([6, 9, , 10]);\n                        detectTextCommand = new DetectTextCommand(rekognitionParam);\n                        return [4 /*yield*/, this.rekognitionClient.send(detectTextCommand)];\n                    case 7:\n                        rekognitionData = _f.sent();\n                        rekognitionResponse = categorizeRekognitionBlocks(rekognitionData.TextDetections);\n                        if (rekognitionResponse.text.words.length < 50) {\n                            // did not hit the word limit, return the data\n                            return [2 /*return*/, rekognitionResponse];\n                        }\n                        detectDocumentTextCommand = new DetectDocumentTextCommand(textractParam);\n                        return [4 /*yield*/, this.textractClient.send(detectDocumentTextCommand)];\n                    case 8:\n                        Blocks = (_f.sent()).Blocks;\n                        if (rekognitionData.TextDetections.length > Blocks.length) {\n                            return [2 /*return*/, rekognitionResponse];\n                        }\n                        return [2 /*return*/, categorizeTextractBlocks(Blocks)];\n                    case 9:\n                        err_2 = _f.sent();\n                        Promise.reject(err_2);\n                        return [3 /*break*/, 10];\n                    case 10: return [3 /*break*/, 15];\n                    case 11:\n                        param = {\n                            Document: inputDocument,\n                            FeatureTypes: featureTypes,\n                        };\n                        _f.label = 12;\n                    case 12:\n                        _f.trys.push([12, 14, , 15]);\n                        analyzeDocumentCommand = new AnalyzeDocumentCommand(param);\n                        return [4 /*yield*/, this.textractClient.send(analyzeDocumentCommand)];\n                    case 13:\n                        Blocks = (_f.sent()).Blocks;\n                        return [2 /*return*/, categorizeTextractBlocks(Blocks)];\n                    case 14:\n                        err_3 = _f.sent();\n                        return [2 /*return*/, Promise.reject(err_3)];\n                    case 15: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Identify instances of real world entities from an image and if it contains unsafe content.\n     * @param {IdentifyLabelsInput} input - Object containing the source image and entity type to identify.\n     * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to an array of identified entities.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.identifyLabels = function (input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, region, _d, _e, type, inputImage_1, param, servicePromises, entityType, err_4;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        _f.trys.push([0, 3, , 4]);\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _f.sent();\n                        if (!credentials)\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        _a = this._config.identifyLabels, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).type, type = _e === void 0 ? 'LABELS' : _e;\n                        this.rekognitionClient = new RekognitionClient({\n                            region: region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        return [4 /*yield*/, this.configureSource(input.labels.source)\n                                .then(function (data) {\n                                inputImage_1 = data;\n                            })\n                                .catch(function (err) {\n                                return Promise.reject(err);\n                            })];\n                    case 2:\n                        _f.sent();\n                        param = { Image: inputImage_1 };\n                        servicePromises = [];\n                        entityType = input.labels.type || type;\n                        if (entityType === 'LABELS' || entityType === 'ALL') {\n                            servicePromises.push(this.detectLabels(param));\n                        }\n                        if (entityType === 'UNSAFE' || entityType === 'ALL') {\n                            servicePromises.push(this.detectModerationLabels(param));\n                        }\n                        return [2 /*return*/, Promise.all(servicePromises)\n                                .then(function (data) {\n                                var identifyResult = {};\n                                // concatenate resolved promises to a single object\n                                data.forEach(function (val) {\n                                    identifyResult = __assign(__assign({}, identifyResult), val);\n                                });\n                                return identifyResult;\n                            })\n                                .catch(function (err) { return Promise.reject(err); })];\n                    case 3:\n                        err_4 = _f.sent();\n                        return [2 /*return*/, Promise.reject(err_4)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Calls Rekognition.detectLabels and organizes the returned data.\n     * @param {DetectLabelsInput} param - parameter to be passed onto Rekognition\n     * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectLabels response.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.detectLabels = function (param) {\n        return __awaiter(this, void 0, void 0, function () {\n            var detectLabelsCommand, data, detectLabelData, err_5;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        detectLabelsCommand = new DetectLabelsCommand(param);\n                        return [4 /*yield*/, this.rekognitionClient.send(detectLabelsCommand)];\n                    case 1:\n                        data = _a.sent();\n                        if (!data.Labels)\n                            return [2 /*return*/, { labels: null }]; // no image was detected\n                        detectLabelData = data.Labels.map(function (val) {\n                            var boxes = val.Instances\n                                ? val.Instances.map(function (val) { return makeCamelCase(val.BoundingBox); })\n                                : undefined;\n                            return {\n                                name: val.Name,\n                                boundingBoxes: boxes,\n                                metadata: {\n                                    confidence: val.Confidence,\n                                    parents: makeCamelCaseArray(val.Parents),\n                                },\n                            };\n                        });\n                        return [2 /*return*/, { labels: detectLabelData }];\n                    case 2:\n                        err_5 = _a.sent();\n                        return [2 /*return*/, Promise.reject(err_5)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Calls Rekognition.detectModerationLabels and organizes the returned data.\n     * @param {Rekognition.DetectLabelsRequest} param - Parameter to be passed onto Rekognition\n     * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectModerationLabels response.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.detectModerationLabels = function (param) {\n        return __awaiter(this, void 0, void 0, function () {\n            var detectModerationLabelsCommand, data, err_6;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        detectModerationLabelsCommand = new DetectModerationLabelsCommand(param);\n                        return [4 /*yield*/, this.rekognitionClient.send(detectModerationLabelsCommand)];\n                    case 1:\n                        data = _a.sent();\n                        if (data.ModerationLabels.length !== 0) {\n                            return [2 /*return*/, { unsafe: 'YES' }];\n                        }\n                        else {\n                            return [2 /*return*/, { unsafe: 'NO' }];\n                        }\n                        return [3 /*break*/, 3];\n                    case 2:\n                        err_6 = _a.sent();\n                        return [2 /*return*/, Promise.reject(err_6)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Identify faces within an image that is provided as input, and match faces from a collection\n     * or identify celebrities.\n     * @param {IdentifyEntityInput} input - object containing the source image and face match options.\n     * @return {Promise<IdentifyEntityOutput>} Promise resolving to identify results.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.identifyEntities = function (input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, region, _d, celebrityDetectionEnabled, _e, _f, _g, collectionIdConfig, _h, maxFacesConfig, inputImage, param, recognizeCelebritiesCommand, data, faces, err_7, _j, _k, collectionId, _l, maxFaces, updatedParam, searchFacesByImageCommand, data, faces, err_8, detectFacesCommand, data, faces, err_9;\n            var _this = this;\n            return __generator(this, function (_m) {\n                switch (_m.label) {\n                    case 0: return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _m.sent();\n                        if (!credentials)\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        _a = this._config.identifyEntities, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.celebrityDetectionEnabled, celebrityDetectionEnabled = _d === void 0 ? false : _d, _e = _b.defaults, _f = _e === void 0 ? {} : _e, _g = _f.collectionId, collectionIdConfig = _g === void 0 ? '' : _g, _h = _f.maxEntities, maxFacesConfig = _h === void 0 ? 50 : _h;\n                        // default arguments\n                        this.rekognitionClient = new RekognitionClient({\n                            region: region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        return [4 /*yield*/, this.configureSource(input.entities.source)\n                                .then(function (data) { return (inputImage = data); })\n                                .catch(function (err) {\n                                return Promise.reject(err);\n                            })];\n                    case 2:\n                        _m.sent();\n                        param = { Image: inputImage };\n                        if (!(isIdentifyCelebrities(input.entities) &&\n                            input.entities.celebrityDetection)) return [3 /*break*/, 7];\n                        if (!celebrityDetectionEnabled) {\n                            return [2 /*return*/, Promise.reject('Error: You have to enable celebrity detection first')];\n                        }\n                        _m.label = 3;\n                    case 3:\n                        _m.trys.push([3, 5, , 6]);\n                        recognizeCelebritiesCommand = new RecognizeCelebritiesCommand(param);\n                        return [4 /*yield*/, this.rekognitionClient.send(recognizeCelebritiesCommand)];\n                    case 4:\n                        data = _m.sent();\n                        faces = data.CelebrityFaces.map(function (celebrity) {\n                            return {\n                                boundingBox: makeCamelCase(celebrity.Face.BoundingBox),\n                                landmarks: makeCamelCaseArray(celebrity.Face.Landmarks),\n                                metadata: __assign(__assign({}, makeCamelCase(celebrity, ['Id', 'Name', 'Urls'])), { pose: makeCamelCase(celebrity.Face.Pose) }),\n                            };\n                        });\n                        return [2 /*return*/, { entities: faces }];\n                    case 5:\n                        err_7 = _m.sent();\n                        return [2 /*return*/, Promise.reject(err_7)];\n                    case 6: return [3 /*break*/, 15];\n                    case 7:\n                        if (!(isIdentifyFromCollection(input.entities) &&\n                            input.entities.collection)) return [3 /*break*/, 12];\n                        _j = input.entities, _k = _j.collectionId, collectionId = _k === void 0 ? collectionIdConfig : _k, _l = _j.maxEntities, maxFaces = _l === void 0 ? maxFacesConfig : _l;\n                        updatedParam = __assign(__assign({}, param), { CollectionId: collectionId, MaxFaces: maxFaces });\n                        _m.label = 8;\n                    case 8:\n                        _m.trys.push([8, 10, , 11]);\n                        searchFacesByImageCommand = new SearchFacesByImageCommand(updatedParam);\n                        return [4 /*yield*/, this.rekognitionClient.send(searchFacesByImageCommand)];\n                    case 9:\n                        data = _m.sent();\n                        faces = data.FaceMatches.map(function (val) {\n                            return {\n                                boundingBox: makeCamelCase(val.Face.BoundingBox),\n                                metadata: {\n                                    externalImageId: _this.decodeExternalImageId(val.Face.ExternalImageId),\n                                    similarity: val.Similarity,\n                                },\n                            };\n                        });\n                        return [2 /*return*/, { entities: faces }];\n                    case 10:\n                        err_8 = _m.sent();\n                        return [2 /*return*/, Promise.reject(err_8)];\n                    case 11: return [3 /*break*/, 15];\n                    case 12:\n                        _m.trys.push([12, 14, , 15]);\n                        detectFacesCommand = new DetectFacesCommand(param);\n                        return [4 /*yield*/, this.rekognitionClient.send(detectFacesCommand)];\n                    case 13:\n                        data = _m.sent();\n                        faces = data.FaceDetails.map(function (detail) {\n                            // face attributes keys we want to extract from Rekognition's response\n                            var attributeKeys = [\n                                'Smile',\n                                'Eyeglasses',\n                                'Sunglasses',\n                                'Gender',\n                                'Beard',\n                                'Mustache',\n                                'EyesOpen',\n                                'MouthOpen',\n                            ];\n                            var faceAttributes = makeCamelCase(detail, attributeKeys);\n                            if (detail.Emotions) {\n                                faceAttributes['emotions'] = detail.Emotions.map(function (emotion) { return emotion.Type; });\n                            }\n                            return {\n                                boundingBox: makeCamelCase(detail.BoundingBox),\n                                landmarks: makeCamelCaseArray(detail.Landmarks),\n                                ageRange: makeCamelCase(detail.AgeRange),\n                                attributes: makeCamelCase(detail, attributeKeys),\n                                metadata: {\n                                    confidence: detail.Confidence,\n                                    pose: makeCamelCase(detail.Pose),\n                                },\n                            };\n                        });\n                        return [2 /*return*/, { entities: faces }];\n                    case 14:\n                        err_9 = _m.sent();\n                        return [2 /*return*/, Promise.reject(err_9)];\n                    case 15: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AmazonAIIdentifyPredictionsProvider.prototype.decodeExternalImageId = function (externalImageId) {\n        return ('' + externalImageId).replace(/::/g, '/');\n    };\n    return AmazonAIIdentifyPredictionsProvider;\n}(AbstractIdentifyPredictionsProvider));\nexport { AmazonAIIdentifyPredictionsProvider };\n/**\n * @deprecated use named import\n */\nexport default AmazonAIIdentifyPredictionsProvider;\n//# sourceMappingURL=AmazonAIIdentifyPredictionsProvider.js.map"]},"metadata":{},"sourceType":"module"}