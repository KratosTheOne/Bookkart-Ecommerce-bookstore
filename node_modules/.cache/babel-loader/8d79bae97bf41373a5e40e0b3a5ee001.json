{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { OpType, QueryOne } from '../../types';\nimport { monotonicUlidFactory } from '../../util';\nimport { createInMemoryStore } from './InMemoryStore';\nvar DB_NAME = '@AmplifyDatastore';\nvar COLLECTION = 'Collection';\nvar DATA = 'Data';\nvar monotonicFactoriesMap = new Map();\n\nvar AsyncStorageDatabase =\n/** @class */\nfunction () {\n  function AsyncStorageDatabase() {\n    /**\n     * Maps storeNames to a map of ulid->id\n     */\n    this._collectionInMemoryIndex = new Map();\n    this.storage = createInMemoryStore();\n  }\n\n  AsyncStorageDatabase.prototype.getCollectionIndex = function (storeName) {\n    if (!this._collectionInMemoryIndex.has(storeName)) {\n      this._collectionInMemoryIndex.set(storeName, new Map());\n    }\n\n    return this._collectionInMemoryIndex.get(storeName);\n  };\n\n  AsyncStorageDatabase.prototype.getMonotonicFactory = function (storeName) {\n    if (!monotonicFactoriesMap.has(storeName)) {\n      monotonicFactoriesMap.set(storeName, monotonicUlidFactory());\n    }\n\n    return monotonicFactoriesMap.get(storeName);\n  };\n\n  AsyncStorageDatabase.prototype.init = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allKeys, keysForCollectionEntries, allKeys_1, allKeys_1_1, key, _a, dbName, storeName, recordType, ulidOrId, id, ulid, id_1, newUlid, oldKey, newKey, item, e_1_1;\n\n      var e_1, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            this._collectionInMemoryIndex.clear();\n\n            return [4\n            /*yield*/\n            , this.storage.getAllKeys()];\n\n          case 1:\n            allKeys = _c.sent();\n            keysForCollectionEntries = [];\n            _c.label = 2;\n\n          case 2:\n            _c.trys.push([2, 12, 13, 14]);\n\n            allKeys_1 = __values(allKeys), allKeys_1_1 = allKeys_1.next();\n            _c.label = 3;\n\n          case 3:\n            if (!!allKeys_1_1.done) return [3\n            /*break*/\n            , 11];\n            key = allKeys_1_1.value;\n            _a = __read(key.split('::'), 5), dbName = _a[0], storeName = _a[1], recordType = _a[2], ulidOrId = _a[3], id = _a[4];\n            if (!(dbName === DB_NAME)) return [3\n            /*break*/\n            , 10];\n            if (!(recordType === DATA)) return [3\n            /*break*/\n            , 9];\n            ulid = void 0;\n            if (!(id === undefined)) return [3\n            /*break*/\n            , 7];\n            id_1 = ulidOrId;\n            newUlid = this.getMonotonicFactory(storeName)();\n            oldKey = this.getLegacyKeyForItem(storeName, id_1);\n            newKey = this.getKeyForItem(storeName, id_1, newUlid);\n            return [4\n            /*yield*/\n            , this.storage.getItem(oldKey)];\n\n          case 4:\n            item = _c.sent();\n            return [4\n            /*yield*/\n            , this.storage.setItem(newKey, item)];\n\n          case 5:\n            _c.sent();\n\n            return [4\n            /*yield*/\n            , this.storage.removeItem(oldKey)];\n\n          case 6:\n            _c.sent();\n\n            ulid = newUlid;\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            ulid = ulidOrId;\n            _c.label = 8;\n\n          case 8:\n            this.getCollectionIndex(storeName).set(id, ulid);\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            if (recordType === COLLECTION) {\n              keysForCollectionEntries.push(key);\n            }\n\n            _c.label = 10;\n\n          case 10:\n            allKeys_1_1 = allKeys_1.next();\n            return [3\n            /*break*/\n            , 3];\n\n          case 11:\n            return [3\n            /*break*/\n            , 14];\n\n          case 12:\n            e_1_1 = _c.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 14];\n\n          case 13:\n            try {\n              if (allKeys_1_1 && !allKeys_1_1.done && (_b = allKeys_1.return)) _b.call(allKeys_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 14:\n            if (!(keysForCollectionEntries.length > 0)) return [3\n            /*break*/\n            , 16];\n            return [4\n            /*yield*/\n            , this.storage.multiRemove(keysForCollectionEntries)];\n\n          case 15:\n            _c.sent();\n\n            _c.label = 16;\n\n          case 16:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.save = function (item, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ulid, itemKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ulid = this.getCollectionIndex(storeName).get(item.id) || this.getMonotonicFactory(storeName)();\n            itemKey = this.getKeyForItem(storeName, item.id, ulid);\n            this.getCollectionIndex(storeName).set(item.id, ulid);\n            return [4\n            /*yield*/\n            , this.storage.setItem(itemKey, JSON.stringify(item))];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.batchSave = function (storeName, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, collection, keysToDelete, keysToSave, allItemsKeys, itemsMap, items_1, items_1_1, item, id, _deleted, ulid, key, existingRecordsMap, existingRecordsKeys, allItemsKeys_1, allItemsKeys_1_1, key;\n\n      var e_2, _a, e_3, _b;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (items.length === 0) {\n              return [2\n              /*return*/\n              , []];\n            }\n\n            result = [];\n            collection = this.getCollectionIndex(storeName);\n            keysToDelete = new Set();\n            keysToSave = new Set();\n            allItemsKeys = [];\n            itemsMap = {};\n\n            try {\n              for (items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n                item = items_1_1.value;\n                id = item.id, _deleted = item._deleted;\n                ulid = collection.get(id) || this.getMonotonicFactory(storeName)();\n                key = this.getKeyForItem(storeName, id, ulid);\n                allItemsKeys.push(key);\n                itemsMap[key] = {\n                  ulid: ulid,\n                  model: item\n                };\n\n                if (_deleted) {\n                  keysToDelete.add(key);\n                } else {\n                  keysToSave.add(key);\n                }\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.storage.multiGet(allItemsKeys)];\n\n          case 1:\n            existingRecordsMap = _c.sent();\n            existingRecordsKeys = existingRecordsMap.filter(function (_a) {\n              var _b = __read(_a, 2),\n                  v = _b[1];\n\n              return !!v;\n            }).reduce(function (set, _a) {\n              var _b = __read(_a, 1),\n                  k = _b[0];\n\n              return set.add(k);\n            }, new Set());\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              if (keysToDelete.size === 0) {\n                resolve();\n                return;\n              }\n\n              var keysToDeleteArray = Array.from(keysToDelete);\n              keysToDeleteArray.forEach(function (key) {\n                return collection.delete(itemsMap[key].model.id);\n              });\n\n              _this.storage.multiRemove(keysToDeleteArray, function (errors) {\n                if (errors && errors.length > 0) {\n                  reject(errors);\n                } else {\n                  resolve();\n                }\n              });\n            })];\n\n          case 2:\n            _c.sent();\n\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              if (keysToSave.size === 0) {\n                resolve();\n                return;\n              }\n\n              var entriesToSet = Array.from(keysToSave).map(function (key) {\n                return [key, JSON.stringify(itemsMap[key].model)];\n              });\n              keysToSave.forEach(function (key) {\n                var _a = itemsMap[key],\n                    id = _a.model.id,\n                    ulid = _a.ulid;\n                collection.set(id, ulid);\n              });\n\n              _this.storage.multiSet(entriesToSet, function (errors) {\n                if (errors && errors.length > 0) {\n                  reject(errors);\n                } else {\n                  resolve();\n                }\n              });\n            })];\n\n          case 3:\n            _c.sent();\n\n            try {\n              for (allItemsKeys_1 = __values(allItemsKeys), allItemsKeys_1_1 = allItemsKeys_1.next(); !allItemsKeys_1_1.done; allItemsKeys_1_1 = allItemsKeys_1.next()) {\n                key = allItemsKeys_1_1.value;\n\n                if (keysToDelete.has(key) && existingRecordsKeys.has(key)) {\n                  result.push([itemsMap[key].model, OpType.DELETE]);\n                } else if (keysToSave.has(key)) {\n                  result.push([itemsMap[key].model, existingRecordsKeys.has(key) ? OpType.UPDATE : OpType.INSERT]);\n                }\n              }\n            } catch (e_3_1) {\n              e_3 = {\n                error: e_3_1\n              };\n            } finally {\n              try {\n                if (allItemsKeys_1_1 && !allItemsKeys_1_1.done && (_b = allItemsKeys_1.return)) _b.call(allItemsKeys_1);\n              } finally {\n                if (e_3) throw e_3.error;\n              }\n            }\n\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.get = function (id, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ulid, itemKey, recordAsString, record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ulid = this.getCollectionIndex(storeName).get(id);\n            itemKey = this.getKeyForItem(storeName, id, ulid);\n            return [4\n            /*yield*/\n            , this.storage.getItem(itemKey)];\n\n          case 1:\n            recordAsString = _a.sent();\n            record = recordAsString && JSON.parse(recordAsString);\n            return [2\n            /*return*/\n            , record];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.getOne = function (firstOrLast, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collection, _a, itemId, ulid, itemKey, itemString, _b, result;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            collection = this.getCollectionIndex(storeName);\n            _a = __read(firstOrLast === QueryOne.FIRST ? function () {\n              var e_4, _a, _b;\n\n              var id, ulid;\n\n              try {\n                for (var collection_1 = __values(collection), collection_1_1 = collection_1.next(); !collection_1_1.done; collection_1_1 = collection_1.next()) {\n                  _b = __read(collection_1_1.value, 2), id = _b[0], ulid = _b[1];\n                  break;\n                } // Get first element of the set\n\n              } catch (e_4_1) {\n                e_4 = {\n                  error: e_4_1\n                };\n              } finally {\n                try {\n                  if (collection_1_1 && !collection_1_1.done && (_a = collection_1.return)) _a.call(collection_1);\n                } finally {\n                  if (e_4) throw e_4.error;\n                }\n              }\n\n              return [id, ulid];\n            }() : function () {\n              var e_5, _a, _b;\n\n              var id, ulid;\n\n              try {\n                for (var collection_2 = __values(collection), collection_2_1 = collection_2.next(); !collection_2_1.done; collection_2_1 = collection_2.next()) {\n                  _b = __read(collection_2_1.value, 2), id = _b[0], ulid = _b[1];\n                  ;\n                } // Get last element of the set\n\n              } catch (e_5_1) {\n                e_5 = {\n                  error: e_5_1\n                };\n              } finally {\n                try {\n                  if (collection_2_1 && !collection_2_1.done && (_a = collection_2.return)) _a.call(collection_2);\n                } finally {\n                  if (e_5) throw e_5.error;\n                }\n              }\n\n              return [id, ulid];\n            }(), 2), itemId = _a[0], ulid = _a[1];\n            itemKey = this.getKeyForItem(storeName, itemId, ulid);\n            _b = itemKey;\n            if (!_b) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.storage.getItem(itemKey)];\n\n          case 1:\n            _b = _c.sent();\n            _c.label = 2;\n\n          case 2:\n            itemString = _b;\n            result = itemString ? JSON.parse(itemString) || undefined : undefined;\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n  /**\n   * This function gets all the records stored in async storage for a particular storeName\n   * It then loads all the records for that filtered set of keys using multiGet()\n   */\n\n\n  AsyncStorageDatabase.prototype.getAll = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collection, _a, _b, page, _c, limit, start, end, keysForStore, count, collection_3, collection_3_1, _d, id, ulid, storeRecordStrings, records;\n\n      var e_6, _e;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            collection = this.getCollectionIndex(storeName);\n            _a = pagination || {}, _b = _a.page, page = _b === void 0 ? 0 : _b, _c = _a.limit, limit = _c === void 0 ? 0 : _c;\n            start = Math.max(0, page * limit) || 0;\n            end = limit > 0 ? start + limit : undefined;\n            keysForStore = [];\n            count = 0;\n\n            try {\n              for (collection_3 = __values(collection), collection_3_1 = collection_3.next(); !collection_3_1.done; collection_3_1 = collection_3.next()) {\n                _d = __read(collection_3_1.value, 2), id = _d[0], ulid = _d[1];\n                count++;\n\n                if (count <= start) {\n                  continue;\n                }\n\n                keysForStore.push(this.getKeyForItem(storeName, id, ulid));\n\n                if (count === end) {\n                  break;\n                }\n              }\n            } catch (e_6_1) {\n              e_6 = {\n                error: e_6_1\n              };\n            } finally {\n              try {\n                if (collection_3_1 && !collection_3_1.done && (_e = collection_3.return)) _e.call(collection_3);\n              } finally {\n                if (e_6) throw e_6.error;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.storage.multiGet(keysForStore)];\n\n          case 1:\n            storeRecordStrings = _f.sent();\n            records = storeRecordStrings.filter(function (_a) {\n              var _b = __read(_a, 2),\n                  value = _b[1];\n\n              return value;\n            }).map(function (_a) {\n              var _b = __read(_a, 2),\n                  value = _b[1];\n\n              return JSON.parse(value);\n            });\n            return [2\n            /*return*/\n            , records];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.delete = function (id, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ulid, itemKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ulid = this.getCollectionIndex(storeName).get(id);\n            itemKey = this.getKeyForItem(storeName, id, ulid);\n            this.getCollectionIndex(storeName).delete(id);\n            return [4\n            /*yield*/\n            , this.storage.removeItem(itemKey)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Clear the AsyncStorage of all DataStore entries\n   */\n\n\n  AsyncStorageDatabase.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allKeys, allDataStoreKeys;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.storage.getAllKeys()];\n\n          case 1:\n            allKeys = _a.sent();\n            allDataStoreKeys = allKeys.filter(function (key) {\n              return key.startsWith(DB_NAME);\n            });\n            return [4\n            /*yield*/\n            , this.storage.multiRemove(allDataStoreKeys)];\n\n          case 2:\n            _a.sent();\n\n            this._collectionInMemoryIndex.clear();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.getKeyForItem = function (storeName, id, ulid) {\n    return this.getKeyPrefixForStoreItems(storeName) + \"::\" + ulid + \"::\" + id;\n  };\n\n  AsyncStorageDatabase.prototype.getLegacyKeyForItem = function (storeName, id) {\n    return this.getKeyPrefixForStoreItems(storeName) + \"::\" + id;\n  };\n\n  AsyncStorageDatabase.prototype.getKeyPrefixForStoreItems = function (storeName) {\n    return DB_NAME + \"::\" + storeName + \"::\" + DATA;\n  };\n\n  return AsyncStorageDatabase;\n}();\n\nexport default AsyncStorageDatabase;","map":{"version":3,"sources":["../../../src/storage/adapter/AsyncStorageDatabase.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { OpType, QueryOne, } from '../../types';\nimport { monotonicUlidFactory } from '../../util';\nimport { createInMemoryStore } from './InMemoryStore';\nvar DB_NAME = '@AmplifyDatastore';\nvar COLLECTION = 'Collection';\nvar DATA = 'Data';\nvar monotonicFactoriesMap = new Map();\nvar AsyncStorageDatabase = /** @class */ (function () {\n    function AsyncStorageDatabase() {\n        /**\n         * Maps storeNames to a map of ulid->id\n         */\n        this._collectionInMemoryIndex = new Map();\n        this.storage = createInMemoryStore();\n    }\n    AsyncStorageDatabase.prototype.getCollectionIndex = function (storeName) {\n        if (!this._collectionInMemoryIndex.has(storeName)) {\n            this._collectionInMemoryIndex.set(storeName, new Map());\n        }\n        return this._collectionInMemoryIndex.get(storeName);\n    };\n    AsyncStorageDatabase.prototype.getMonotonicFactory = function (storeName) {\n        if (!monotonicFactoriesMap.has(storeName)) {\n            monotonicFactoriesMap.set(storeName, monotonicUlidFactory());\n        }\n        return monotonicFactoriesMap.get(storeName);\n    };\n    AsyncStorageDatabase.prototype.init = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var allKeys, keysForCollectionEntries, allKeys_1, allKeys_1_1, key, _a, dbName, storeName, recordType, ulidOrId, id, ulid, id_1, newUlid, oldKey, newKey, item, e_1_1;\n            var e_1, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        this._collectionInMemoryIndex.clear();\n                        return [4 /*yield*/, this.storage.getAllKeys()];\n                    case 1:\n                        allKeys = _c.sent();\n                        keysForCollectionEntries = [];\n                        _c.label = 2;\n                    case 2:\n                        _c.trys.push([2, 12, 13, 14]);\n                        allKeys_1 = __values(allKeys), allKeys_1_1 = allKeys_1.next();\n                        _c.label = 3;\n                    case 3:\n                        if (!!allKeys_1_1.done) return [3 /*break*/, 11];\n                        key = allKeys_1_1.value;\n                        _a = __read(key.split('::'), 5), dbName = _a[0], storeName = _a[1], recordType = _a[2], ulidOrId = _a[3], id = _a[4];\n                        if (!(dbName === DB_NAME)) return [3 /*break*/, 10];\n                        if (!(recordType === DATA)) return [3 /*break*/, 9];\n                        ulid = void 0;\n                        if (!(id === undefined)) return [3 /*break*/, 7];\n                        id_1 = ulidOrId;\n                        newUlid = this.getMonotonicFactory(storeName)();\n                        oldKey = this.getLegacyKeyForItem(storeName, id_1);\n                        newKey = this.getKeyForItem(storeName, id_1, newUlid);\n                        return [4 /*yield*/, this.storage.getItem(oldKey)];\n                    case 4:\n                        item = _c.sent();\n                        return [4 /*yield*/, this.storage.setItem(newKey, item)];\n                    case 5:\n                        _c.sent();\n                        return [4 /*yield*/, this.storage.removeItem(oldKey)];\n                    case 6:\n                        _c.sent();\n                        ulid = newUlid;\n                        return [3 /*break*/, 8];\n                    case 7:\n                        ulid = ulidOrId;\n                        _c.label = 8;\n                    case 8:\n                        this.getCollectionIndex(storeName).set(id, ulid);\n                        return [3 /*break*/, 10];\n                    case 9:\n                        if (recordType === COLLECTION) {\n                            keysForCollectionEntries.push(key);\n                        }\n                        _c.label = 10;\n                    case 10:\n                        allKeys_1_1 = allKeys_1.next();\n                        return [3 /*break*/, 3];\n                    case 11: return [3 /*break*/, 14];\n                    case 12:\n                        e_1_1 = _c.sent();\n                        e_1 = { error: e_1_1 };\n                        return [3 /*break*/, 14];\n                    case 13:\n                        try {\n                            if (allKeys_1_1 && !allKeys_1_1.done && (_b = allKeys_1.return)) _b.call(allKeys_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                        return [7 /*endfinally*/];\n                    case 14:\n                        if (!(keysForCollectionEntries.length > 0)) return [3 /*break*/, 16];\n                        return [4 /*yield*/, this.storage.multiRemove(keysForCollectionEntries)];\n                    case 15:\n                        _c.sent();\n                        _c.label = 16;\n                    case 16: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.save = function (item, storeName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var ulid, itemKey;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        ulid = this.getCollectionIndex(storeName).get(item.id) ||\n                            this.getMonotonicFactory(storeName)();\n                        itemKey = this.getKeyForItem(storeName, item.id, ulid);\n                        this.getCollectionIndex(storeName).set(item.id, ulid);\n                        return [4 /*yield*/, this.storage.setItem(itemKey, JSON.stringify(item))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.batchSave = function (storeName, items) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, collection, keysToDelete, keysToSave, allItemsKeys, itemsMap, items_1, items_1_1, item, id, _deleted, ulid, key, existingRecordsMap, existingRecordsKeys, allItemsKeys_1, allItemsKeys_1_1, key;\n            var e_2, _a, e_3, _b;\n            var _this = this;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (items.length === 0) {\n                            return [2 /*return*/, []];\n                        }\n                        result = [];\n                        collection = this.getCollectionIndex(storeName);\n                        keysToDelete = new Set();\n                        keysToSave = new Set();\n                        allItemsKeys = [];\n                        itemsMap = {};\n                        try {\n                            for (items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n                                item = items_1_1.value;\n                                id = item.id, _deleted = item._deleted;\n                                ulid = collection.get(id) || this.getMonotonicFactory(storeName)();\n                                key = this.getKeyForItem(storeName, id, ulid);\n                                allItemsKeys.push(key);\n                                itemsMap[key] = { ulid: ulid, model: item };\n                                if (_deleted) {\n                                    keysToDelete.add(key);\n                                }\n                                else {\n                                    keysToSave.add(key);\n                                }\n                            }\n                        }\n                        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                        finally {\n                            try {\n                                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n                            }\n                            finally { if (e_2) throw e_2.error; }\n                        }\n                        return [4 /*yield*/, this.storage.multiGet(allItemsKeys)];\n                    case 1:\n                        existingRecordsMap = _c.sent();\n                        existingRecordsKeys = existingRecordsMap\n                            .filter(function (_a) {\n                            var _b = __read(_a, 2), v = _b[1];\n                            return !!v;\n                        })\n                            .reduce(function (set, _a) {\n                            var _b = __read(_a, 1), k = _b[0];\n                            return set.add(k);\n                        }, new Set());\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                if (keysToDelete.size === 0) {\n                                    resolve();\n                                    return;\n                                }\n                                var keysToDeleteArray = Array.from(keysToDelete);\n                                keysToDeleteArray.forEach(function (key) {\n                                    return collection.delete(itemsMap[key].model.id);\n                                });\n                                _this.storage.multiRemove(keysToDeleteArray, function (errors) {\n                                    if (errors && errors.length > 0) {\n                                        reject(errors);\n                                    }\n                                    else {\n                                        resolve();\n                                    }\n                                });\n                            })];\n                    case 2:\n                        _c.sent();\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                if (keysToSave.size === 0) {\n                                    resolve();\n                                    return;\n                                }\n                                var entriesToSet = Array.from(keysToSave).map(function (key) { return [\n                                    key,\n                                    JSON.stringify(itemsMap[key].model),\n                                ]; });\n                                keysToSave.forEach(function (key) {\n                                    var _a = itemsMap[key], id = _a.model.id, ulid = _a.ulid;\n                                    collection.set(id, ulid);\n                                });\n                                _this.storage.multiSet(entriesToSet, function (errors) {\n                                    if (errors && errors.length > 0) {\n                                        reject(errors);\n                                    }\n                                    else {\n                                        resolve();\n                                    }\n                                });\n                            })];\n                    case 3:\n                        _c.sent();\n                        try {\n                            for (allItemsKeys_1 = __values(allItemsKeys), allItemsKeys_1_1 = allItemsKeys_1.next(); !allItemsKeys_1_1.done; allItemsKeys_1_1 = allItemsKeys_1.next()) {\n                                key = allItemsKeys_1_1.value;\n                                if (keysToDelete.has(key) && existingRecordsKeys.has(key)) {\n                                    result.push([itemsMap[key].model, OpType.DELETE]);\n                                }\n                                else if (keysToSave.has(key)) {\n                                    result.push([\n                                        itemsMap[key].model,\n                                        existingRecordsKeys.has(key) ? OpType.UPDATE : OpType.INSERT,\n                                    ]);\n                                }\n                            }\n                        }\n                        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n                        finally {\n                            try {\n                                if (allItemsKeys_1_1 && !allItemsKeys_1_1.done && (_b = allItemsKeys_1.return)) _b.call(allItemsKeys_1);\n                            }\n                            finally { if (e_3) throw e_3.error; }\n                        }\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.get = function (id, storeName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var ulid, itemKey, recordAsString, record;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        ulid = this.getCollectionIndex(storeName).get(id);\n                        itemKey = this.getKeyForItem(storeName, id, ulid);\n                        return [4 /*yield*/, this.storage.getItem(itemKey)];\n                    case 1:\n                        recordAsString = _a.sent();\n                        record = recordAsString && JSON.parse(recordAsString);\n                        return [2 /*return*/, record];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.getOne = function (firstOrLast, storeName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var collection, _a, itemId, ulid, itemKey, itemString, _b, result;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        collection = this.getCollectionIndex(storeName);\n                        _a = __read(firstOrLast === QueryOne.FIRST\n                            ? (function () {\n                                var e_4, _a, _b;\n                                var id, ulid;\n                                try {\n                                    for (var collection_1 = __values(collection), collection_1_1 = collection_1.next(); !collection_1_1.done; collection_1_1 = collection_1.next()) {\n                                        _b = __read(collection_1_1.value, 2), id = _b[0], ulid = _b[1];\n                                        break;\n                                    } // Get first element of the set\n                                }\n                                catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                                finally {\n                                    try {\n                                        if (collection_1_1 && !collection_1_1.done && (_a = collection_1.return)) _a.call(collection_1);\n                                    }\n                                    finally { if (e_4) throw e_4.error; }\n                                }\n                                return [id, ulid];\n                            })()\n                            : (function () {\n                                var e_5, _a, _b;\n                                var id, ulid;\n                                try {\n                                    for (var collection_2 = __values(collection), collection_2_1 = collection_2.next(); !collection_2_1.done; collection_2_1 = collection_2.next()) {\n                                        _b = __read(collection_2_1.value, 2), id = _b[0], ulid = _b[1];\n                                        ;\n                                    } // Get last element of the set\n                                }\n                                catch (e_5_1) { e_5 = { error: e_5_1 }; }\n                                finally {\n                                    try {\n                                        if (collection_2_1 && !collection_2_1.done && (_a = collection_2.return)) _a.call(collection_2);\n                                    }\n                                    finally { if (e_5) throw e_5.error; }\n                                }\n                                return [id, ulid];\n                            })(), 2), itemId = _a[0], ulid = _a[1];\n                        itemKey = this.getKeyForItem(storeName, itemId, ulid);\n                        _b = itemKey;\n                        if (!_b) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.storage.getItem(itemKey)];\n                    case 1:\n                        _b = (_c.sent());\n                        _c.label = 2;\n                    case 2:\n                        itemString = _b;\n                        result = itemString ? JSON.parse(itemString) || undefined : undefined;\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    /**\n     * This function gets all the records stored in async storage for a particular storeName\n     * It then loads all the records for that filtered set of keys using multiGet()\n     */\n    AsyncStorageDatabase.prototype.getAll = function (storeName, pagination) {\n        return __awaiter(this, void 0, void 0, function () {\n            var collection, _a, _b, page, _c, limit, start, end, keysForStore, count, collection_3, collection_3_1, _d, id, ulid, storeRecordStrings, records;\n            var e_6, _e;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        collection = this.getCollectionIndex(storeName);\n                        _a = pagination || {}, _b = _a.page, page = _b === void 0 ? 0 : _b, _c = _a.limit, limit = _c === void 0 ? 0 : _c;\n                        start = Math.max(0, page * limit) || 0;\n                        end = limit > 0 ? start + limit : undefined;\n                        keysForStore = [];\n                        count = 0;\n                        try {\n                            for (collection_3 = __values(collection), collection_3_1 = collection_3.next(); !collection_3_1.done; collection_3_1 = collection_3.next()) {\n                                _d = __read(collection_3_1.value, 2), id = _d[0], ulid = _d[1];\n                                count++;\n                                if (count <= start) {\n                                    continue;\n                                }\n                                keysForStore.push(this.getKeyForItem(storeName, id, ulid));\n                                if (count === end) {\n                                    break;\n                                }\n                            }\n                        }\n                        catch (e_6_1) { e_6 = { error: e_6_1 }; }\n                        finally {\n                            try {\n                                if (collection_3_1 && !collection_3_1.done && (_e = collection_3.return)) _e.call(collection_3);\n                            }\n                            finally { if (e_6) throw e_6.error; }\n                        }\n                        return [4 /*yield*/, this.storage.multiGet(keysForStore)];\n                    case 1:\n                        storeRecordStrings = _f.sent();\n                        records = storeRecordStrings\n                            .filter(function (_a) {\n                            var _b = __read(_a, 2), value = _b[1];\n                            return value;\n                        })\n                            .map(function (_a) {\n                            var _b = __read(_a, 2), value = _b[1];\n                            return JSON.parse(value);\n                        });\n                        return [2 /*return*/, records];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.delete = function (id, storeName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var ulid, itemKey;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        ulid = this.getCollectionIndex(storeName).get(id);\n                        itemKey = this.getKeyForItem(storeName, id, ulid);\n                        this.getCollectionIndex(storeName).delete(id);\n                        return [4 /*yield*/, this.storage.removeItem(itemKey)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Clear the AsyncStorage of all DataStore entries\n     */\n    AsyncStorageDatabase.prototype.clear = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var allKeys, allDataStoreKeys;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.storage.getAllKeys()];\n                    case 1:\n                        allKeys = _a.sent();\n                        allDataStoreKeys = allKeys.filter(function (key) { return key.startsWith(DB_NAME); });\n                        return [4 /*yield*/, this.storage.multiRemove(allDataStoreKeys)];\n                    case 2:\n                        _a.sent();\n                        this._collectionInMemoryIndex.clear();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.getKeyForItem = function (storeName, id, ulid) {\n        return this.getKeyPrefixForStoreItems(storeName) + \"::\" + ulid + \"::\" + id;\n    };\n    AsyncStorageDatabase.prototype.getLegacyKeyForItem = function (storeName, id) {\n        return this.getKeyPrefixForStoreItems(storeName) + \"::\" + id;\n    };\n    AsyncStorageDatabase.prototype.getKeyPrefixForStoreItems = function (storeName) {\n        return DB_NAME + \"::\" + storeName + \"::\" + DATA;\n    };\n    return AsyncStorageDatabase;\n}());\nexport default AsyncStorageDatabase;\n//# sourceMappingURL=AsyncStorageDatabase.js.map"]},"metadata":{},"sourceType":"module"}