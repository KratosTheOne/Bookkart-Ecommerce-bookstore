{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar constants_1 = require(\"./constants\");\n\nvar service_error_classification_1 = require(\"@aws-sdk/service-error-classification\");\n\nexports.defaultRetryDecider = function (error) {\n  if (!error) {\n    return false;\n  }\n\n  if (error.connectionError) {\n    return true;\n  }\n\n  if (hasMetadata(error) && error.$metadata.httpStatusCode && constants_1.RETRYABLE_STATUS_CODES.has(error.$metadata.httpStatusCode)) {\n    return true;\n  }\n\n  return service_error_classification_1.isStillProcessingError(error) || service_error_classification_1.isThrottlingError(error) || service_error_classification_1.isClockSkewError(error);\n};\n\nfunction hasMetadata(error) {\n  return error === null || error === void 0 ? void 0 : error.$metadata;\n}","map":{"version":3,"sources":["../src/retryDecider.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,8BAAA,GAAA,OAAA,CAAA,uCAAA,CAAA;;AAOa,OAAA,CAAA,mBAAA,GAAsB,UAAC,KAAD,EAAgB;AACjD,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,KAAP;AACD;;AAED,MAAI,KAAK,CAAC,eAAV,EAA2B;AACzB,WAAO,IAAP;AACD;;AAED,MACE,WAAW,CAAC,KAAD,CAAX,IACA,KAAK,CAAC,SAAN,CAAgB,cADhB,IAEA,WAAA,CAAA,sBAAA,CAAuB,GAAvB,CAA2B,KAAK,CAAC,SAAN,CAAgB,cAA3C,CAHF,EAIE;AACA,WAAO,IAAP;AACD;;AAED,SACE,8BAAA,CAAA,sBAAA,CAAuB,KAAvB,KACA,8BAAA,CAAA,iBAAA,CAAkB,KAAlB,CADA,IAEA,8BAAA,CAAA,gBAAA,CAAiB,KAAjB,CAHF;AAKD,CAtBY;;AAwBb,SAAS,WAAT,CAAqB,KAArB,EAA+B;AAC7B,SAAO,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAE,SAAd;AACD","sourcesContent":["import { RETRYABLE_STATUS_CODES } from \"./constants\";\nimport {\n  isClockSkewError,\n  isStillProcessingError,\n  isThrottlingError\n} from \"@aws-sdk/service-error-classification\";\nimport { MetadataBearer, SdkError } from \"@aws-sdk/types\";\n\nexport const defaultRetryDecider = (error: SdkError) => {\n  if (!error) {\n    return false;\n  }\n\n  if (error.connectionError) {\n    return true;\n  }\n\n  if (\n    hasMetadata(error) &&\n    error.$metadata.httpStatusCode &&\n    RETRYABLE_STATUS_CODES.has(error.$metadata.httpStatusCode)\n  ) {\n    return true;\n  }\n\n  return (\n    isStillProcessingError(error) ||\n    isThrottlingError(error) ||\n    isClockSkewError(error)\n  );\n};\n\nfunction hasMetadata(error: any): error is MetadataBearer {\n  return error?.$metadata;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}