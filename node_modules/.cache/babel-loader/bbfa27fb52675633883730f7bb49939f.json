{"ast":null,"code":"import { __awaiter, __generator, __values } from \"tslib\";\nimport { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\n/**\n * @internal\n */\n\nexport function getPayloadHash(_a, hashConstructor) {\n  var headers = _a.headers,\n      body = _a.body;\n  return __awaiter(this, void 0, void 0, function () {\n    var _b, _c, headerName, hashCtor, _d;\n\n    var e_1, _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          try {\n            for (_b = __values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n              headerName = _c.value;\n\n              if (headerName.toLowerCase() === SHA256_HEADER) {\n                return [2\n                /*return*/\n                , headers[headerName]];\n              }\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (_c && !_c.done && (_e = _b.return)) _e.call(_b);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n\n          if (!(body == undefined)) return [3\n          /*break*/\n          , 1];\n          return [2\n          /*return*/\n          , \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"];\n\n        case 1:\n          if (!(typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body))) return [3\n          /*break*/\n          , 3];\n          hashCtor = new hashConstructor();\n          hashCtor.update(body);\n          _d = toHex;\n          return [4\n          /*yield*/\n          , hashCtor.digest()];\n\n        case 2:\n          return [2\n          /*return*/\n          , _d.apply(void 0, [_f.sent()])];\n\n        case 3:\n          // As any defined body that is not a string or binary data is a stream, this\n          // body is unsignable. Attempt to send the request with an unsigned payload,\n          // which may or may not be accepted by the service.\n          return [2\n          /*return*/\n          , UNSIGNED_PAYLOAD];\n      }\n    });\n  });\n}","map":{"version":3,"sources":["../../src/getPayloadHash.ts"],"names":[],"mappings":";AAAA,SAAS,aAAT,QAA8B,0BAA9B;AAEA,SAAS,KAAT,QAAsB,4BAAtB;AAEA,SAAS,aAAT,EAAwB,gBAAxB,QAAgD,aAAhD;AAEA;;AAEG;;AACH,OAAM,SAAgB,cAAhB,CACJ,EADI,EAEJ,eAFI,EAE4B;MAD9B,OAAO,GAAA,EAAA,CAAA,O;MAAE,IAAI,GAAA,EAAA,CAAA,I;;;;;;;;;;AAGf,iBAAyB,EAAA,GAAA,QAAA,CAAA,MAAM,CAAC,IAAP,CAAY,OAAZ,CAAA,CAAA,EAAoB,EAAA,GAAA,EAAA,CAAA,IAAA,EAA7C,EAA6C,CAAA,EAAA,CAAA,IAA7C,EAA6C,EAAA,GAAA,EAAA,CAAA,IAAA,EAA7C,EAA+C;AAApC,cAAA,UAAU,GAAA,EAAA,CAAA,KAAV;;AACT,kBAAI,UAAU,CAAC,WAAX,OAA6B,aAAjC,EAAgD;AAC9C,uBAAA,CAAA;AAAA;AAAA,kBAAO,OAAO,CAAC,UAAD,CAAd,CAAA;AACD;AACF;;;;;;;;;;;;;cAEG,EAAA,IAAI,IAAI,SAAR,C,EAAA,OAAA,CAAA;AAAA;AAAA,YAAA,CAAA,CAAA;AACF,iBAAA,CAAA;AAAA;AAAA,YAAO,kEAAP,CAAA;;;cACS,EAAA,OAAO,IAAP,KAAgB,QAAhB,IAA4B,WAAW,CAAC,MAAZ,CAAmB,IAAnB,CAA5B,IAAwD,aAAa,CAAC,IAAD,CAArE,C,EAAA,OAAA,CAAA;AAAA;AAAA,YAAA,CAAA,CAAA;AACH,UAAA,QAAQ,GAAG,IAAI,eAAJ,EAAX;AACN,UAAA,QAAQ,CAAC,MAAT,CAAgB,IAAhB;AACO,UAAA,EAAA,GAAA,KAAA;AAAM,iBAAA,CAAA;AAAA;AAAA,YAAM,QAAQ,CAAC,MAAT,EAAN,CAAA;;;AAAb,iBAAA,CAAA;AAAA;AAAA,YAAO,EAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAM,EAAA,CAAA,IAAA,EAAN,CAAA,CAAP,CAAA;;;AAGF;AACA;AACA;AACA,iBAAA,CAAA;AAAA;AAAA,YAAO,gBAAP,CAAA;;;;AACD","sourcesContent":["import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { HashConstructor, HttpRequest } from \"@aws-sdk/types\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\n\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\n\n/**\n * @internal\n */\nexport async function getPayloadHash(\n  { headers, body }: HttpRequest,\n  hashConstructor: HashConstructor\n): Promise<string> {\n  for (const headerName of Object.keys(headers)) {\n    if (headerName.toLowerCase() === SHA256_HEADER) {\n      return headers[headerName];\n    }\n  }\n\n  if (body == undefined) {\n    return \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n  } else if (typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {\n    const hashCtor = new hashConstructor();\n    hashCtor.update(body);\n    return toHex(await hashCtor.digest());\n  }\n\n  // As any defined body that is not a string or binary data is a stream, this\n  // body is unsignable. Attempt to send the request with an unsigned payload,\n  // which may or may not be accepted by the service.\n  return UNSIGNED_PAYLOAD;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}