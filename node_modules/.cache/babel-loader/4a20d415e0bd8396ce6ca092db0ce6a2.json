{"ast":null,"code":"/**\n * Given an input string, splits based on the delimiter after a given\n * number of delimiters has been encountered.\n *\n * @param value The input string to split.\n * @param delimiter The delimiter to split on.\n * @param numDelimiters The number of delimiters to have encountered to split.\n */\nexport function splitEvery(value, delimiter, numDelimiters) {\n  // Fail if we don't have a clear number to split on.\n  if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {\n    throw new Error(\"Invalid number of delimiters (\" + numDelimiters + \") for splitEvery.\");\n  }\n\n  var segments = value.split(delimiter); // Short circuit extra logic for the simple case.\n\n  if (numDelimiters === 1) {\n    return segments;\n  }\n\n  var compoundSegments = [];\n  var currentSegment = \"\";\n\n  for (var i = 0; i < segments.length; i++) {\n    if (currentSegment === \"\") {\n      // Start a new segment.\n      currentSegment = segments[i];\n    } else {\n      // Compound the current segment with the delimiter.\n      currentSegment += delimiter + segments[i];\n    }\n\n    if ((i + 1) % numDelimiters === 0) {\n      // We encountered the right number of delimiters, so add the entry.\n      compoundSegments.push(currentSegment); // And reset the current segment.\n\n      currentSegment = \"\";\n    }\n  } // Handle any leftover segment portion.\n\n\n  if (currentSegment !== \"\") {\n    compoundSegments.push(currentSegment);\n  }\n\n  return compoundSegments;\n}","map":{"version":3,"sources":["../../src/split-every.ts"],"names":[],"mappings":"AAAA;;;;;;;AAOG;AACH,OAAM,SAAU,UAAV,CAAqB,KAArB,EAAoC,SAApC,EAAuD,aAAvD,EAA4E;AAChF;AACA,MAAI,aAAa,IAAI,CAAjB,IAAsB,CAAC,MAAM,CAAC,SAAP,CAAiB,aAAjB,CAA3B,EAA4D;AAC1D,UAAM,IAAI,KAAJ,CAAU,mCAAmC,aAAnC,GAAmD,mBAA7D,CAAN;AACD;;AAED,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAN,CAAY,SAAZ,CAAjB,CANgF,CAOhF;;AACA,MAAI,aAAa,KAAK,CAAtB,EAAyB;AACvB,WAAO,QAAP;AACD;;AAED,MAAM,gBAAgB,GAAkB,EAAxC;AACA,MAAI,cAAc,GAAG,EAArB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,QAAI,cAAc,KAAK,EAAvB,EAA2B;AACzB;AACA,MAAA,cAAc,GAAG,QAAQ,CAAC,CAAD,CAAzB;AACD,KAHD,MAGO;AACL;AACA,MAAA,cAAc,IAAI,SAAS,GAAG,QAAQ,CAAC,CAAD,CAAtC;AACD;;AAED,QAAI,CAAC,CAAC,GAAG,CAAL,IAAU,aAAV,KAA4B,CAAhC,EAAmC;AACjC;AACA,MAAA,gBAAgB,CAAC,IAAjB,CAAsB,cAAtB,EAFiC,CAGjC;;AACA,MAAA,cAAc,GAAG,EAAjB;AACD;AACF,GA7B+E,CA+BhF;;;AACA,MAAI,cAAc,KAAK,EAAvB,EAA2B;AACzB,IAAA,gBAAgB,CAAC,IAAjB,CAAsB,cAAtB;AACD;;AAED,SAAO,gBAAP;AACD","sourcesContent":["/**\n * Given an input string, splits based on the delimiter after a given\n * number of delimiters has been encountered.\n *\n * @param value The input string to split.\n * @param delimiter The delimiter to split on.\n * @param numDelimiters The number of delimiters to have encountered to split.\n */\nexport function splitEvery(value: string, delimiter: string, numDelimiters: number): Array<string> {\n  // Fail if we don't have a clear number to split on.\n  if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {\n    throw new Error(\"Invalid number of delimiters (\" + numDelimiters + \") for splitEvery.\");\n  }\n\n  const segments = value.split(delimiter);\n  // Short circuit extra logic for the simple case.\n  if (numDelimiters === 1) {\n    return segments;\n  }\n\n  const compoundSegments: Array<string> = [];\n  let currentSegment = \"\";\n  for (let i = 0; i < segments.length; i++) {\n    if (currentSegment === \"\") {\n      // Start a new segment.\n      currentSegment = segments[i];\n    } else {\n      // Compound the current segment with the delimiter.\n      currentSegment += delimiter + segments[i];\n    }\n\n    if ((i + 1) % numDelimiters === 0) {\n      // We encountered the right number of delimiters, so add the entry.\n      compoundSegments.push(currentSegment);\n      // And reset the current segment.\n      currentSegment = \"\";\n    }\n  }\n\n  // Handle any leftover segment portion.\n  if (currentSegment !== \"\") {\n    compoundSegments.push(currentSegment);\n  }\n\n  return compoundSegments;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}