{"ast":null,"code":"import { __read } from \"tslib\";\n/**\n * @internal\n */\n\nexport function resolveLogins(logins) {\n  return Promise.all(Object.keys(logins).reduce(function (arr, name) {\n    var tokenOrProvider = logins[name];\n\n    if (typeof tokenOrProvider === \"string\") {\n      arr.push([name, tokenOrProvider]);\n    } else {\n      arr.push(tokenOrProvider().then(function (token) {\n        return [name, token];\n      }));\n    }\n\n    return arr;\n  }, [])).then(function (resolvedPairs) {\n    return resolvedPairs.reduce(function (logins, _a) {\n      var _b = __read(_a, 2),\n          key = _b[0],\n          value = _b[1];\n\n      logins[key] = value;\n      return logins;\n    }, {});\n  });\n}","map":{"version":3,"sources":["../../src/resolveLogins.ts"],"names":[],"mappings":";AAEA;;AAEG;;AACH,OAAM,SAAU,aAAV,CAAwB,MAAxB,EAAsC;AAC1C,SAAO,OAAO,CAAC,GAAR,CACL,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,MAApB,CAA2B,UAAC,GAAD,EAA2D,IAA3D,EAAuE;AAChG,QAAM,eAAe,GAAG,MAAM,CAAC,IAAD,CAA9B;;AACA,QAAI,OAAO,eAAP,KAA2B,QAA/B,EAAyC;AACvC,MAAA,GAAG,CAAC,IAAJ,CAAS,CAAC,IAAD,EAAO,eAAP,CAAT;AACD,KAFD,MAEO;AACL,MAAA,GAAG,CAAC,IAAJ,CAAS,eAAe,GAAG,IAAlB,CAAuB,UAAC,KAAD,EAAM;AAAK,eAAA,CAAC,IAAD,EAAA,KAAA,CAAA;AAAiC,OAAnE,CAAT;AACD;;AACD,WAAO,GAAP;AACD,GARD,EAQG,EARH,CADK,EAUL,IAVK,CAUA,UAAC,aAAD,EAAc;AACnB,WAAA,aAAa,CAAC,MAAd,CAAqB,UAAC,MAAD,EAAyB,EAAzB,EAAqC;UAAZ,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,C;UAAC,GAAG,GAAA,EAAA,CAAA,CAAA,C;UAAE,KAAK,GAAA,EAAA,CAAA,CAAA,C;;AACvD,MAAA,MAAM,CAAC,GAAD,CAAN,GAAc,KAAd;AACA,aAAO,MAAP;AACD,KAHD,EAGG,EAHH,CAAA;AAGwB,GAdnB,CAAP;AAgBD","sourcesContent":["import { Logins, ResolvedLogins } from \"./Logins\";\n\n/**\n * @internal\n */\nexport function resolveLogins(logins: Logins): Promise<ResolvedLogins> {\n  return Promise.all(\n    Object.keys(logins).reduce((arr: Array<[string, string] | Promise<[string, string]>>, name: string) => {\n      const tokenOrProvider = logins[name];\n      if (typeof tokenOrProvider === \"string\") {\n        arr.push([name, tokenOrProvider] as [string, string]);\n      } else {\n        arr.push(tokenOrProvider().then((token) => [name, token] as [string, string]));\n      }\n      return arr;\n    }, [] as Array<Promise<[string, string]>>)\n  ).then((resolvedPairs) =>\n    resolvedPairs.reduce((logins: ResolvedLogins, [key, value]) => {\n      logins[key] = value;\n      return logins;\n    }, {} as ResolvedLogins)\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}