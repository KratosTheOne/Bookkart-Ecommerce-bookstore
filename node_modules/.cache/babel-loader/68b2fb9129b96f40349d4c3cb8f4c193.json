{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar protocol_http_1 = require(\"@aws-sdk/protocol-http\");\n\nfunction userAgentMiddleware(options) {\n  return function (next) {\n    return function (args) {\n      var request = args.request;\n      if (!protocol_http_1.HttpRequest.isInstance(request)) return next(args);\n      var headers = request.headers;\n      var userAgentHeader = options.runtime === \"node\" ? \"user-agent\" : \"x-amz-user-agent\";\n\n      if (!headers[userAgentHeader]) {\n        headers[userAgentHeader] = \"\" + options.defaultUserAgent;\n      } else {\n        headers[userAgentHeader] += \" \" + options.defaultUserAgent;\n      }\n\n      if (options.customUserAgent) {\n        headers[userAgentHeader] += \" \" + options.customUserAgent;\n      }\n\n      return next(tslib_1.__assign(tslib_1.__assign({}, args), {\n        request: request\n      }));\n    };\n  };\n}\n\nexports.userAgentMiddleware = userAgentMiddleware;\nexports.getUserAgentMiddlewareOptions = {\n  name: \"getUserAgentMiddleware\",\n  step: \"build\",\n  tags: [\"SET_USER_AGENT\", \"USER_AGENT\"]\n};\n\nexports.getUserAgentPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(userAgentMiddleware(config), exports.getUserAgentMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../src/middleware.ts"],"names":[],"mappings":";;;;;;;;AAQA,IAAA,eAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAGA,SAAgB,mBAAhB,CAAoC,OAApC,EAAoE;AAClE,SAAO,UACL,IADK,EACuB;AACD,WAAA,UAC3B,IAD2B,EACK;AAE1B,UAAA,OAAA,GAAA,IAAA,CAAA,OAAA;AACN,UAAI,CAAC,eAAA,CAAA,WAAA,CAAY,UAAZ,CAAuB,OAAvB,CAAL,EAAsC,OAAO,IAAI,CAAC,IAAD,CAAX;AAC9B,UAAA,OAAA,GAAA,OAAA,CAAA,OAAA;AACR,UAAM,eAAe,GACnB,OAAO,CAAC,OAAR,KAAoB,MAApB,GAA6B,YAA7B,GAA4C,kBAD9C;;AAEA,UAAI,CAAC,OAAO,CAAC,eAAD,CAAZ,EAA+B;AAC7B,QAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,KAAG,OAAO,CAAC,gBAAtC;AACD,OAFD,MAEO;AACL,QAAA,OAAO,CAAC,eAAD,CAAP,IAA4B,MAAI,OAAO,CAAC,gBAAxC;AACD;;AACD,UAAI,OAAO,CAAC,eAAZ,EAA6B;AAC3B,QAAA,OAAO,CAAC,eAAD,CAAP,IAA4B,MAAI,OAAO,CAAC,eAAxC;AACD;;AACD,aAAO,IAAI,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACN,IADM,CAAA,EACF;AACP,QAAA,OAAO,EAAA;AADA,OADE,CAAA,CAAX;AAhB2B,KAAA;AAoB5B,GAtBD;AAuBD;;AAxBD,OAAA,CAAA,mBAAA,GAAA,mBAAA;AA0Ba,OAAA,CAAA,6BAAA,GAAqD;AAChE,EAAA,IAAI,EAAE,wBAD0D;AAEhE,EAAA,IAAI,EAAE,OAF0D;AAGhE,EAAA,IAAI,EAAE,CAAC,gBAAD,EAAmB,YAAnB;AAH0D,CAArD;;AAMA,OAAA,CAAA,kBAAA,GAAqB,UAChC,MADgC,EACD;AACP,SAAC;AACzB,IAAA,YAAY,EAAE,UAAA,WAAA,EAAW;AACvB,MAAA,WAAW,CAAC,GAAZ,CAAgB,mBAAmB,CAAC,MAAD,CAAnC,EAA6C,OAAA,CAAA,6BAA7C;AACD;AAHwB,GAAD;AAIxB,CANW","sourcesContent":["import {\n  BuildHandlerArguments,\n  BuildHandler,\n  MetadataBearer,\n  BuildHandlerOutput,\n  Pluggable,\n  BuildHandlerOptions\n} from \"@aws-sdk/types\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { UserAgentResolvedConfig } from \"./configurations\";\n\nexport function userAgentMiddleware(options: UserAgentResolvedConfig) {\n  return <Output extends MetadataBearer>(\n    next: BuildHandler<any, any>\n  ): BuildHandler<any, any> => (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    let { request } = args;\n    if (!HttpRequest.isInstance(request)) return next(args);\n    const { headers } = request;\n    const userAgentHeader =\n      options.runtime === \"node\" ? \"user-agent\" : \"x-amz-user-agent\";\n    if (!headers[userAgentHeader]) {\n      headers[userAgentHeader] = `${options.defaultUserAgent}`;\n    } else {\n      headers[userAgentHeader] += ` ${options.defaultUserAgent}`;\n    }\n    if (options.customUserAgent) {\n      headers[userAgentHeader] += ` ${options.customUserAgent}`;\n    }\n    return next({\n      ...args,\n      request\n    });\n  };\n}\n\nexport const getUserAgentMiddlewareOptions: BuildHandlerOptions = {\n  name: \"getUserAgentMiddleware\",\n  step: \"build\",\n  tags: [\"SET_USER_AGENT\", \"USER_AGENT\"]\n};\n\nexport const getUserAgentPlugin = (\n  config: UserAgentResolvedConfig\n): Pluggable<any, any> => ({\n  applyToStack: clientStack => {\n    clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}