{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { UpdateShardCountInput, UpdateShardCountOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1UpdateShardCountCommand, serializeAws_json1_1UpdateShardCountCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Updates the shard count of the specified stream to the specified number of\n *             shards.</p>\n *         <p>Updating the shard count is an asynchronous operation. Upon receiving the request,\n *             Kinesis Data Streams returns immediately and sets the status of the stream to\n *                 <code>UPDATING</code>. After the update is complete, Kinesis Data Streams sets the\n *             status of the stream back to <code>ACTIVE</code>. Depending on the size of the stream,\n *             the scaling action could take a few minutes to complete. You can continue to read and\n *             write data to your stream while its status is <code>UPDATING</code>.</p>\n *         <p>To update the shard count, Kinesis Data Streams performs splits or merges on\n *             individual shards. This can cause short-lived shards to be created, in addition to the\n *             final shards. These short-lived shards count towards your total shard limit for your\n *             account in the Region.</p>\n *         <p>When using this operation, we recommend that you specify a target shard count that\n *             is a multiple of 25% (25%, 50%, 75%, 100%). You can specify any target value within your\n *             shard limit. However, if you specify a target that isn't a multiple of 25%, the scaling\n *             action might take longer to complete. </p>\n *         <p>This operation has the following default limits. By default, you cannot do the\n *             following:</p>\n *         <ul>\n *             <li>\n *                 <p>Scale more than ten times per rolling 24-hour period per stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than double your current shard count for a\n *                     stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale down below half your current shard count for a stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than 500 shards in a stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale a stream with more than 500 shards down unless the result is less\n *                     than 500 shards</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than the shard limit for your account</p>\n *             </li>\n *          </ul>\n *         <p>For the default limits for an AWS account, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Streams Limits</a> in the\n *                 <i>Amazon Kinesis Data Streams Developer Guide</i>. To request an\n *             increase in the call rate limit, the shard limit for this API, or your overall shard\n *             limit, use the <a href=\"https://console.aws.amazon.com/support/v1#/case/create?issueType=service-limit-increase&limitType=service-code-kinesis\">limits form</a>.</p>\n */\n\nvar UpdateShardCountCommand =\n/** @class */\nfunction (_super) {\n  __extends(UpdateShardCountCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function UpdateShardCountCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  UpdateShardCountCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"UpdateShardCountCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: UpdateShardCountInput.filterSensitiveLog,\n      outputFilterSensitiveLog: UpdateShardCountOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  UpdateShardCountCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1UpdateShardCountCommand(input, context);\n  };\n\n  UpdateShardCountCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1UpdateShardCountCommand(output, context);\n  };\n\n  return UpdateShardCountCommand;\n}($Command);\n\nexport { UpdateShardCountCommand };","map":{"version":3,"sources":["../../../commands/UpdateShardCountCommand.ts"],"names":[],"mappings":";AACA,SAAS,qBAAT,EAAgC,sBAAhC,QAA8D,oBAA9D;AACA,SACE,6CADF,EAEE,2CAFF,QAGO,0BAHP;AAIA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CG;;AACH,IAAA,uBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6C,EAAA,SAAA,CAAA,uBAAA,EAAA,MAAA,CAAA,CAA7C,CAKE;AACA;;;AAEA,WAAA,uBAAA,CAAqB,KAArB,EAAwD;AAAxD,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAAmC,CAGtD;AACD;AAED;;AAEG;;;AACH,EAAA,uBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,eAAnB;AACA,QAAM,WAAW,GAAG,yBAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,qBAAqB,CAAC,kBAJQ;AAKvD,MAAA,wBAAwB,EAAE,sBAAsB,CAAC;AALM,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GAzBD;;AA2BQ,EAAA,uBAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAAuD,OAAvD,EAA8E;AAC5E,WAAO,2CAA2C,CAAC,KAAD,EAAQ,OAAR,CAAlD;AACD,GAFO;;AAIA,EAAA,uBAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,6CAA6C,CAAC,MAAD,EAAS,OAAT,CAApD;AACD,GAFO;;AAMV,SAAA,uBAAA;AAAC,CAtDD,CAA6C,QAA7C,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { UpdateShardCountInput, UpdateShardCountOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1UpdateShardCountCommand, serializeAws_json1_1UpdateShardCountCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Updates the shard count of the specified stream to the specified number of\n *             shards.</p>\n *         <p>Updating the shard count is an asynchronous operation. Upon receiving the request,\n *             Kinesis Data Streams returns immediately and sets the status of the stream to\n *                 <code>UPDATING</code>. After the update is complete, Kinesis Data Streams sets the\n *             status of the stream back to <code>ACTIVE</code>. Depending on the size of the stream,\n *             the scaling action could take a few minutes to complete. You can continue to read and\n *             write data to your stream while its status is <code>UPDATING</code>.</p>\n *         <p>To update the shard count, Kinesis Data Streams performs splits or merges on\n *             individual shards. This can cause short-lived shards to be created, in addition to the\n *             final shards. These short-lived shards count towards your total shard limit for your\n *             account in the Region.</p>\n *         <p>When using this operation, we recommend that you specify a target shard count that\n *             is a multiple of 25% (25%, 50%, 75%, 100%). You can specify any target value within your\n *             shard limit. However, if you specify a target that isn't a multiple of 25%, the scaling\n *             action might take longer to complete. </p>\n *         <p>This operation has the following default limits. By default, you cannot do the\n *             following:</p>\n *         <ul>\n *             <li>\n *                 <p>Scale more than ten times per rolling 24-hour period per stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than double your current shard count for a\n *                     stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale down below half your current shard count for a stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than 500 shards in a stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale a stream with more than 500 shards down unless the result is less\n *                     than 500 shards</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than the shard limit for your account</p>\n *             </li>\n *          </ul>\n *         <p>For the default limits for an AWS account, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Streams Limits</a> in the\n *                 <i>Amazon Kinesis Data Streams Developer Guide</i>. To request an\n *             increase in the call rate limit, the shard limit for this API, or your overall shard\n *             limit, use the <a href=\"https://console.aws.amazon.com/support/v1#/case/create?issueType=service-limit-increase&limitType=service-code-kinesis\">limits form</a>.</p>\n */\nvar UpdateShardCountCommand = /** @class */ (function (_super) {\n    __extends(UpdateShardCountCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function UpdateShardCountCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    UpdateShardCountCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"KinesisClient\";\n        var commandName = \"UpdateShardCountCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: UpdateShardCountInput.filterSensitiveLog,\n            outputFilterSensitiveLog: UpdateShardCountOutput.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    UpdateShardCountCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1UpdateShardCountCommand(input, context);\n    };\n    UpdateShardCountCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1UpdateShardCountCommand(output, context);\n    };\n    return UpdateShardCountCommand;\n}($Command));\nexport { UpdateShardCountCommand };\n//# sourceMappingURL=UpdateShardCountCommand.js.map"]},"metadata":{},"sourceType":"module"}