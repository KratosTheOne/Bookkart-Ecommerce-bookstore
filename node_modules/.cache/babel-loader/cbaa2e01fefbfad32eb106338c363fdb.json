{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nimport { v4 } from \"uuid\";\nimport { DEFAULT_RETRY_DELAY_BASE, INITIAL_RETRY_TOKENS, INVOCATION_ID_HEADER, REQUEST_HEADER, THROTTLING_RETRY_DELAY_BASE } from \"./constants\";\nimport { getDefaultRetryQuota } from \"./defaultRetryQuota\";\nimport { defaultDelayDecider } from \"./delayDecider\";\nimport { defaultRetryDecider } from \"./retryDecider\";\n/**\n * The default value for how many HTTP requests an SDK should make for a\n * single SDK operation invocation before giving up\n */\n\nexport var DEFAULT_MAX_ATTEMPTS = 3;\n/**\n * The default retry algorithm to use.\n */\n\nexport var DEFAULT_RETRY_MODE = \"standard\";\n\nvar StandardRetryStrategy =\n/** @class */\nfunction () {\n  function StandardRetryStrategy(maxAttemptsProvider, options) {\n    var _a, _b, _c;\n\n    this.maxAttemptsProvider = maxAttemptsProvider;\n    this.mode = DEFAULT_RETRY_MODE;\n    this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : defaultRetryDecider;\n    this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : defaultDelayDecider;\n    this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : getDefaultRetryQuota(INITIAL_RETRY_TOKENS);\n  }\n\n  StandardRetryStrategy.prototype.shouldRetry = function (error, attempts, maxAttempts) {\n    return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n  };\n\n  StandardRetryStrategy.prototype.getMaxAttempts = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var maxAttempts, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.maxAttemptsProvider()];\n\n          case 1:\n            maxAttempts = _a.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            error_1 = _a.sent();\n            maxAttempts = DEFAULT_MAX_ATTEMPTS;\n            return [3\n            /*break*/\n            , 3];\n\n          case 3:\n            return [2\n            /*return*/\n            , maxAttempts];\n        }\n      });\n    });\n  };\n\n  StandardRetryStrategy.prototype.retry = function (next, args) {\n    return __awaiter(this, void 0, void 0, function () {\n      var retryTokenAmount, attempts, totalDelay, maxAttempts, request, _loop_1, this_1, state_1;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            attempts = 0;\n            totalDelay = 0;\n            return [4\n            /*yield*/\n            , this.getMaxAttempts()];\n\n          case 1:\n            maxAttempts = _a.sent();\n            request = args.request;\n\n            if (HttpRequest.isInstance(request)) {\n              request.headers[INVOCATION_ID_HEADER] = v4();\n            }\n\n            _loop_1 = function () {\n              var _a, response, output, err_1, delay_1;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    _b.trys.push([0, 2,, 5]);\n\n                    if (HttpRequest.isInstance(request)) {\n                      request.headers[REQUEST_HEADER] = \"attempt=\" + (attempts + 1) + \"; max=\" + maxAttempts;\n                    }\n\n                    return [4\n                    /*yield*/\n                    , next(args)];\n\n                  case 1:\n                    _a = _b.sent(), response = _a.response, output = _a.output;\n                    this_1.retryQuota.releaseRetryTokens(retryTokenAmount);\n                    output.$metadata.attempts = attempts + 1;\n                    output.$metadata.totalRetryDelay = totalDelay;\n                    return [2\n                    /*return*/\n                    , {\n                      value: {\n                        response: response,\n                        output: output\n                      }\n                    }];\n\n                  case 2:\n                    err_1 = _b.sent();\n                    attempts++;\n                    if (!this_1.shouldRetry(err_1, attempts, maxAttempts)) return [3\n                    /*break*/\n                    , 4];\n                    retryTokenAmount = this_1.retryQuota.retrieveRetryTokens(err_1);\n                    delay_1 = this_1.delayDecider(isThrottlingError(err_1) ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE, attempts);\n                    totalDelay += delay_1;\n                    return [4\n                    /*yield*/\n                    , new Promise(function (resolve) {\n                      return setTimeout(resolve, delay_1);\n                    })];\n\n                  case 3:\n                    _b.sent();\n\n                    return [2\n                    /*return*/\n                    , \"continue\"];\n\n                  case 4:\n                    if (!err_1.$metadata) {\n                      err_1.$metadata = {};\n                    }\n\n                    err_1.$metadata.attempts = attempts;\n                    err_1.$metadata.totalRetryDelay = totalDelay;\n                    throw err_1;\n\n                  case 5:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_1 = this;\n            _a.label = 2;\n\n          case 2:\n            if (!true) return [3\n            /*break*/\n            , 4];\n            return [5\n            /*yield**/\n            , _loop_1()];\n\n          case 3:\n            state_1 = _a.sent();\n            if (typeof state_1 === \"object\") return [2\n            /*return*/\n            , state_1.value];\n            return [3\n            /*break*/\n            , 2];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return StandardRetryStrategy;\n}();\n\nexport { StandardRetryStrategy };","map":{"version":3,"sources":["../../src/defaultStrategy.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nimport { SdkError } from \"@aws-sdk/smithy-client\";\nimport { FinalizeHandler, FinalizeHandlerArguments, MetadataBearer, Provider, RetryStrategy } from \"@aws-sdk/types\";\nimport { v4 } from \"uuid\";\n\nimport {\n  DEFAULT_RETRY_DELAY_BASE,\n  INITIAL_RETRY_TOKENS,\n  INVOCATION_ID_HEADER,\n  REQUEST_HEADER,\n  THROTTLING_RETRY_DELAY_BASE,\n} from \"./constants\";\nimport { getDefaultRetryQuota } from \"./defaultRetryQuota\";\nimport { defaultDelayDecider } from \"./delayDecider\";\nimport { defaultRetryDecider } from \"./retryDecider\";\n\n/**\n * The default value for how many HTTP requests an SDK should make for a\n * single SDK operation invocation before giving up\n */\nexport const DEFAULT_MAX_ATTEMPTS = 3;\n\n/**\n * The default retry algorithm to use.\n */\nexport const DEFAULT_RETRY_MODE = \"standard\";\n\n/**\n * Determines whether an error is retryable based on the number of retries\n * already attempted, the HTTP status code, and the error received (if any).\n *\n * @param error         The error encountered.\n */\nexport interface RetryDecider {\n  (error: SdkError): boolean;\n}\n\n/**\n * Determines the number of milliseconds to wait before retrying an action.\n *\n * @param delayBase The base delay (in milliseconds).\n * @param attempts  The number of times the action has already been tried.\n */\nexport interface DelayDecider {\n  (delayBase: number, attempts: number): number;\n}\n\n/**\n * Interface that specifies the retry quota behavior.\n */\nexport interface RetryQuota {\n  /**\n   * returns true if retry tokens are available from the retry quota bucket.\n   */\n  hasRetryTokens: (error: SdkError) => boolean;\n\n  /**\n   * returns token amount from the retry quota bucket.\n   * throws error is retry tokens are not available.\n   */\n  retrieveRetryTokens: (error: SdkError) => number;\n\n  /**\n   * releases tokens back to the retry quota.\n   */\n  releaseRetryTokens: (releaseCapacityAmount?: number) => void;\n}\n\n/**\n * Strategy options to be passed to StandardRetryStrategy\n */\nexport interface StandardRetryStrategyOptions {\n  retryDecider?: RetryDecider;\n  delayDecider?: DelayDecider;\n  retryQuota?: RetryQuota;\n}\n\nexport class StandardRetryStrategy implements RetryStrategy {\n  private retryDecider: RetryDecider;\n  private delayDecider: DelayDecider;\n  private retryQuota: RetryQuota;\n  public readonly mode = DEFAULT_RETRY_MODE;\n\n  constructor(private readonly maxAttemptsProvider: Provider<number>, options?: StandardRetryStrategyOptions) {\n    this.retryDecider = options?.retryDecider ?? defaultRetryDecider;\n    this.delayDecider = options?.delayDecider ?? defaultDelayDecider;\n    this.retryQuota = options?.retryQuota ?? getDefaultRetryQuota(INITIAL_RETRY_TOKENS);\n  }\n\n  private shouldRetry(error: SdkError, attempts: number, maxAttempts: number) {\n    return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n  }\n\n  private async getMaxAttempts() {\n    let maxAttempts: number;\n    try {\n      maxAttempts = await this.maxAttemptsProvider();\n    } catch (error) {\n      maxAttempts = DEFAULT_MAX_ATTEMPTS;\n    }\n    return maxAttempts;\n  }\n\n  async retry<Input extends object, Ouput extends MetadataBearer>(\n    next: FinalizeHandler<Input, Ouput>,\n    args: FinalizeHandlerArguments<Input>\n  ) {\n    let retryTokenAmount;\n    let attempts = 0;\n    let totalDelay = 0;\n\n    const maxAttempts = await this.getMaxAttempts();\n\n    const { request } = args;\n    if (HttpRequest.isInstance(request)) {\n      request.headers[INVOCATION_ID_HEADER] = v4();\n    }\n\n    while (true) {\n      try {\n        if (HttpRequest.isInstance(request)) {\n          request.headers[REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n        }\n        const { response, output } = await next(args);\n\n        this.retryQuota.releaseRetryTokens(retryTokenAmount);\n        output.$metadata.attempts = attempts + 1;\n        output.$metadata.totalRetryDelay = totalDelay;\n\n        return { response, output };\n      } catch (err) {\n        attempts++;\n        if (this.shouldRetry(err as SdkError, attempts, maxAttempts)) {\n          retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n          const delay = this.delayDecider(\n            isThrottlingError(err) ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE,\n            attempts\n          );\n          totalDelay += delay;\n\n          await new Promise((resolve) => setTimeout(resolve, delay));\n          continue;\n        }\n\n        if (!err.$metadata) {\n          err.$metadata = {};\n        }\n\n        err.$metadata.attempts = attempts;\n        err.$metadata.totalRetryDelay = totalDelay;\n        throw err;\n      }\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}