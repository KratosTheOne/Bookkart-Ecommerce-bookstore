{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { HttpResponse } from \"@aws-sdk/protocol-http\";\n/**\n * In case of an internal error/terminated connection, S3 operations may return 200 errors. CopyObject, UploadPartCopy,\n * CompleteMultipartUpload may return empty payload or payload with only xml Preamble.\n * @internal\n */\n\nexport var throw200ExceptionsMiddleware = function (config) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var result, response, statusCode, body, bodyBytes, bodyString, err;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , next(args)];\n\n            case 1:\n              result = _a.sent();\n              response = result.response;\n              if (!HttpResponse.isInstance(response)) return [2\n              /*return*/\n              , result];\n              statusCode = response.statusCode, body = response.body;\n              if (statusCode < 200 && statusCode >= 300) return [2\n              /*return*/\n              , result];\n              return [4\n              /*yield*/\n              , collectBody(body, config)];\n\n            case 2:\n              bodyBytes = _a.sent();\n              return [4\n              /*yield*/\n              , collectBodyString(bodyBytes, config)];\n\n            case 3:\n              bodyString = _a.sent();\n\n              if (bodyBytes.length === 0) {\n                err = new Error(\"S3 aborted request\");\n                err.name = \"InternalError\";\n                throw err;\n              }\n\n              if (bodyString && bodyString.match(\"<Error>\")) {\n                // Set the error code to 4XX so that error deserializer can parse them\n                response.statusCode = 400;\n              } // Body stream is consumed and paused at this point. So replace the response.body to the collected bytes.\n              // So that the deserializer can consume the body as normal.\n\n\n              response.body = bodyBytes;\n              return [2\n              /*return*/\n              , result];\n          }\n        });\n      });\n    };\n  };\n}; // Collect low-level response body stream to Uint8Array.\n\nvar collectBody = function (streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n}; // Encode Uint8Array data into string with utf-8.\n\n\nvar collectBodyString = function (streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\n/**\n * @internal\n */\n\n\nexport var throw200ExceptionsMiddlewareOptions = {\n  relation: \"after\",\n  toMiddleware: \"deserializerMiddleware\",\n  tags: [\"THROW_200_EXCEPTIONS\", \"S3\"],\n  name: \"throw200ExceptionsMiddleware\",\n  override: true\n};\n/**\n *\n * @internal\n */\n\nexport var getThrow200ExceptionsPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/throw-200-exceptions.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { DeserializeMiddleware, Encoder, Pluggable, RelativeMiddlewareOptions, StreamCollector } from \"@aws-sdk/types\";\n\ntype PreviouslyResolved = {\n  streamCollector: StreamCollector;\n  utf8Encoder: Encoder;\n};\n\n/**\n * In case of an internal error/terminated connection, S3 operations may return 200 errors. CopyObject, UploadPartCopy,\n * CompleteMultipartUpload may return empty payload or payload with only xml Preamble.\n * @internal\n */\nexport const throw200ExceptionsMiddleware = (config: PreviouslyResolved): DeserializeMiddleware<any, any> => (\n  next\n) => async (args) => {\n  const result = await next(args);\n  const { response } = result;\n  if (!HttpResponse.isInstance(response)) return result;\n  const { statusCode, body } = response;\n  if (statusCode < 200 && statusCode >= 300) return result;\n\n  // Throw 2XX response that's either an error or has empty body.\n  const bodyBytes = await collectBody(body, config);\n  const bodyString = await collectBodyString(bodyBytes, config);\n  if (bodyBytes.length === 0) {\n    const err = new Error(\"S3 aborted request\");\n    err.name = \"InternalError\";\n    throw err;\n  }\n  if (bodyString && bodyString.match(\"<Error>\")) {\n    // Set the error code to 4XX so that error deserializer can parse them\n    response.statusCode = 400;\n  }\n\n  // Body stream is consumed and paused at this point. So replace the response.body to the collected bytes.\n  // So that the deserializer can consume the body as normal.\n  response.body = bodyBytes;\n  return result;\n};\n\n// Collect low-level response body stream to Uint8Array.\nconst collectBody = (streamBody: any = new Uint8Array(), context: PreviouslyResolved): Promise<Uint8Array> => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\n// Encode Uint8Array data into string with utf-8.\nconst collectBodyString = (streamBody: any, context: PreviouslyResolved): Promise<string> =>\n  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\n\n/**\n * @internal\n */\nexport const throw200ExceptionsMiddlewareOptions: RelativeMiddlewareOptions = {\n  relation: \"after\",\n  toMiddleware: \"deserializerMiddleware\",\n  tags: [\"THROW_200_EXCEPTIONS\", \"S3\"],\n  name: \"throw200ExceptionsMiddleware\",\n  override: true,\n};\n\n/**\n *\n * @internal\n */\nexport const getThrow200ExceptionsPlugin = (config: PreviouslyResolved): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}