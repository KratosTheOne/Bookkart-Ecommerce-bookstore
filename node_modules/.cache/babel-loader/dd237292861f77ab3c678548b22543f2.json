{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\n/**\n * @internal\n */\n\nexport var useRegionalEndpointMiddleware = function (config) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var request, _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              request = args.request;\n              if (!HttpRequest.isInstance(request) || config.isCustomEndpoint) return [2\n              /*return*/\n              , next(__assign({}, args))];\n              if (!(request.hostname === \"s3.amazonaws.com\")) return [3\n              /*break*/\n              , 1];\n              request.hostname = \"s3.us-east-1.amazonaws.com\";\n              return [3\n              /*break*/\n              , 3];\n\n            case 1:\n              _a = \"aws-global\";\n              return [4\n              /*yield*/\n              , config.region()];\n\n            case 2:\n              if (_a === _b.sent()) {\n                request.hostname = \"s3.amazonaws.com\";\n              }\n\n              _b.label = 3;\n\n            case 3:\n              return [2\n              /*return*/\n              , next(__assign({}, args))];\n          }\n        });\n      });\n    };\n  };\n};\n/**\n * @internal\n */\n\nexport var useRegionalEndpointMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"USE_REGIONAL_ENDPOINT\", \"S3\"],\n  name: \"useRegionalEndpointMiddleware\",\n  override: true\n};\n/**\n * @internal\n */\n\nexport var getUseRegionalEndpointPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(useRegionalEndpointMiddleware(config), useRegionalEndpointMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/use-regional-endpoint.ts"],"names":[],"mappings":";AAAA,SAAS,WAAT,QAA4B,wBAA5B;AAiBA;;AAEG;;AACH,OAAO,IAAM,6BAA6B,GAAG,UAAC,MAAD,EAA2B;AAAgC,SAAA,UAGtG,IAHsG,EAGvE;AACD,WAAA,UAAO,IAAP,EAAuC;AAAA,aAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;AAC7D,cAAA,OAAO,GAAK,IAAI,CAAT,OAAP;AACR,kBAAI,CAAC,WAAW,CAAC,UAAZ,CAAuB,OAAvB,CAAD,IAAoC,MAAM,CAAC,gBAA/C,EAAiE,OAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,CAAA,QAAA,CAAA,EAAA,EAAM,IAAN,CAAA,CAAX,CAAA;kBAC7D,EAAA,OAAO,CAAC,QAAR,KAAqB,kBAArB,C,EAAA,OAAA,CAAA;AAAA;AAAA,gBAAA,CAAA,CAAA;AACF,cAAA,OAAO,CAAC,QAAR,GAAmB,4BAAnB;;;;;;AACS,cAAA,EAAA,GAAA,YAAA;AAAkB,qBAAA,CAAA;AAAA;AAAA,gBAAM,MAAM,CAAC,MAAP,EAAN,CAAA;;;AAAtB,kBAAI,EAAA,KAAkB,EAAA,CAAA,IAAA,EAAtB,EAA8C;AACnD,gBAAA,OAAO,CAAC,QAAR,GAAmB,kBAAnB;AACD;;;;;AACD,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,CAAA,QAAA,CAAA,EAAA,EAAM,IAAN,CAAA,CAAX,CAAA;;;OARqE,CAAA;AAAvC,KAAA;AAJwE,GAAA;AAavG,CAbM;AAeP;;AAEG;;AACH,OAAO,IAAM,oCAAoC,GAAwB;AACvE,EAAA,IAAI,EAAE,OADiE;AAEvE,EAAA,IAAI,EAAE,CAAC,uBAAD,EAA0B,IAA1B,CAFiE;AAGvE,EAAA,IAAI,EAAE,+BAHiE;AAIvE,EAAA,QAAQ,EAAE;AAJ6D,CAAlE;AAOP;;AAEG;;AACH,OAAO,IAAM,4BAA4B,GAAG,UAAC,MAAD,EAA2B;AAA0B,SAAC;AAChG,IAAA,YAAY,EAAE,UAAC,WAAD,EAAY;AACxB,MAAA,WAAW,CAAC,GAAZ,CAAgB,6BAA6B,CAAC,MAAD,CAA7C,EAAuD,oCAAvD;AACD;AAH+F,GAAD;AAI/F,CAJK","sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  MetadataBearer,\n  Pluggable,\n  Provider,\n} from \"@aws-sdk/types\";\n\ntype PreviouslyResolved = {\n  region: Provider<string>;\n  isCustomEndpoint: boolean;\n};\n\n/**\n * @internal\n */\nexport const useRegionalEndpointMiddleware = (config: PreviouslyResolved): BuildMiddleware<any, any> => <\n  Output extends MetadataBearer\n>(\n  next: BuildHandler<any, Output>\n): BuildHandler<any, Output> => async (args: BuildHandlerArguments<any>): Promise<BuildHandlerOutput<Output>> => {\n  const { request } = args;\n  if (!HttpRequest.isInstance(request) || config.isCustomEndpoint) return next({ ...args });\n  if (request.hostname === \"s3.amazonaws.com\") {\n    request.hostname = \"s3.us-east-1.amazonaws.com\";\n  } else if (\"aws-global\" === (await config.region())) {\n    request.hostname = \"s3.amazonaws.com\";\n  }\n  return next({ ...args });\n};\n\n/**\n * @internal\n */\nexport const useRegionalEndpointMiddlewareOptions: BuildHandlerOptions = {\n  step: \"build\",\n  tags: [\"USE_REGIONAL_ENDPOINT\", \"S3\"],\n  name: \"useRegionalEndpointMiddleware\",\n  override: true,\n};\n\n/**\n * @internal\n */\nexport const getUseRegionalEndpointPlugin = (config: PreviouslyResolved): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(useRegionalEndpointMiddleware(config), useRegionalEndpointMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}