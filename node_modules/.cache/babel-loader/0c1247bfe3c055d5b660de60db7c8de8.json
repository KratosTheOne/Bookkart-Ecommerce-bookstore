{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar middleware_stack_1 = require(\"@aws-sdk/middleware-stack\");\n\nvar Client =\n/** @class */\nfunction () {\n  function Client(config) {\n    this.middlewareStack = new middleware_stack_1.MiddlewareStack();\n    this.config = config;\n  }\n\n  Client.prototype.send = function (command, optionsOrCb, cb) {\n    var options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n    var callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n    var handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n\n    if (callback) {\n      handler(command).then(function (result) {\n        return callback(null, result.output);\n      }, function (err) {\n        return callback(err);\n      }).catch( // prevent any errors thrown in the callback from triggering an\n      // unhandled promise rejection\n      function () {});\n    } else {\n      return handler(command).then(function (result) {\n        return result.output;\n      });\n    }\n  };\n\n  Client.prototype.destroy = function () {\n    if (this.config.requestHandler.destroy) this.config.requestHandler.destroy();\n  };\n\n  return Client;\n}();\n\nexports.Client = Client;","map":{"version":3,"sources":["../src/client.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,kBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AAiBA,IAAA,MAAA;AAAA;AAAA,YAAA;AAUE,WAAA,MAAA,CAAY,MAAZ,EAA+C;AAFxC,SAAA,eAAA,GAAkB,IAAI,kBAAA,CAAA,eAAJ,EAAlB;AAGL,SAAK,MAAL,GAAc,MAAd;AACD;;AAgCD,EAAA,MAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UACE,OADF,EAQE,WARF,EASE,EATF,EAS4C;AAE1C,QAAM,OAAO,GAAG,OAAO,WAAP,KAAuB,UAAvB,GAAoC,WAApC,GAAkD,SAAlE;AACA,QAAM,QAAQ,GACZ,OAAO,WAAP,KAAuB,UAAvB,GACK,WADL,GAEI,EAHN;AAIA,QAAM,OAAO,GAAG,OAAO,CAAC,iBAAR,CACd,KAAK,eADS,EAEd,KAAK,MAFS,EAGd,OAHc,CAAhB;;AAKA,QAAI,QAAJ,EAAc;AACZ,MAAA,OAAO,CAAC,OAAD,CAAP,CACG,IADH,CAEI,UAAA,MAAA,EAAM;AAAI,eAAA,QAAQ,CAAC,IAAD,EAAO,MAAM,CAArB,MAAQ,CAAR;AAA6B,OAF3C,EAGI,UAAC,GAAD,EAAS;AAAK,eAAA,QAAQ,CAAR,GAAQ,CAAR;AAAa,OAH/B,EAKG,KALH,EAMI;AACA;AACA,kBAAA,CAAQ,CARZ;AAUD,KAXD,MAWO;AACL,aAAO,OAAO,CAAC,OAAD,CAAP,CAAiB,IAAjB,CAAsB,UAAA,MAAA,EAAM;AAAI,eAAA,MAAM,CAAN,MAAA;AAAa,OAA7C,CAAP;AACD;AACF,GAnCD;;AAqCA,EAAA,MAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,QAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,OAA/B,EACE,KAAK,MAAL,CAAY,cAAZ,CAA2B,OAA3B;AACH,GAHD;;AAIF,SAAA,MAAA;AAAC,CArFD,EAAA;;AAAa,OAAA,CAAA,MAAA,GAAA,MAAA","sourcesContent":["import { MiddlewareStack } from \"@aws-sdk/middleware-stack\";\nimport {\n  RequestHandler,\n  MetadataBearer,\n  Command,\n  Client as IClient\n} from \"@aws-sdk/types\";\n\nexport interface SmithyConfiguration<HandlerOptions> {\n  requestHandler: RequestHandler<any, any, HandlerOptions>;\n  readonly apiVersion: string;\n}\n\nexport type SmithyResolvedConfiguration<HandlerOptions> = SmithyConfiguration<\n  HandlerOptions\n>;\n\nexport class Client<\n  HandlerOptions,\n  ClientInput extends object,\n  ClientOutput extends MetadataBearer,\n  ResolvedClientConfiguration extends SmithyResolvedConfiguration<\n    HandlerOptions\n  >\n> implements IClient<ClientInput, ClientOutput, ResolvedClientConfiguration> {\n  public middlewareStack = new MiddlewareStack<ClientInput, ClientOutput>();\n  readonly config: ResolvedClientConfiguration;\n  constructor(config: ResolvedClientConfiguration) {\n    this.config = config;\n  }\n  send<InputType extends ClientInput, OutputType extends ClientOutput>(\n    command: Command<\n      ClientInput,\n      InputType,\n      ClientOutput,\n      OutputType,\n      SmithyResolvedConfiguration<HandlerOptions>\n    >,\n    options?: HandlerOptions\n  ): Promise<OutputType>;\n  send<InputType extends ClientInput, OutputType extends ClientOutput>(\n    command: Command<\n      ClientInput,\n      InputType,\n      ClientOutput,\n      OutputType,\n      SmithyResolvedConfiguration<HandlerOptions>\n    >,\n    cb: (err: any, data?: OutputType) => void\n  ): void;\n  send<InputType extends ClientInput, OutputType extends ClientOutput>(\n    command: Command<\n      ClientInput,\n      InputType,\n      ClientOutput,\n      OutputType,\n      SmithyResolvedConfiguration<HandlerOptions>\n    >,\n    options: HandlerOptions,\n    cb: (err: any, data?: OutputType) => void\n  ): void;\n  send<InputType extends ClientInput, OutputType extends ClientOutput>(\n    command: Command<\n      ClientInput,\n      InputType,\n      ClientOutput,\n      OutputType,\n      SmithyResolvedConfiguration<HandlerOptions>\n    >,\n    optionsOrCb?: HandlerOptions | ((err: any, data?: OutputType) => void),\n    cb?: (err: any, data?: OutputType) => void\n  ): Promise<OutputType> | void {\n    const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n    const callback =\n      typeof optionsOrCb === \"function\"\n        ? (optionsOrCb as (err: any, data?: OutputType) => void)\n        : cb;\n    const handler = command.resolveMiddleware(\n      this.middlewareStack as any,\n      this.config,\n      options\n    );\n    if (callback) {\n      handler(command)\n        .then(\n          result => callback(null, result.output),\n          (err: any) => callback(err)\n        )\n        .catch(\n          // prevent any errors thrown in the callback from triggering an\n          // unhandled promise rejection\n          () => {}\n        );\n    } else {\n      return handler(command).then(result => result.output);\n    }\n  }\n\n  destroy() {\n    if (this.config.requestHandler.destroy)\n      this.config.requestHandler.destroy();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}