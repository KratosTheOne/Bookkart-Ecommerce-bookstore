{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar protocol_http_1 = require(\"@aws-sdk/protocol-http\");\n\nvar CONTENT_LENGTH_HEADER = \"content-length\";\n\nfunction contentLengthMiddleware(bodyLengthChecker) {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var request, body, headers, length;\n\n        var _a;\n\n        return tslib_1.__generator(this, function (_b) {\n          request = args.request;\n\n          if (protocol_http_1.HttpRequest.isInstance(request)) {\n            body = request.body, headers = request.headers;\n\n            if (body && Object.keys(headers).map(function (str) {\n              return str.toLowerCase();\n            }).indexOf(CONTENT_LENGTH_HEADER) === -1) {\n              length = bodyLengthChecker(body);\n\n              if (length !== undefined) {\n                request.headers = tslib_1.__assign(tslib_1.__assign({}, request.headers), (_a = {}, _a[CONTENT_LENGTH_HEADER] = String(length), _a));\n              }\n            }\n          }\n\n          return [2\n          /*return*/\n          , next(tslib_1.__assign(tslib_1.__assign({}, args), {\n            request: request\n          }))];\n        });\n      });\n    };\n  };\n}\n\nexports.contentLengthMiddleware = contentLengthMiddleware;\nexports.contentLengthMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"SET_CONTENT_LENGTH\", \"CONTENT_LENGTH\"],\n  name: \"contentLengthMiddleware\"\n};\n\nexports.getContentLengthPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports.contentLengthMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;AAUA,IAAA,eAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAEA,IAAM,qBAAqB,GAAG,gBAA9B;;AAEA,SAAgB,uBAAhB,CACE,iBADF,EACyC;AADzC,MAAA,KAAA,GAAA,IAAA;;AAGE,SAAO,UACL,IADK,EAC0B;AACD,WAAA,UAC9B,IAD8B,EACE;AAAA,aAAA,OAAA,CAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;AAE5B,UAAA,OAAO,GAAG,IAAI,CAAC,OAAf;;AACJ,cAAI,eAAA,CAAA,WAAA,CAAY,UAAZ,CAAuB,OAAvB,CAAJ,EAAqC;AAC3B,YAAA,IAAI,GAAc,OAAO,CAArB,IAAJ,EAAM,OAAO,GAAK,OAAO,CAAZ,OAAb;;AACR,gBACE,IAAI,IACJ,MAAM,CAAC,IAAP,CAAY,OAAZ,EACG,GADH,CACO,UAAA,GAAA,EAAG;AAAI,qBAAA,GAAG,CAAH,WAAA,EAAA;AAAiB,aAD/B,EAEG,OAFH,CAEW,qBAFX,MAEsC,CAAC,CAJzC,EAKE;AACM,cAAA,MAAM,GAAG,iBAAiB,CAAC,IAAD,CAA1B;;AACN,kBAAI,MAAM,KAAK,SAAf,EAA0B;AACxB,gBAAA,OAAO,CAAC,OAAR,GAAe,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACV,OAAO,CAAC,OADE,CAAA,GACK,EAAA,GAAA,EAAA,EAAA,EAAA,CACjB,qBADiB,CAAA,GACO,MAAM,CAAC,MAAD,CADb,EACqB,EAF1B,EAAf;AAID;AACF;AACF;;AAED,iBAAA,CAAA;AAAA;AAAA,YAAO,IAAI,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACN,IADM,CAAA,EACF;AACP,YAAA,OAAO,EAAA;AADA,WADE,CAAA,CAAX,CAAA;;OArBgC,CAAA;AADF,KAAA;AA0B/B,GA5BD;AA6BD;;AAhCD,OAAA,CAAA,uBAAA,GAAA,uBAAA;AAkCa,OAAA,CAAA,8BAAA,GAAsD;AACjE,EAAA,IAAI,EAAE,OAD2D;AAEjE,EAAA,IAAI,EAAE,CAAC,oBAAD,EAAuB,gBAAvB,CAF2D;AAGjE,EAAA,IAAI,EAAE;AAH2D,CAAtD;;AAMA,OAAA,CAAA,sBAAA,GAAyB,UAAC,OAAD,EAErC;AAA0B,SAAC;AAC1B,IAAA,YAAY,EAAE,UAAA,WAAA,EAAW;AACvB,MAAA,WAAW,CAAC,GAAZ,CACE,uBAAuB,CAAC,OAAO,CAAC,iBAAT,CADzB,EAEE,OAAA,CAAA,8BAFF;AAID;AANyB,GAAD;AAOzB,CATW","sourcesContent":["import {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildMiddleware,\n  BodyLengthCalculator,\n  MetadataBearer,\n  BuildHandlerOutput,\n  Pluggable,\n  BuildHandlerOptions\n} from \"@aws-sdk/types\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\n\nconst CONTENT_LENGTH_HEADER = \"content-length\";\n\nexport function contentLengthMiddleware(\n  bodyLengthChecker: BodyLengthCalculator\n): BuildMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: BuildHandler<any, Output>\n  ): BuildHandler<any, Output> => async (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    let request = args.request;\n    if (HttpRequest.isInstance(request)) {\n      const { body, headers } = request;\n      if (\n        body &&\n        Object.keys(headers)\n          .map(str => str.toLowerCase())\n          .indexOf(CONTENT_LENGTH_HEADER) === -1\n      ) {\n        const length = bodyLengthChecker(body);\n        if (length !== undefined) {\n          request.headers = {\n            ...request.headers,\n            [CONTENT_LENGTH_HEADER]: String(length)\n          };\n        }\n      }\n    }\n\n    return next({\n      ...args,\n      request\n    });\n  };\n}\n\nexport const contentLengthMiddlewareOptions: BuildHandlerOptions = {\n  step: \"build\",\n  tags: [\"SET_CONTENT_LENGTH\", \"CONTENT_LENGTH\"],\n  name: \"contentLengthMiddleware\"\n};\n\nexport const getContentLengthPlugin = (options: {\n  bodyLengthChecker: BodyLengthCalculator;\n}): Pluggable<any, any> => ({\n  applyToStack: clientStack => {\n    clientStack.add(\n      contentLengthMiddleware(options.bodyLengthChecker),\n      contentLengthMiddlewareOptions\n    );\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}