{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutBucketWebsiteRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlPutBucketWebsiteCommand, serializeAws_restXmlPutBucketWebsiteCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Sets the configuration of the website that is specified in the <code>website</code>\n *          subresource. To configure a bucket as a website, you can add this subresource on the bucket\n *          with website configuration information such as the file name of the index document and any\n *          redirect rules. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html\">Hosting Websites on Amazon S3</a>.</p>\n *\n *          <p>This PUT operation requires the <code>S3:PutBucketWebsite</code> permission. By default,\n *          only the bucket owner can configure the website attached to a bucket; however, bucket\n *          owners can allow other users to set the website configuration by writing a bucket policy\n *          that grants them the <code>S3:PutBucketWebsite</code> permission.</p>\n *\n *          <p>To redirect all website requests sent to the bucket's website endpoint, you add a\n *          website configuration with the following elements. Because all requests are sent to another\n *          website, you don't need to provide index document name for the bucket.</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <code>WebsiteConfiguration</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>RedirectAllRequestsTo</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HostName</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Protocol</code>\n *                </p>\n *             </li>\n *          </ul>\n *\n *          <p>If you want granular control over redirects, you can use the following elements to add\n *          routing rules that describe conditions for redirecting requests and information about the\n *          redirect destination. In this case, the website configuration must provide an index\n *          document for the bucket, because some requests might not be redirected. </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <code>WebsiteConfiguration</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>IndexDocument</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Suffix</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>ErrorDocument</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Key</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>RoutingRules</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>RoutingRule</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Condition</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HttpErrorCodeReturnedEquals</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>KeyPrefixEquals</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Redirect</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Protocol</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HostName</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>ReplaceKeyPrefixWith</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>ReplaceKeyWith</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HttpRedirectCode</code>\n *                </p>\n *             </li>\n *          </ul>\n *\n *          <p>Amazon S3 has a limitation of 50 routing rules per website configuration. If you require more\n *          than 50 routing rules, you can use object redirect. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html\">Configuring an\n *             Object Redirect</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n */\n\nvar PutBucketWebsiteCommand =\n/** @class */\nfunction (_super) {\n  __extends(PutBucketWebsiteCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PutBucketWebsiteCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PutBucketWebsiteCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"PutBucketWebsiteCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutBucketWebsiteRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutBucketWebsiteCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlPutBucketWebsiteCommand(input, context);\n  };\n\n  PutBucketWebsiteCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlPutBucketWebsiteCommand(output, context);\n  };\n\n  return PutBucketWebsiteCommand;\n}($Command);\n\nexport { PutBucketWebsiteCommand };","map":{"version":3,"sources":["../../../commands/PutBucketWebsiteCommand.ts"],"names":[],"mappings":";AACA,SAAS,uBAAT,QAAwC,oBAAxC;AACA,SACE,6CADF,EAEE,2CAFF,QAGO,0BAHP;AAIA,SAAS,uBAAT,QAAwC,qCAAxC;AACA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+HG;;AACH,IAAA,uBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6C,EAAA,SAAA,CAAA,uBAAA,EAAA,MAAA,CAAA,CAA7C,CAKE;AACA;;;AAEA,WAAA,uBAAA,CAAqB,KAArB,EAAwD;AAAxD,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAAmC,CAGtD;AACD;AAED;;AAEG;;;AACH,EAAA,uBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AACA,SAAK,eAAL,CAAqB,GAArB,CAAyB,uBAAuB,CAAC,aAAD,CAAhD;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,UAAnB;AACA,QAAM,WAAW,GAAG,yBAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,uBAAuB,CAAC,kBAJM;AAKvD,MAAA,wBAAwB,EAAE,UAAC,MAAD,EAAY;AAAK,eAAA,MAAA;AAAM;AALM,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GA1BD;;AA4BQ,EAAA,uBAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAAuD,OAAvD,EAA8E;AAC5E,WAAO,2CAA2C,CAAC,KAAD,EAAQ,OAAR,CAAlD;AACD,GAFO;;AAIA,EAAA,uBAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,6CAA6C,CAAC,MAAD,EAAS,OAAT,CAApD;AACD,GAFO;;AAMV,SAAA,uBAAA;AAAC,CAvDD,CAA6C,QAA7C,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { PutBucketWebsiteRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlPutBucketWebsiteCommand, serializeAws_restXmlPutBucketWebsiteCommand, } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Sets the configuration of the website that is specified in the <code>website</code>\n *          subresource. To configure a bucket as a website, you can add this subresource on the bucket\n *          with website configuration information such as the file name of the index document and any\n *          redirect rules. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html\">Hosting Websites on Amazon S3</a>.</p>\n *\n *          <p>This PUT operation requires the <code>S3:PutBucketWebsite</code> permission. By default,\n *          only the bucket owner can configure the website attached to a bucket; however, bucket\n *          owners can allow other users to set the website configuration by writing a bucket policy\n *          that grants them the <code>S3:PutBucketWebsite</code> permission.</p>\n *\n *          <p>To redirect all website requests sent to the bucket's website endpoint, you add a\n *          website configuration with the following elements. Because all requests are sent to another\n *          website, you don't need to provide index document name for the bucket.</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <code>WebsiteConfiguration</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>RedirectAllRequestsTo</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HostName</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Protocol</code>\n *                </p>\n *             </li>\n *          </ul>\n *\n *          <p>If you want granular control over redirects, you can use the following elements to add\n *          routing rules that describe conditions for redirecting requests and information about the\n *          redirect destination. In this case, the website configuration must provide an index\n *          document for the bucket, because some requests might not be redirected. </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <code>WebsiteConfiguration</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>IndexDocument</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Suffix</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>ErrorDocument</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Key</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>RoutingRules</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>RoutingRule</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Condition</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HttpErrorCodeReturnedEquals</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>KeyPrefixEquals</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Redirect</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Protocol</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HostName</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>ReplaceKeyPrefixWith</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>ReplaceKeyWith</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HttpRedirectCode</code>\n *                </p>\n *             </li>\n *          </ul>\n *\n *          <p>Amazon S3 has a limitation of 50 routing rules per website configuration. If you require more\n *          than 50 routing rules, you can use object redirect. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html\">Configuring an\n *             Object Redirect</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n */\nvar PutBucketWebsiteCommand = /** @class */ (function (_super) {\n    __extends(PutBucketWebsiteCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function PutBucketWebsiteCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    PutBucketWebsiteCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"S3Client\";\n        var commandName = \"PutBucketWebsiteCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: PutBucketWebsiteRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: function (output) { return output; },\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    PutBucketWebsiteCommand.prototype.serialize = function (input, context) {\n        return serializeAws_restXmlPutBucketWebsiteCommand(input, context);\n    };\n    PutBucketWebsiteCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_restXmlPutBucketWebsiteCommand(output, context);\n    };\n    return PutBucketWebsiteCommand;\n}($Command));\nexport { PutBucketWebsiteCommand };\n//# sourceMappingURL=PutBucketWebsiteCommand.js.map"]},"metadata":{},"sourceType":"module"}