{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction getEventMessageStream(chunkedStream, eventMarshaller) {\n  var chunkReader = chunkedStream.getReader();\n  var messageStream = new ReadableStream({\n    start: function (controller) {\n      function push() {\n        chunkReader.read().then(function (_a) {\n          var _b, _c;\n\n          var done = _a.done,\n              value = _a.value;\n\n          if (done) {\n            controller.close();\n            return;\n          } // @ts-ignore: error TS2345: Argument of type 'Uint8Array | undefined'\n          // is not assignable to parameter of type 'ArrayBufferView'\n\n\n          var message = eventMarshaller.unmarshall(value);\n          var messageType = message.headers[\":message-type\"].value;\n\n          if (messageType === \"error\") {\n            // Unmodeled exception in event\n            var unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n            unmodeledError.name = message.headers[\":error-code\"].value;\n            controller.error(unmodeledError);\n          } else if (messageType === \"exception\") {\n            // throw this.exceptionsDeserializer(message);\n            controller.enqueue((_b = {}, _b[message.headers[\":exception-type\"].value] = message, _b));\n          } else if (messageType === \"event\") {\n            controller.enqueue((_c = {}, _c[message.headers[\":event-type\"].value] = message, _c));\n          } else {\n            controller.error(new Error(\"Unrecognizable event type: \" + message.headers[\":event-type\"].value));\n          }\n\n          push();\n        });\n      }\n\n      push();\n    }\n  });\n  return messageStream;\n}\n\nexports.getEventMessageStream = getEventMessageStream;","map":{"version":3,"sources":["../src/getEventMessageStream.ts"],"names":[],"mappings":";;;;;;AAGA,SAAgB,qBAAhB,CACE,aADF,EAEE,eAFF,EAEkC;AAEhC,MAAM,WAAW,GAAG,aAAa,CAAC,SAAd,EAApB;AACA,MAAM,aAAa,GAAG,IAAI,cAAJ,CAAgD;AACpE,IAAA,KAAK,EAAL,UAAM,UAAN,EAAgB;AACd,eAAS,IAAT,GAAa;AACX,QAAA,WAAW,CAAC,IAAZ,GAAmB,IAAnB,CAAwB,UAAC,EAAD,EAAgB;;;cAAb,IAAA,GAAA,EAAA,CAAA,I;cAAM,KAAA,GAAA,EAAA,CAAA,K;;AAC/B,cAAI,IAAJ,EAAU;AACR,YAAA,UAAU,CAAC,KAAX;AACA;AACD,WAJqC,CAMtC;AACA;;;AACA,cAAM,OAAO,GAAG,eAAe,CAAC,UAAhB,CAA2B,KAA3B,CAAhB;AACQ,cAAA,WAAA,GAAA,OAAA,CAAA,OAAA,CAAA,eAAA,EAAA,KAAA;;AACR,cAAI,WAAW,KAAK,OAApB,EAA6B;AAC3B;AACA,gBAAM,cAAc,GAAG,IAAI,KAAJ,CACpB,OAAO,CAAC,OAAR,CAAgB,gBAAhB,EAAkC,KAAlC,IACC,cAFmB,CAAvB;AAIA,YAAA,cAAc,CAAC,IAAf,GAAsB,OAAO,CAAC,OAAR,CAAgB,aAAhB,EACnB,KADH;AAEA,YAAA,UAAU,CAAC,KAAX,CAAiB,cAAjB;AACD,WATD,MASO,IAAI,WAAW,KAAK,WAApB,EAAiC;AACtC;AACA,YAAA,UAAU,CAAC,OAAX,EAAkB,EAAA,GAAA,EAAA,EAChB,EAAA,CAAC,OAAO,CAAC,OAAR,CAAgB,iBAAhB,EAAmC,KAApC,CAAA,GAAsD,OADtC,EAEhB,EAFF;AAGD,WALM,MAKA,IAAI,WAAW,KAAK,OAApB,EAA6B;AAClC,YAAA,UAAU,CAAC,OAAX,EAAkB,EAAA,GAAA,EAAA,EAChB,EAAA,CAAC,OAAO,CAAC,OAAR,CAAgB,aAAhB,EAA+B,KAAhC,CAAA,GAAkD,OADlC,EAEhB,EAFF;AAGD,WAJM,MAIA;AACL,YAAA,UAAU,CAAC,KAAX,CACE,IAAI,KAAJ,CACE,gCAA8B,OAAO,CAAC,OAAR,CAAgB,aAAhB,EAA+B,KAD/D,CADF;AAKD;;AACD,UAAA,IAAI;AACL,SApCD;AAqCD;;AAED,MAAA,IAAI;AACL;AA3CmE,GAAhD,CAAtB;AA8CA,SAAO,aAAP;AACD;;AApDD,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourcesContent":["import { EventStreamMarshaller as EventMarshaller } from \"@aws-sdk/eventstream-marshaller\";\nimport { Message } from \"@aws-sdk/types\";\n\nexport function getEventMessageStream(\n  chunkedStream: ReadableStream<Uint8Array>,\n  eventMarshaller: EventMarshaller\n): ReadableStream<{ [name: string]: Message }> {\n  const chunkReader = chunkedStream.getReader();\n  const messageStream = new ReadableStream<{ [name: string]: Message }>({\n    start(controller) {\n      function push() {\n        chunkReader.read().then(({ done, value }) => {\n          if (done) {\n            controller.close();\n            return;\n          }\n\n          // @ts-ignore: error TS2345: Argument of type 'Uint8Array | undefined'\n          // is not assignable to parameter of type 'ArrayBufferView'\n          const message = eventMarshaller.unmarshall(value);\n          const { value: messageType } = message.headers[\":message-type\"];\n          if (messageType === \"error\") {\n            // Unmodeled exception in event\n            const unmodeledError = new Error(\n              (message.headers[\":error-message\"].value as string) ||\n                \"UnknownError\"\n            );\n            unmodeledError.name = message.headers[\":error-code\"]\n              .value as string;\n            controller.error(unmodeledError);\n          } else if (messageType === \"exception\") {\n            // throw this.exceptionsDeserializer(message);\n            controller.enqueue({\n              [message.headers[\":exception-type\"].value as string]: message\n            });\n          } else if (messageType === \"event\") {\n            controller.enqueue({\n              [message.headers[\":event-type\"].value as string]: message\n            });\n          } else {\n            controller.error(\n              new Error(\n                `Unrecognizable event type: ${message.headers[\":event-type\"].value}`\n              )\n            );\n          }\n          push();\n        });\n      }\n\n      push();\n    }\n  });\n\n  return messageStream;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}