{"ast":null,"code":"import { __assign } from \"tslib\";\nexport var REGION_ENV_NAME = \"AWS_REGION\";\nexport var REGION_INI_NAME = \"region\";\nexport var NODE_REGION_CONFIG_OPTIONS = {\n  environmentVariableSelector: function (env) {\n    return env[REGION_ENV_NAME];\n  },\n  configFileSelector: function (profile) {\n    return profile[REGION_INI_NAME];\n  },\n  default: function () {\n    throw new Error(\"Region is missing\");\n  }\n};\nexport var NODE_REGION_CONFIG_FILE_OPTIONS = {\n  preferredFile: \"credentials\"\n};\nexport var resolveRegionConfig = function (input) {\n  if (!input.region) {\n    throw new Error(\"Region is missing\");\n  }\n\n  return __assign(__assign({}, input), {\n    region: normalizeRegion(input.region)\n  });\n};\n\nvar normalizeRegion = function (region) {\n  if (typeof region === \"string\") {\n    var promisified_1 = Promise.resolve(region);\n    return function () {\n      return promisified_1;\n    };\n  }\n\n  return region;\n};","map":{"version":3,"sources":["../../src/RegionConfig.ts"],"names":[],"mappings":";AAGA,OAAO,IAAM,eAAe,GAAG,YAAxB;AACP,OAAO,IAAM,eAAe,GAAG,QAAxB;AAEP,OAAO,IAAM,0BAA0B,GAAkC;AACvE,EAAA,2BAA2B,EAAE,UAAC,GAAD,EAAI;AAAK,WAAA,GAAG,CAAH,eAAG,CAAH;AAAoB,GADa;AAEvE,EAAA,kBAAkB,EAAE,UAAC,OAAD,EAAQ;AAAK,WAAA,OAAO,CAAP,eAAO,CAAP;AAAwB,GAFc;AAGvE,EAAA,OAAO,EAAE,YAAA;AACP,UAAM,IAAI,KAAJ,CAAU,mBAAV,CAAN;AACD;AALsE,CAAlE;AAQP,OAAO,IAAM,+BAA+B,GAAuB;AACjE,EAAA,aAAa,EAAE;AADkD,CAA5D;AAiBP,OAAO,IAAM,mBAAmB,GAAG,UAAI,KAAJ,EAAqD;AACtF,MAAI,CAAC,KAAK,CAAC,MAAX,EAAmB;AACjB,UAAM,IAAI,KAAJ,CAAU,mBAAV,CAAN;AACD;;AACD,SAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,KADL,CAAA,EACU;AACR,IAAA,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,MAAP;AADf,GADV,CAAA;AAID,CARM;;AAUP,IAAM,eAAe,GAAG,UAAC,MAAD,EAAkC;AACxD,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,QAAM,aAAW,GAAG,OAAO,CAAC,OAAR,CAAgB,MAAhB,CAApB;AACA,WAAO,YAAA;AAAM,aAAA,aAAA;AAAW,KAAxB;AACD;;AACD,SAAO,MAAP;AACD,CAND","sourcesContent":["import { LoadedConfigSelectors, LocalConfigOptions } from \"@aws-sdk/node-config-provider\";\nimport { Provider } from \"@aws-sdk/types\";\n\nexport const REGION_ENV_NAME = \"AWS_REGION\";\nexport const REGION_INI_NAME = \"region\";\n\nexport const NODE_REGION_CONFIG_OPTIONS: LoadedConfigSelectors<string> = {\n  environmentVariableSelector: (env) => env[REGION_ENV_NAME],\n  configFileSelector: (profile) => profile[REGION_INI_NAME],\n  default: () => {\n    throw new Error(\"Region is missing\");\n  },\n};\n\nexport const NODE_REGION_CONFIG_FILE_OPTIONS: LocalConfigOptions = {\n  preferredFile: \"credentials\",\n};\n\nexport interface RegionInputConfig {\n  /**\n   * The AWS region to which this client will send requests\n   */\n  region?: string | Provider<string>;\n}\n\ninterface PreviouslyResolved {}\n\nexport interface RegionResolvedConfig {\n  region: Provider<string>;\n}\n\nexport const resolveRegionConfig = <T>(input: T & RegionInputConfig & PreviouslyResolved): T & RegionResolvedConfig => {\n  if (!input.region) {\n    throw new Error(\"Region is missing\");\n  }\n  return {\n    ...input,\n    region: normalizeRegion(input.region!),\n  };\n};\n\nconst normalizeRegion = (region: string | Provider<string>): Provider<string> => {\n  if (typeof region === \"string\") {\n    const promisified = Promise.resolve(region);\n    return () => promisified;\n  }\n  return region as Provider<string>;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}