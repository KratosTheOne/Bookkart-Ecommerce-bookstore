{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction blobReader(blob, onChunk, chunkSize) {\n  if (chunkSize === void 0) {\n    chunkSize = 1024 * 1024;\n  }\n\n  return new Promise(function (resolve, reject) {\n    var fileReader = new FileReader();\n    fileReader.addEventListener(\"error\", reject);\n    fileReader.addEventListener(\"abort\", reject);\n    var size = blob.size;\n    var totalBytesRead = 0;\n\n    function read() {\n      if (totalBytesRead >= size) {\n        resolve();\n        return;\n      }\n\n      fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));\n    }\n\n    fileReader.addEventListener(\"load\", function (event) {\n      var result = event.target.result;\n      onChunk(new Uint8Array(result));\n      totalBytesRead += result.byteLength; // read the next block\n\n      read();\n    }); // kick off the read\n\n    read();\n  });\n}\n\nexports.blobReader = blobReader;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;AAAA,SAAgB,UAAhB,CACE,IADF,EAEE,OAFF,EAGE,SAHF,EAGiC;AAA/B,MAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAoB,OAAO,IAA3B;AAA+B;;AAE/B,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AACjC,QAAM,UAAU,GAAG,IAAI,UAAJ,EAAnB;AAEA,IAAA,UAAU,CAAC,gBAAX,CAA4B,OAA5B,EAAqC,MAArC;AACA,IAAA,UAAU,CAAC,gBAAX,CAA4B,OAA5B,EAAqC,MAArC;AAEA,QAAM,IAAI,GAAG,IAAI,CAAC,IAAlB;AACA,QAAI,cAAc,GAAG,CAArB;;AAEA,aAAS,IAAT,GAAa;AACX,UAAI,cAAc,IAAI,IAAtB,EAA4B;AAC1B,QAAA,OAAO;AACP;AACD;;AACD,MAAA,UAAU,CAAC,iBAAX,CACE,IAAI,CAAC,KAAL,CAAW,cAAX,EAA2B,IAAI,CAAC,GAAL,CAAS,IAAT,EAAe,cAAc,GAAG,SAAhC,CAA3B,CADF;AAGD;;AAED,IAAA,UAAU,CAAC,gBAAX,CAA4B,MAA5B,EAAoC,UAAA,KAAA,EAAK;AACvC,UAAM,MAAM,GAAiB,KAAK,CAAC,MAAN,CAAqB,MAAlD;AACA,MAAA,OAAO,CAAC,IAAI,UAAJ,CAAe,MAAf,CAAD,CAAP;AACA,MAAA,cAAc,IAAI,MAAM,CAAC,UAAzB,CAHuC,CAIvC;;AACA,MAAA,IAAI;AACL,KAND,EAnBiC,CA2BjC;;AACA,IAAA,IAAI;AACL,GA7BM,CAAP;AA8BD;;AAnCD,OAAA,CAAA,UAAA,GAAA,UAAA","sourcesContent":["export function blobReader(\n  blob: Blob,\n  onChunk: (chunk: Uint8Array) => void,\n  chunkSize: number = 1024 * 1024\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n\n    fileReader.addEventListener(\"error\", reject);\n    fileReader.addEventListener(\"abort\", reject);\n\n    const size = blob.size;\n    let totalBytesRead = 0;\n\n    function read() {\n      if (totalBytesRead >= size) {\n        resolve();\n        return;\n      }\n      fileReader.readAsArrayBuffer(\n        blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize))\n      );\n    }\n\n    fileReader.addEventListener(\"load\", event => {\n      const result = <ArrayBuffer>(event.target as any).result;\n      onChunk(new Uint8Array(result));\n      totalBytesRead += result.byteLength;\n      // read the next block\n      read();\n    });\n\n    // kick off the read\n    read();\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}