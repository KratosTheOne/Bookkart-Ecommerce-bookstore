{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Logger_1 = require(\"./Logger\");\n\nvar StorageHelper_1 = require(\"./StorageHelper\");\n\nvar JS_1 = require(\"./JS\");\n\nvar OAuthHelper_1 = require(\"./OAuthHelper\");\n\nvar Util_1 = require(\"./Util\");\n\nvar Platform_1 = require(\"./Platform\");\n\nvar Amplify_1 = require(\"./Amplify\");\n\nvar credential_provider_cognito_identity_1 = require(\"@aws-sdk/credential-provider-cognito-identity\");\n\nvar client_cognito_identity_1 = require(\"@aws-sdk/client-cognito-identity\");\n\nvar logger = new Logger_1.ConsoleLogger('Credentials');\nvar CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\n\nvar CredentialsClass =\n/** @class */\nfunction () {\n  function CredentialsClass(config) {\n    this._gettingCredPromise = null;\n    this._refreshHandlers = {};\n    this.configure(config);\n    this._refreshHandlers['google'] = OAuthHelper_1.GoogleOAuth.refreshGoogleToken;\n    this._refreshHandlers['facebook'] = OAuthHelper_1.FacebookOAuth.refreshFacebookToken;\n  }\n\n  CredentialsClass.prototype.getCredSource = function () {\n    return this._credentials_source;\n  };\n\n  CredentialsClass.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    this._config = Object.assign({}, this._config, config);\n    var refreshHandlers = this._config.refreshHandlers; // If the developer has provided an object of refresh handlers,\n    // then we can merge the provided handlers with the current handlers.\n\n    if (refreshHandlers) {\n      this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);\n    }\n\n    this._storage = this._config.storage;\n\n    if (!this._storage) {\n      this._storage = new StorageHelper_1.StorageHelper().getStorage();\n    }\n\n    this._storageSync = Promise.resolve();\n\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n\n    return this._config;\n  };\n\n  CredentialsClass.prototype.get = function () {\n    logger.debug('getting credentials');\n    return this._pickupCredentials();\n  };\n\n  CredentialsClass.prototype._pickupCredentials = function () {\n    logger.debug('picking up credentials');\n\n    if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n      logger.debug('getting new cred promise');\n      this._gettingCredPromise = JS_1.makeQuerablePromise(this._keepAlive());\n    } else {\n      logger.debug('getting old cred promise');\n    }\n\n    return this._gettingCredPromise;\n  };\n\n  CredentialsClass.prototype._keepAlive = function () {\n    logger.debug('checking if credentials exists and not expired');\n    var cred = this._credentials;\n\n    if (cred && !this._isExpired(cred)) {\n      logger.debug('credentials not changed and not expired, directly return');\n      return Promise.resolve(cred);\n    }\n\n    logger.debug('need to get a new credential or refresh the existing one');\n\n    if (Amplify_1.Amplify.Auth && typeof Amplify_1.Amplify.Auth.currentUserCredentials === 'function') {\n      return Amplify_1.Amplify.Auth.currentUserCredentials();\n    } else {\n      return Promise.reject('No Auth module registered in Amplify');\n    }\n  };\n\n  CredentialsClass.prototype.refreshFederatedToken = function (federatedInfo) {\n    logger.debug('Getting federated credentials');\n    var provider = federatedInfo.provider,\n        user = federatedInfo.user,\n        token = federatedInfo.token,\n        identity_id = federatedInfo.identity_id;\n    var expires_at = federatedInfo.expires_at; // Make sure expires_at is in millis\n\n    expires_at = new Date(expires_at).getFullYear() === 1970 ? expires_at * 1000 : expires_at;\n    var that = this;\n    logger.debug('checking if federated jwt token expired');\n\n    if (expires_at > new Date().getTime()) {\n      // if not expired\n      logger.debug('token not expired');\n      return this._setCredentialsFromFederation({\n        provider: provider,\n        token: token,\n        user: user,\n        identity_id: identity_id,\n        expires_at: expires_at\n      });\n    } else {\n      // if refresh handler exists\n      if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === 'function') {\n        logger.debug('getting refreshed jwt token from federation provider');\n        return this._providerRefreshWithRetry({\n          refreshHandler: that._refreshHandlers[provider],\n          provider: provider,\n          user: user\n        });\n      } else {\n        logger.debug('no refresh handler for provider:', provider);\n        this.clear();\n        return Promise.reject('no refresh handler for provider');\n      }\n    }\n  };\n\n  CredentialsClass.prototype._providerRefreshWithRetry = function (_a) {\n    var _this = this;\n\n    var refreshHandler = _a.refreshHandler,\n        provider = _a.provider,\n        user = _a.user;\n    var MAX_DELAY_MS = 10 * 1000; // refreshHandler will retry network errors, otherwise it will\n    // return NonRetryableError to break out of jitteredExponentialRetry\n\n    return Util_1.jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS).then(function (data) {\n      logger.debug('refresh federated token sucessfully', data);\n      return _this._setCredentialsFromFederation({\n        provider: provider,\n        token: data.token,\n        user: user,\n        identity_id: data.identity_id,\n        expires_at: data.expires_at\n      });\n    }).catch(function (e) {\n      var isNetworkError = typeof e === 'string' && e.toLowerCase().lastIndexOf('network error', e.length) === 0;\n\n      if (!isNetworkError) {\n        _this.clear();\n      }\n\n      logger.debug('refresh federated token failed', e);\n      return Promise.reject('refreshing federation token failed: ' + e);\n    });\n  };\n\n  CredentialsClass.prototype._isExpired = function (credentials) {\n    if (!credentials) {\n      logger.debug('no credentials for expiration check');\n      return true;\n    }\n\n    logger.debug('are these credentials expired?', credentials);\n    var ts = Date.now();\n    var delta = 10 * 60 * 1000; // 10 minutes in milli seconds\n\n    /* returns date object.\n        https://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26\n    */\n\n    var expiration = credentials.expiration;\n\n    if (expiration.getTime() > ts + delta && ts < this._nextCredentialsRefresh) {\n      return false;\n    }\n\n    return true;\n  };\n\n  CredentialsClass.prototype._setCredentialsForGuest = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, identityPoolId, region, mandatorySignIn, identityId, e_1, cognitoClient, credentials, cognitoIdentityParams, credentialsProvider;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('setting credentials for guest');\n            _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;\n\n            if (mandatorySignIn) {\n              return [2\n              /*return*/\n              , Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n            }\n\n            if (!identityPoolId) {\n              logger.debug('No Cognito Identity pool provided for unauthenticated access');\n              return [2\n              /*return*/\n              , Promise.reject('No Cognito Identity pool provided for unauthenticated access')];\n            }\n\n            if (!region) {\n              logger.debug('region is not configured for getting the credentials');\n              return [2\n              /*return*/\n              , Promise.reject('region is not configured for getting the credentials')];\n            }\n\n            identityId = undefined;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._storageSync];\n\n          case 2:\n            _b.sent();\n\n            identityId = this._storage.getItem('CognitoIdentityId-' + identityPoolId);\n            this._identityId = identityId;\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _b.sent();\n            logger.debug('Failed to get the cached identityId', e_1);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            cognitoClient = new client_cognito_identity_1.CognitoIdentityClient({\n              region: region,\n              customUserAgent: Platform_1.getAmplifyUserAgent()\n            });\n            credentials = undefined;\n\n            if (identityId) {\n              cognitoIdentityParams = {\n                identityId: identityId,\n                client: cognitoClient\n              };\n              credentials = credential_provider_cognito_identity_1.fromCognitoIdentity(cognitoIdentityParams)();\n            } else {\n              credentialsProvider = function () {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        return [4\n                        /*yield*/\n                        , cognitoClient.send(new client_cognito_identity_1.GetIdCommand({\n                          IdentityPoolId: identityPoolId\n                        }))];\n\n                      case 1:\n                        IdentityId = _a.sent().IdentityId;\n                        this._identityId = IdentityId;\n                        cognitoIdentityParams = {\n                          client: cognitoClient,\n                          identityId: IdentityId\n                        };\n                        credentialsFromCognitoIdentity = credential_provider_cognito_identity_1.fromCognitoIdentity(cognitoIdentityParams);\n                        return [2\n                        /*return*/\n                        , credentialsFromCognitoIdentity()];\n                    }\n                  });\n                });\n              };\n\n              credentials = credentialsProvider().catch(function (err) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  return __generator(this, function (_a) {\n                    throw err;\n                  });\n                });\n              });\n            }\n\n            return [2\n            /*return*/\n            , this._loadCredentials(credentials, 'guest', false, null).then(function (res) {\n              return res;\n            }).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  return [2\n                  /*return*/\n                  , e];\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._setCredentialsFromFederation = function (params) {\n    var provider = params.provider,\n        token = params.token,\n        identity_id = params.identity_id;\n    var domains = {\n      google: 'accounts.google.com',\n      facebook: 'graph.facebook.com',\n      amazon: 'www.amazon.com',\n      developer: 'cognito-identity.amazonaws.com'\n    }; // Use custom provider url instead of the predefined ones\n\n    var domain = domains[provider] || provider;\n\n    if (!domain) {\n      return Promise.reject('You must specify a federated provider');\n    }\n\n    var logins = {};\n    logins[domain] = token;\n    var _a = this._config,\n        identityPoolId = _a.identityPoolId,\n        region = _a.region;\n\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n\n    if (!region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n\n    var cognitoClient = new client_cognito_identity_1.CognitoIdentityClient({\n      region: region,\n      customUserAgent: Platform_1.getAmplifyUserAgent()\n    });\n    var credentials = undefined;\n\n    if (identity_id) {\n      var cognitoIdentityParams = {\n        identityId: identity_id,\n        logins: logins,\n        client: cognitoClient\n      };\n      credentials = credential_provider_cognito_identity_1.fromCognitoIdentity(cognitoIdentityParams)();\n    } else {\n      var cognitoIdentityParams = {\n        logins: logins,\n        identityPoolId: identityPoolId,\n        client: cognitoClient\n      };\n      credentials = credential_provider_cognito_identity_1.fromCognitoIdentityPool(cognitoIdentityParams)();\n    }\n\n    return this._loadCredentials(credentials, 'federated', true, params);\n  };\n\n  CredentialsClass.prototype._setCredentialsFromSession = function (session) {\n    var _this = this;\n\n    logger.debug('set credentials from session');\n    var idToken = session.getIdToken().getJwtToken();\n    var _a = this._config,\n        region = _a.region,\n        userPoolId = _a.userPoolId,\n        identityPoolId = _a.identityPoolId;\n\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n\n    if (!region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n\n    var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n    var logins = {};\n    logins[key] = idToken;\n    var cognitoClient = new client_cognito_identity_1.CognitoIdentityClient({\n      region: region,\n      customUserAgent: Platform_1.getAmplifyUserAgent()\n    });\n    /*\n        Retreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n        https://git.io/JeDxU\n         Note: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n    */\n\n    var credentialsProvider = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , cognitoClient.send(new client_cognito_identity_1.GetIdCommand({\n                IdentityPoolId: identityPoolId,\n                Logins: logins\n              }))];\n\n            case 1:\n              IdentityId = _a.sent().IdentityId;\n              this._identityId = IdentityId;\n              cognitoIdentityParams = {\n                client: cognitoClient,\n                logins: logins,\n                identityId: IdentityId\n              };\n              credentialsFromCognitoIdentity = credential_provider_cognito_identity_1.fromCognitoIdentity(cognitoIdentityParams);\n              return [2\n              /*return*/\n              , credentialsFromCognitoIdentity()];\n          }\n        });\n      });\n    };\n\n    var credentials = credentialsProvider().catch(function (err) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          throw err;\n        });\n      });\n    });\n    return this._loadCredentials(credentials, 'userPool', true, null);\n  };\n\n  CredentialsClass.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n    var _this = this;\n\n    var that = this;\n    var identityPoolId = this._config.identityPoolId;\n    return new Promise(function (res, rej) {\n      credentials.then(function (credentials) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, provider, token, expires_at, identity_id, e_2;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                logger.debug('Load credentials successfully', credentials);\n\n                if (this._identityId && !credentials.identityId) {\n                  credentials['identityId'] = this._identityId;\n                }\n\n                that._credentials = credentials;\n                that._credentials.authenticated = authenticated;\n                that._credentials_source = source;\n                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n\n                if (source === 'federated') {\n                  user = Object.assign({\n                    id: this._credentials.identityId\n                  }, info.user);\n                  provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n\n                  try {\n                    this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                      provider: provider,\n                      token: token,\n                      user: user,\n                      expires_at: expires_at,\n                      identity_id: identity_id\n                    }));\n                  } catch (e) {\n                    logger.debug('Failed to put federated info into auth storage', e);\n                  }\n                }\n\n                if (!(source === 'guest')) return [3\n                /*break*/\n                , 4];\n                _a.label = 1;\n\n              case 1:\n                _a.trys.push([1, 3,, 4]);\n\n                return [4\n                /*yield*/\n                , this._storageSync];\n\n              case 2:\n                _a.sent();\n\n                this._storage.setItem('CognitoIdentityId-' + identityPoolId, credentials.identityId // TODO: IdentityId is currently not returned by fromCognitoIdentityPool()\n                );\n\n                return [3\n                /*break*/\n                , 4];\n\n              case 3:\n                e_2 = _a.sent();\n                logger.debug('Failed to cache identityId', e_2);\n                return [3\n                /*break*/\n                , 4];\n\n              case 4:\n                res(that._credentials);\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      }).catch(function (err) {\n        if (err) {\n          logger.debug('Failed to load credentials', credentials);\n          logger.debug('Error loading credentials', err);\n          rej(err);\n          return;\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype.set = function (params, source) {\n    if (source === 'session') {\n      return this._setCredentialsFromSession(params);\n    } else if (source === 'federation') {\n      return this._setCredentialsFromFederation(params);\n    } else if (source === 'guest') {\n      return this._setCredentialsForGuest();\n    } else {\n      logger.debug('no source specified for setting credentials');\n      return Promise.reject('invalid source');\n    }\n  };\n\n  CredentialsClass.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this._credentials = null;\n        this._credentials_source = null;\n        logger.debug('removing aws-amplify-federatedInfo from storage');\n\n        this._storage.removeItem('aws-amplify-federatedInfo');\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n\n\n  CredentialsClass.prototype.shear = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n\n  return CredentialsClass;\n}();\n\nexports.CredentialsClass = CredentialsClass;\nexports.Credentials = new CredentialsClass(null);\n/**\n * @deprecated use named import\n */\n\nexports.default = exports.Credentials;","map":{"version":3,"sources":["../src/Credentials.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Logger_1 = require(\"./Logger\");\nvar StorageHelper_1 = require(\"./StorageHelper\");\nvar JS_1 = require(\"./JS\");\nvar OAuthHelper_1 = require(\"./OAuthHelper\");\nvar Util_1 = require(\"./Util\");\nvar Platform_1 = require(\"./Platform\");\nvar Amplify_1 = require(\"./Amplify\");\nvar credential_provider_cognito_identity_1 = require(\"@aws-sdk/credential-provider-cognito-identity\");\nvar client_cognito_identity_1 = require(\"@aws-sdk/client-cognito-identity\");\nvar logger = new Logger_1.ConsoleLogger('Credentials');\nvar CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\nvar CredentialsClass = /** @class */ (function () {\n    function CredentialsClass(config) {\n        this._gettingCredPromise = null;\n        this._refreshHandlers = {};\n        this.configure(config);\n        this._refreshHandlers['google'] = OAuthHelper_1.GoogleOAuth.refreshGoogleToken;\n        this._refreshHandlers['facebook'] = OAuthHelper_1.FacebookOAuth.refreshFacebookToken;\n    }\n    CredentialsClass.prototype.getCredSource = function () {\n        return this._credentials_source;\n    };\n    CredentialsClass.prototype.configure = function (config) {\n        if (!config)\n            return this._config || {};\n        this._config = Object.assign({}, this._config, config);\n        var refreshHandlers = this._config.refreshHandlers;\n        // If the developer has provided an object of refresh handlers,\n        // then we can merge the provided handlers with the current handlers.\n        if (refreshHandlers) {\n            this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);\n        }\n        this._storage = this._config.storage;\n        if (!this._storage) {\n            this._storage = new StorageHelper_1.StorageHelper().getStorage();\n        }\n        this._storageSync = Promise.resolve();\n        if (typeof this._storage['sync'] === 'function') {\n            this._storageSync = this._storage['sync']();\n        }\n        return this._config;\n    };\n    CredentialsClass.prototype.get = function () {\n        logger.debug('getting credentials');\n        return this._pickupCredentials();\n    };\n    CredentialsClass.prototype._pickupCredentials = function () {\n        logger.debug('picking up credentials');\n        if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n            logger.debug('getting new cred promise');\n            this._gettingCredPromise = JS_1.makeQuerablePromise(this._keepAlive());\n        }\n        else {\n            logger.debug('getting old cred promise');\n        }\n        return this._gettingCredPromise;\n    };\n    CredentialsClass.prototype._keepAlive = function () {\n        logger.debug('checking if credentials exists and not expired');\n        var cred = this._credentials;\n        if (cred && !this._isExpired(cred)) {\n            logger.debug('credentials not changed and not expired, directly return');\n            return Promise.resolve(cred);\n        }\n        logger.debug('need to get a new credential or refresh the existing one');\n        if (Amplify_1.Amplify.Auth &&\n            typeof Amplify_1.Amplify.Auth.currentUserCredentials === 'function') {\n            return Amplify_1.Amplify.Auth.currentUserCredentials();\n        }\n        else {\n            return Promise.reject('No Auth module registered in Amplify');\n        }\n    };\n    CredentialsClass.prototype.refreshFederatedToken = function (federatedInfo) {\n        logger.debug('Getting federated credentials');\n        var provider = federatedInfo.provider, user = federatedInfo.user, token = federatedInfo.token, identity_id = federatedInfo.identity_id;\n        var expires_at = federatedInfo.expires_at;\n        // Make sure expires_at is in millis\n        expires_at =\n            new Date(expires_at).getFullYear() === 1970\n                ? expires_at * 1000\n                : expires_at;\n        var that = this;\n        logger.debug('checking if federated jwt token expired');\n        if (expires_at > new Date().getTime()) {\n            // if not expired\n            logger.debug('token not expired');\n            return this._setCredentialsFromFederation({\n                provider: provider,\n                token: token,\n                user: user,\n                identity_id: identity_id,\n                expires_at: expires_at,\n            });\n        }\n        else {\n            // if refresh handler exists\n            if (that._refreshHandlers[provider] &&\n                typeof that._refreshHandlers[provider] === 'function') {\n                logger.debug('getting refreshed jwt token from federation provider');\n                return this._providerRefreshWithRetry({\n                    refreshHandler: that._refreshHandlers[provider],\n                    provider: provider,\n                    user: user,\n                });\n            }\n            else {\n                logger.debug('no refresh handler for provider:', provider);\n                this.clear();\n                return Promise.reject('no refresh handler for provider');\n            }\n        }\n    };\n    CredentialsClass.prototype._providerRefreshWithRetry = function (_a) {\n        var _this = this;\n        var refreshHandler = _a.refreshHandler, provider = _a.provider, user = _a.user;\n        var MAX_DELAY_MS = 10 * 1000;\n        // refreshHandler will retry network errors, otherwise it will\n        // return NonRetryableError to break out of jitteredExponentialRetry\n        return Util_1.jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS)\n            .then(function (data) {\n            logger.debug('refresh federated token sucessfully', data);\n            return _this._setCredentialsFromFederation({\n                provider: provider,\n                token: data.token,\n                user: user,\n                identity_id: data.identity_id,\n                expires_at: data.expires_at,\n            });\n        })\n            .catch(function (e) {\n            var isNetworkError = typeof e === 'string' &&\n                e.toLowerCase().lastIndexOf('network error', e.length) === 0;\n            if (!isNetworkError) {\n                _this.clear();\n            }\n            logger.debug('refresh federated token failed', e);\n            return Promise.reject('refreshing federation token failed: ' + e);\n        });\n    };\n    CredentialsClass.prototype._isExpired = function (credentials) {\n        if (!credentials) {\n            logger.debug('no credentials for expiration check');\n            return true;\n        }\n        logger.debug('are these credentials expired?', credentials);\n        var ts = Date.now();\n        var delta = 10 * 60 * 1000; // 10 minutes in milli seconds\n        /* returns date object.\n            https://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26\n        */\n        var expiration = credentials.expiration;\n        if (expiration.getTime() > ts + delta &&\n            ts < this._nextCredentialsRefresh) {\n            return false;\n        }\n        return true;\n    };\n    CredentialsClass.prototype._setCredentialsForGuest = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, identityPoolId, region, mandatorySignIn, identityId, e_1, cognitoClient, credentials, cognitoIdentityParams, credentialsProvider;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        logger.debug('setting credentials for guest');\n                        _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;\n                        if (mandatorySignIn) {\n                            return [2 /*return*/, Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n                        }\n                        if (!identityPoolId) {\n                            logger.debug('No Cognito Identity pool provided for unauthenticated access');\n                            return [2 /*return*/, Promise.reject('No Cognito Identity pool provided for unauthenticated access')];\n                        }\n                        if (!region) {\n                            logger.debug('region is not configured for getting the credentials');\n                            return [2 /*return*/, Promise.reject('region is not configured for getting the credentials')];\n                        }\n                        identityId = undefined;\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._storageSync];\n                    case 2:\n                        _b.sent();\n                        identityId = this._storage.getItem('CognitoIdentityId-' + identityPoolId);\n                        this._identityId = identityId;\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_1 = _b.sent();\n                        logger.debug('Failed to get the cached identityId', e_1);\n                        return [3 /*break*/, 4];\n                    case 4:\n                        cognitoClient = new client_cognito_identity_1.CognitoIdentityClient({\n                            region: region,\n                            customUserAgent: Platform_1.getAmplifyUserAgent(),\n                        });\n                        credentials = undefined;\n                        if (identityId) {\n                            cognitoIdentityParams = {\n                                identityId: identityId,\n                                client: cognitoClient,\n                            };\n                            credentials = credential_provider_cognito_identity_1.fromCognitoIdentity(cognitoIdentityParams)();\n                        }\n                        else {\n                            credentialsProvider = function () { return __awaiter(_this, void 0, void 0, function () {\n                                var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0: return [4 /*yield*/, cognitoClient.send(new client_cognito_identity_1.GetIdCommand({\n                                                IdentityPoolId: identityPoolId,\n                                            }))];\n                                        case 1:\n                                            IdentityId = (_a.sent()).IdentityId;\n                                            this._identityId = IdentityId;\n                                            cognitoIdentityParams = {\n                                                client: cognitoClient,\n                                                identityId: IdentityId,\n                                            };\n                                            credentialsFromCognitoIdentity = credential_provider_cognito_identity_1.fromCognitoIdentity(cognitoIdentityParams);\n                                            return [2 /*return*/, credentialsFromCognitoIdentity()];\n                                    }\n                                });\n                            }); };\n                            credentials = credentialsProvider().catch(function (err) { return __awaiter(_this, void 0, void 0, function () {\n                                return __generator(this, function (_a) {\n                                    throw err;\n                                });\n                            }); });\n                        }\n                        return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null)\n                                .then(function (res) {\n                                return res;\n                            })\n                                .catch(function (e) { return __awaiter(_this, void 0, void 0, function () {\n                                return __generator(this, function (_a) {\n                                    return [2 /*return*/, e];\n                                });\n                            }); })];\n                }\n            });\n        });\n    };\n    CredentialsClass.prototype._setCredentialsFromFederation = function (params) {\n        var provider = params.provider, token = params.token, identity_id = params.identity_id;\n        var domains = {\n            google: 'accounts.google.com',\n            facebook: 'graph.facebook.com',\n            amazon: 'www.amazon.com',\n            developer: 'cognito-identity.amazonaws.com',\n        };\n        // Use custom provider url instead of the predefined ones\n        var domain = domains[provider] || provider;\n        if (!domain) {\n            return Promise.reject('You must specify a federated provider');\n        }\n        var logins = {};\n        logins[domain] = token;\n        var _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region;\n        if (!identityPoolId) {\n            logger.debug('No Cognito Federated Identity pool provided');\n            return Promise.reject('No Cognito Federated Identity pool provided');\n        }\n        if (!region) {\n            logger.debug('region is not configured for getting the credentials');\n            return Promise.reject('region is not configured for getting the credentials');\n        }\n        var cognitoClient = new client_cognito_identity_1.CognitoIdentityClient({\n            region: region,\n            customUserAgent: Platform_1.getAmplifyUserAgent(),\n        });\n        var credentials = undefined;\n        if (identity_id) {\n            var cognitoIdentityParams = {\n                identityId: identity_id,\n                logins: logins,\n                client: cognitoClient,\n            };\n            credentials = credential_provider_cognito_identity_1.fromCognitoIdentity(cognitoIdentityParams)();\n        }\n        else {\n            var cognitoIdentityParams = {\n                logins: logins,\n                identityPoolId: identityPoolId,\n                client: cognitoClient,\n            };\n            credentials = credential_provider_cognito_identity_1.fromCognitoIdentityPool(cognitoIdentityParams)();\n        }\n        return this._loadCredentials(credentials, 'federated', true, params);\n    };\n    CredentialsClass.prototype._setCredentialsFromSession = function (session) {\n        var _this = this;\n        logger.debug('set credentials from session');\n        var idToken = session.getIdToken().getJwtToken();\n        var _a = this._config, region = _a.region, userPoolId = _a.userPoolId, identityPoolId = _a.identityPoolId;\n        if (!identityPoolId) {\n            logger.debug('No Cognito Federated Identity pool provided');\n            return Promise.reject('No Cognito Federated Identity pool provided');\n        }\n        if (!region) {\n            logger.debug('region is not configured for getting the credentials');\n            return Promise.reject('region is not configured for getting the credentials');\n        }\n        var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n        var logins = {};\n        logins[key] = idToken;\n        var cognitoClient = new client_cognito_identity_1.CognitoIdentityClient({\n            region: region,\n            customUserAgent: Platform_1.getAmplifyUserAgent(),\n        });\n        /*\n            Retreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n            https://git.io/JeDxU\n\n            Note: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n        */\n        var credentialsProvider = function () { return __awaiter(_this, void 0, void 0, function () {\n            var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, cognitoClient.send(new client_cognito_identity_1.GetIdCommand({\n                            IdentityPoolId: identityPoolId,\n                            Logins: logins,\n                        }))];\n                    case 1:\n                        IdentityId = (_a.sent()).IdentityId;\n                        this._identityId = IdentityId;\n                        cognitoIdentityParams = {\n                            client: cognitoClient,\n                            logins: logins,\n                            identityId: IdentityId,\n                        };\n                        credentialsFromCognitoIdentity = credential_provider_cognito_identity_1.fromCognitoIdentity(cognitoIdentityParams);\n                        return [2 /*return*/, credentialsFromCognitoIdentity()];\n                }\n            });\n        }); };\n        var credentials = credentialsProvider().catch(function (err) { return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                throw err;\n            });\n        }); });\n        return this._loadCredentials(credentials, 'userPool', true, null);\n    };\n    CredentialsClass.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n        var _this = this;\n        var that = this;\n        var identityPoolId = this._config.identityPoolId;\n        return new Promise(function (res, rej) {\n            credentials\n                .then(function (credentials) { return __awaiter(_this, void 0, void 0, function () {\n                var user, provider, token, expires_at, identity_id, e_2;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            logger.debug('Load credentials successfully', credentials);\n                            if (this._identityId && !credentials.identityId) {\n                                credentials['identityId'] = this._identityId;\n                            }\n                            that._credentials = credentials;\n                            that._credentials.authenticated = authenticated;\n                            that._credentials_source = source;\n                            that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n                            if (source === 'federated') {\n                                user = Object.assign({ id: this._credentials.identityId }, info.user);\n                                provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n                                try {\n                                    this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                                        provider: provider,\n                                        token: token,\n                                        user: user,\n                                        expires_at: expires_at,\n                                        identity_id: identity_id,\n                                    }));\n                                }\n                                catch (e) {\n                                    logger.debug('Failed to put federated info into auth storage', e);\n                                }\n                            }\n                            if (!(source === 'guest')) return [3 /*break*/, 4];\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, this._storageSync];\n                        case 2:\n                            _a.sent();\n                            this._storage.setItem('CognitoIdentityId-' + identityPoolId, credentials.identityId // TODO: IdentityId is currently not returned by fromCognitoIdentityPool()\n                            );\n                            return [3 /*break*/, 4];\n                        case 3:\n                            e_2 = _a.sent();\n                            logger.debug('Failed to cache identityId', e_2);\n                            return [3 /*break*/, 4];\n                        case 4:\n                            res(that._credentials);\n                            return [2 /*return*/];\n                    }\n                });\n            }); })\n                .catch(function (err) {\n                if (err) {\n                    logger.debug('Failed to load credentials', credentials);\n                    logger.debug('Error loading credentials', err);\n                    rej(err);\n                    return;\n                }\n            });\n        });\n    };\n    CredentialsClass.prototype.set = function (params, source) {\n        if (source === 'session') {\n            return this._setCredentialsFromSession(params);\n        }\n        else if (source === 'federation') {\n            return this._setCredentialsFromFederation(params);\n        }\n        else if (source === 'guest') {\n            return this._setCredentialsForGuest();\n        }\n        else {\n            logger.debug('no source specified for setting credentials');\n            return Promise.reject('invalid source');\n        }\n    };\n    CredentialsClass.prototype.clear = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this._credentials = null;\n                this._credentials_source = null;\n                logger.debug('removing aws-amplify-federatedInfo from storage');\n                this._storage.removeItem('aws-amplify-federatedInfo');\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Compact version of credentials\n     * @param {Object} credentials\n     * @return {Object} - Credentials\n     */\n    CredentialsClass.prototype.shear = function (credentials) {\n        return {\n            accessKeyId: credentials.accessKeyId,\n            sessionToken: credentials.sessionToken,\n            secretAccessKey: credentials.secretAccessKey,\n            identityId: credentials.identityId,\n            authenticated: credentials.authenticated,\n        };\n    };\n    return CredentialsClass;\n}());\nexports.CredentialsClass = CredentialsClass;\nexports.Credentials = new CredentialsClass(null);\n/**\n * @deprecated use named import\n */\nexports.default = exports.Credentials;\n//# sourceMappingURL=Credentials.js.map"]},"metadata":{},"sourceType":"script"}