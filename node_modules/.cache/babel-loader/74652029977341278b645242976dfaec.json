{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction memoize(provider, isExpired, requiresRefresh) {\n  if (isExpired === undefined) {\n    // This is a static memoization; no need to incorporate refreshing\n    var result_1 = provider();\n    return function () {\n      return result_1;\n    };\n  }\n\n  var result = provider();\n  var isConstant = false;\n  return function () {\n    if (isConstant) {\n      return result;\n    }\n\n    return result.then(function (resolved) {\n      if (requiresRefresh && !requiresRefresh(resolved)) {\n        isConstant = true;\n        return resolved;\n      }\n\n      if (isExpired(resolved)) {\n        return result = provider();\n      }\n\n      return resolved;\n    });\n  };\n}\n\nexports.memoize = memoize;","map":{"version":3,"sources":["../src/memoize.ts"],"names":[],"mappings":";;;;;;AAwCA,SAAgB,OAAhB,CACE,QADF,EAEE,SAFF,EAGE,eAHF,EAG4C;AAE1C,MAAI,SAAS,KAAK,SAAlB,EAA6B;AAC3B;AACA,QAAM,QAAM,GAAG,QAAQ,EAAvB;AACA,WAAO,YAAA;AAAM,aAAA,QAAA;AAAM,KAAnB;AACD;;AAED,MAAI,MAAM,GAAG,QAAQ,EAArB;AACA,MAAI,UAAU,GAAY,KAA1B;AAEA,SAAO,YAAA;AACL,QAAI,UAAJ,EAAgB;AACd,aAAO,MAAP;AACD;;AAED,WAAO,MAAM,CAAC,IAAP,CAAY,UAAA,QAAA,EAAQ;AACzB,UAAI,eAAe,IAAI,CAAC,eAAe,CAAC,QAAD,CAAvC,EAAmD;AACjD,QAAA,UAAU,GAAG,IAAb;AACA,eAAO,QAAP;AACD;;AAED,UAAI,SAAS,CAAC,QAAD,CAAb,EAAyB;AACvB,eAAQ,MAAM,GAAG,QAAQ,EAAzB;AACD;;AAED,aAAO,QAAP;AACD,KAXM,CAAP;AAYD,GAjBD;AAkBD;;AAhCD,OAAA,CAAA,OAAA,GAAA,OAAA","sourcesContent":["import { Provider } from \"@aws-sdk/types\";\n\n/**\n *\n * Decorates a provider function with either static memoization.\n *\n * To create a statically memoized provider, supply a provider as the only\n * argument to this function. The provider will be invoked once, and all\n * invocations of the provider returned by `memoize` will return the same\n * promise object.\n *\n * @param provider The provider whose result should be cached indefinitely.\n */\nexport function memoize<T>(provider: Provider<T>): Provider<T>;\n\n/**\n * Decorates a provider function with refreshing memoization.\n *\n * @param provider          The provider whose result should be cached.\n * @param isExpired         A function that will evaluate the resolved value and\n *                          determine if it is expired. For example, when\n *                          memoizing AWS credential providers, this function\n *                          should return `true` when the credential's\n *                          expiration is in the past (or very near future) and\n *                          `false` otherwise.\n * @param requiresRefresh   A function that will evaluate the resolved value and\n *                          determine if it represents static value or one that\n *                          will eventually need to be refreshed. For example,\n *                          AWS credentials that have no defined expiration will\n *                          never need to be refreshed, so this function would\n *                          return `true` if the credentials resolved by the\n *                          underlying provider had an expiration and `false`\n *                          otherwise.\n */\nexport function memoize<T>(\n  provider: Provider<T>,\n  isExpired: (resolved: T) => boolean,\n  requiresRefresh?: (resolved: T) => boolean\n): Provider<T>;\n\nexport function memoize<T>(\n  provider: Provider<T>,\n  isExpired?: (resolved: T) => boolean,\n  requiresRefresh?: (resolved: T) => boolean\n): Provider<T> {\n  if (isExpired === undefined) {\n    // This is a static memoization; no need to incorporate refreshing\n    const result = provider();\n    return () => result;\n  }\n\n  let result = provider();\n  let isConstant: boolean = false;\n\n  return () => {\n    if (isConstant) {\n      return result;\n    }\n\n    return result.then(resolved => {\n      if (requiresRefresh && !requiresRefresh(resolved)) {\n        isConstant = true;\n        return resolved;\n      }\n\n      if (isExpired(resolved)) {\n        return (result = provider());\n      }\n\n      return resolved;\n    });\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}