{"ast":null,"code":"import { __read } from \"tslib\";\n/**\n * Validate whether a string is an ARN.\n */\n\nexport var validate = function (str) {\n  return typeof str === \"string\" && str.indexOf(\"arn:\") === 0 && str.split(\":\").length >= 6;\n};\n/**\n * Parse an ARN string into structure with partition, service, region, accountId and resource values\n */\n\nexport var parse = function (arn) {\n  var segments = arn.split(\":\");\n  if (segments.length < 6 || segments[0] !== \"arn\") throw new Error(\"Malformed ARN\");\n\n  var _a = __read(segments),\n      //Skip \"arn\" literal\n  partition = _a[1],\n      service = _a[2],\n      region = _a[3],\n      accountId = _a[4],\n      resource = _a.slice(5);\n\n  return {\n    partition: partition,\n    service: service,\n    region: region,\n    accountId: accountId,\n    resource: resource.join(\":\")\n  };\n};\n/**\n * Build an ARN with service, partition, region, accountId, and resources strings\n */\n\nexport var build = function (arnObject) {\n  var _a = arnObject.partition,\n      partition = _a === void 0 ? \"aws\" : _a,\n      service = arnObject.service,\n      region = arnObject.region,\n      accountId = arnObject.accountId,\n      resource = arnObject.resource;\n\n  if ([service, region, accountId, resource].some(function (segment) {\n    return typeof segment !== \"string\";\n  })) {\n    throw new Error(\"Input ARN object is invalid\");\n  }\n\n  return \"arn:\" + partition + \":\" + service + \":\" + region + \":\" + accountId + \":\" + resource;\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";AAOA;;AAEG;;AACH,OAAO,IAAM,QAAQ,GAAG,UAAC,GAAD,EAAS;AAC/B,SAAA,OAAO,GAAP,KAAe,QAAf,IAA2B,GAAG,CAAC,OAAJ,CAAY,MAAZ,MAAwB,CAAnD,IAAwD,GAAG,CAAC,KAAJ,CAAU,GAAV,EAAe,MAAf,IAAyB,CAAjF;AAAkF,CAD7E;AAGP;;AAEG;;AACH,OAAO,IAAM,KAAK,GAAG,UAAC,GAAD,EAAY;AAC/B,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAJ,CAAU,GAAV,CAAjB;AACA,MAAI,QAAQ,CAAC,MAAT,GAAkB,CAAlB,IAAuB,QAAQ,CAAC,CAAD,CAAR,KAAgB,KAA3C,EAAkD,MAAM,IAAI,KAAJ,CAAU,eAAV,CAAN;;AAC5C,MAAA,EAAA,GAAA,MAAA,CAQF,QARE,CAAA;AAAA,MAEJ;AACA,EAAA,SAAS,GAAA,EAAA,CAAA,CAAA,CAHL;AAAA,MAIJ,OAAO,GAAA,EAAA,CAAA,CAAA,CAJH;AAAA,MAKJ,MAAM,GAAA,EAAA,CAAA,CAAA,CALF;AAAA,MAMJ,SAAS,GAAA,EAAA,CAAA,CAAA,CANL;AAAA,MAOD,QAAQ,GAAA,EAAA,CAAA,KAAA,CAAA,CAAA,CAPP;;AAUN,SAAO;AACL,IAAA,SAAS,EAAA,SADJ;AAEL,IAAA,OAAO,EAAA,OAFF;AAGL,IAAA,MAAM,EAAA,MAHD;AAIL,IAAA,SAAS,EAAA,SAJJ;AAKL,IAAA,QAAQ,EAAE,QAAQ,CAAC,IAAT,CAAc,GAAd;AALL,GAAP;AAOD,CApBM;AAwBP;;AAEG;;AACH,OAAO,IAAM,KAAK,GAAG,UAAC,SAAD,EAAwB;AACnC,MAAA,EAAA,GAA4D,SAAS,CAApD,SAAjB;AAAA,MAAA,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EAAjB;AAAA,MAAmB,OAAO,GAAkC,SAAS,CAA3C,OAA1B;AAAA,MAA4B,MAAM,GAA0B,SAAS,CAAnC,MAAlC;AAAA,MAAoC,SAAS,GAAe,SAAS,CAAxB,SAA7C;AAAA,MAA+C,QAAQ,GAAK,SAAS,CAAd,QAAvD;;AACR,MAAI,CAAC,OAAD,EAAU,MAAV,EAAkB,SAAlB,EAA6B,QAA7B,EAAuC,IAAvC,CAA4C,UAAC,OAAD,EAAQ;AAAK,WAAA,OAAO,OAAP,KAAA,QAAA;AAA2B,GAApF,CAAJ,EAA2F;AACzF,UAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACD;;AACD,SAAO,SAAO,SAAP,GAAgB,GAAhB,GAAoB,OAApB,GAA2B,GAA3B,GAA+B,MAA/B,GAAqC,GAArC,GAAyC,SAAzC,GAAkD,GAAlD,GAAsD,QAA7D;AACD,CANM","sourcesContent":["export interface ARN {\n  partition: string;\n  service: string;\n  region: string;\n  accountId: string;\n  resource: string;\n}\n/**\n * Validate whether a string is an ARN.\n */\nexport const validate = (str: any): boolean =>\n  typeof str === \"string\" && str.indexOf(\"arn:\") === 0 && str.split(\":\").length >= 6;\n\n/**\n * Parse an ARN string into structure with partition, service, region, accountId and resource values\n */\nexport const parse = (arn: string): ARN => {\n  const segments = arn.split(\":\");\n  if (segments.length < 6 || segments[0] !== \"arn\") throw new Error(\"Malformed ARN\");\n  const [\n    ,\n    //Skip \"arn\" literal\n    partition,\n    service,\n    region,\n    accountId,\n    ...resource\n  ] = segments;\n\n  return {\n    partition,\n    service,\n    region,\n    accountId,\n    resource: resource.join(\":\"),\n  };\n};\n\ntype buildOptions = Omit<ARN, \"partition\"> & { partition?: string };\n\n/**\n * Build an ARN with service, partition, region, accountId, and resources strings\n */\nexport const build = (arnObject: buildOptions): string => {\n  const { partition = \"aws\", service, region, accountId, resource } = arnObject;\n  if ([service, region, accountId, resource].some((segment) => typeof segment !== \"string\")) {\n    throw new Error(\"Input ARN object is invalid\");\n  }\n  return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}