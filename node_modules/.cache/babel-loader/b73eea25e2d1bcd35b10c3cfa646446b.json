{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar bucketHostname_1 = require(\"./bucketHostname\");\n\nvar protocol_http_1 = require(\"@aws-sdk/protocol-http\");\n\nfunction bucketEndpointMiddleware(options) {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var bucketName, replaceBucketInPath, request, _a, hostname, bucketEndpoint;\n\n        return tslib_1.__generator(this, function (_b) {\n          bucketName = args.input.Bucket;\n          replaceBucketInPath = options.bucketEndpoint;\n          request = args.request;\n\n          if (protocol_http_1.HttpRequest.isInstance(request)) {\n            if (options.bucketEndpoint) {\n              request.hostname = bucketName;\n            } else {\n              _a = bucketHostname_1.bucketHostname({\n                bucketName: bucketName,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: options.useDualstackEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\"\n              }), hostname = _a.hostname, bucketEndpoint = _a.bucketEndpoint;\n              request.hostname = hostname;\n              replaceBucketInPath = bucketEndpoint;\n            }\n\n            if (replaceBucketInPath) {\n              request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n\n              if (request.path === \"\") {\n                request.path = \"/\";\n              }\n            }\n          }\n\n          return [2\n          /*return*/\n          , next(tslib_1.__assign(tslib_1.__assign({}, args), {\n            request: request\n          }))];\n        });\n      });\n    };\n  };\n}\n\nexports.bucketEndpointMiddleware = bucketEndpointMiddleware;\nexports.bucketEndpointMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\"\n};\n\nexports.getBucketEndpointPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.addRelativeTo(bucketEndpointMiddleware(options), exports.bucketEndpointMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../src/bucketEndpointMiddleware.ts"],"names":[],"mappings":";;;;;;;;AAAA,IAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAYA,IAAA,eAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAEA,SAAgB,wBAAhB,CACE,OADF,EACuC;AADvC,MAAA,KAAA,GAAA,IAAA;;AAGE,SAAO,UACL,IADK,EAC0B;AACD,WAAA,UAC9B,IAD8B,EACE;AAAA,aAAA,OAAA,CAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;AAEhB,UAAA,UAAU,GAAK,IAAI,CAAC,KAAL,CAAL,MAAV;AACZ,UAAA,mBAAmB,GAAG,OAAO,CAAC,cAA9B;AACA,UAAA,OAAO,GAAG,IAAI,CAAC,OAAf;;AACJ,cAAI,eAAA,CAAA,WAAA,CAAY,UAAZ,CAAuB,OAAvB,CAAJ,EAAqC;AACnC,gBAAI,OAAO,CAAC,cAAZ,EAA4B;AAC1B,cAAA,OAAO,CAAC,QAAR,GAAmB,UAAnB;AACD,aAFD,MAEO;AACC,cAAA,EAAA,GAA+B,gBAAA,CAAA,cAAA,CAAe;AAClD,gBAAA,UAAU,EAAA,UADwC;AAElD,gBAAA,YAAY,EAAE,OAAO,CAAC,QAF4B;AAGlD,gBAAA,kBAAkB,EAAE,OAAO,CAAC,qBAHsB;AAIlD,gBAAA,iBAAiB,EAAE,OAAO,CAAC,oBAJuB;AAKlD,gBAAA,iBAAiB,EAAE,OAAO,CAAC,cALuB;AAMlD,gBAAA,aAAa,EAAE,OAAO,CAAC,QAAR,KAAqB;AANc,eAAf,CAA/B,EAAE,QAAQ,GAAA,EAAA,CAAA,QAAV,EAAY,cAAc,GAAA,EAAA,CAAA,cAA1B;AASN,cAAA,OAAO,CAAC,QAAR,GAAmB,QAAnB;AACA,cAAA,mBAAmB,GAAG,cAAtB;AACD;;AAED,gBAAI,mBAAJ,EAAyB;AACvB,cAAA,OAAO,CAAC,IAAR,GAAe,OAAO,CAAC,IAAR,CAAa,OAAb,CAAqB,cAArB,EAAqC,EAArC,CAAf;;AACA,kBAAI,OAAO,CAAC,IAAR,KAAiB,EAArB,EAAyB;AACvB,gBAAA,OAAO,CAAC,IAAR,GAAe,GAAf;AACD;AACF;AACF;;AAED,iBAAA,CAAA;AAAA;AAAA,YAAO,IAAI,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EAAM,IAAN,CAAA,EAAU;AAAE,YAAA,OAAO,EAAA;AAAT,WAAV,CAAA,CAAX,CAAA;;OA9BgC,CAAA;AADF,KAAA;AAgC/B,GAlCD;AAmCD;;AAtCD,OAAA,CAAA,wBAAA,GAAA,wBAAA;AAwCa,OAAA,CAAA,+BAAA,GACkB;AAC7B,EAAA,IAAI,EAAE,OADuB;AAE7B,EAAA,IAAI,EAAE,CAAC,iBAAD,CAFuB;AAG7B,EAAA,IAAI,EAAE,0BAHuB;AAI7B,EAAA,QAAQ,EAAE,QAJmB;AAK7B,EAAA,YAAY,EAAE;AALe,CADlB;;AASA,OAAA,CAAA,uBAAA,GAA0B,UACrC,OADqC,EACA;AACb,SAAC;AACzB,IAAA,YAAY,EAAE,UAAA,WAAA,EAAW;AACvB,MAAA,WAAW,CAAC,aAAZ,CACE,wBAAwB,CAAC,OAAD,CAD1B,EAEE,OAAA,CAAA,+BAFF;AAID;AANwB,GAAD;AAOxB,CATW","sourcesContent":["import { bucketHostname } from \"./bucketHostname\";\nimport { BucketEndpointResolvedConfig } from \"./configurations\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  MetadataBearer,\n  Pluggable,\n  RelativeLocation\n} from \"@aws-sdk/types\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\n\nexport function bucketEndpointMiddleware(\n  options: BucketEndpointResolvedConfig\n): BuildMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: BuildHandler<any, Output>\n  ): BuildHandler<any, Output> => async (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    const { Bucket: bucketName } = args.input;\n    let replaceBucketInPath = options.bucketEndpoint;\n    let request = args.request;\n    if (HttpRequest.isInstance(request)) {\n      if (options.bucketEndpoint) {\n        request.hostname = bucketName;\n      } else {\n        const { hostname, bucketEndpoint } = bucketHostname({\n          bucketName,\n          baseHostname: request.hostname,\n          accelerateEndpoint: options.useAccelerateEndpoint,\n          dualstackEndpoint: options.useDualstackEndpoint,\n          pathStyleEndpoint: options.forcePathStyle,\n          tlsCompatible: request.protocol === \"https:\"\n        });\n\n        request.hostname = hostname;\n        replaceBucketInPath = bucketEndpoint;\n      }\n\n      if (replaceBucketInPath) {\n        request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n        if (request.path === \"\") {\n          request.path = \"/\";\n        }\n      }\n    }\n\n    return next({ ...args, request });\n  };\n}\n\nexport const bucketEndpointMiddlewareOptions: BuildHandlerOptions &\n  RelativeLocation<any, any> = {\n  step: \"build\",\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\"\n};\n\nexport const getBucketEndpointPlugin = (\n  options: BucketEndpointResolvedConfig\n): Pluggable<any, any> => ({\n  applyToStack: clientStack => {\n    clientStack.addRelativeTo(\n      bucketEndpointMiddleware(options),\n      bucketEndpointMiddlewareOptions\n    );\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}