{"ast":null,"code":"var SHORT_TO_HEX = {};\nvar HEX_TO_SHORT = {};\n\nfor (var i = 0; i < 256; i++) {\n  var encodedByte = i.toString(16).toLowerCase();\n\n  if (encodedByte.length === 1) {\n    encodedByte = \"0\" + encodedByte;\n  }\n\n  SHORT_TO_HEX[i] = encodedByte;\n  HEX_TO_SHORT[encodedByte] = i;\n}\n/**\n * Converts a hexadecimal encoded string to a Uint8Array of bytes.\n *\n * @param encoded The hexadecimal encoded string\n */\n\n\nexport function fromHex(encoded) {\n  if (encoded.length % 2 !== 0) {\n    throw new Error(\"Hex encoded strings must have an even number length\");\n  }\n\n  var out = new Uint8Array(encoded.length / 2);\n\n  for (var i = 0; i < encoded.length; i += 2) {\n    var encodedByte = encoded.substr(i, 2).toLowerCase();\n\n    if (encodedByte in HEX_TO_SHORT) {\n      out[i / 2] = HEX_TO_SHORT[encodedByte];\n    } else {\n      throw new Error(\"Cannot decode unrecognized sequence \" + encodedByte + \" as hexadecimal\");\n    }\n  }\n\n  return out;\n}\n/**\n * Converts a Uint8Array of binary data to a hexadecimal encoded string.\n *\n * @param bytes The binary data to encode\n */\n\nexport function toHex(bytes) {\n  var out = \"\";\n\n  for (var i = 0; i < bytes.byteLength; i++) {\n    out += SHORT_TO_HEX[bytes[i]];\n  }\n\n  return out;\n}","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,IAAM,YAAY,GAA8B,EAAhD;AACA,IAAM,YAAY,GAA8B,EAAhD;;AAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,CAAC,EAA1B,EAA8B;AAC5B,MAAI,WAAW,GAAG,CAAC,CAAC,QAAF,CAAW,EAAX,EAAe,WAAf,EAAlB;;AACA,MAAI,WAAW,CAAC,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,IAAA,WAAW,GAAG,MAAI,WAAlB;AACD;;AAED,EAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,WAAlB;AACA,EAAA,YAAY,CAAC,WAAD,CAAZ,GAA4B,CAA5B;AACD;AAED;;;;AAIG;;;AACH,OAAM,SAAU,OAAV,CAAkB,OAAlB,EAAiC;AACrC,MAAI,OAAO,CAAC,MAAR,GAAiB,CAAjB,KAAuB,CAA3B,EAA8B;AAC5B,UAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAED,MAAM,GAAG,GAAG,IAAI,UAAJ,CAAe,OAAO,CAAC,MAAR,GAAiB,CAAhC,CAAZ;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,MAA5B,EAAoC,CAAC,IAAI,CAAzC,EAA4C;AAC1C,QAAM,WAAW,GAAG,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,CAAlB,EAAqB,WAArB,EAApB;;AACA,QAAI,WAAW,IAAI,YAAnB,EAAiC;AAC/B,MAAA,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,GAAa,YAAY,CAAC,WAAD,CAAzB;AACD,KAFD,MAEO;AACL,YAAM,IAAI,KAAJ,CAAU,yCAAuC,WAAvC,GAAkD,iBAA5D,CAAN;AACD;AACF;;AAED,SAAO,GAAP;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,KAAV,CAAgB,KAAhB,EAAiC;AACrC,MAAI,GAAG,GAAG,EAAV;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,UAA1B,EAAsC,CAAC,EAAvC,EAA2C;AACzC,IAAA,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAD,CAAN,CAAnB;AACD;;AAED,SAAO,GAAP;AACD","sourcesContent":["const SHORT_TO_HEX: { [key: number]: string } = {};\nconst HEX_TO_SHORT: { [key: string]: number } = {};\n\nfor (let i = 0; i < 256; i++) {\n  let encodedByte = i.toString(16).toLowerCase();\n  if (encodedByte.length === 1) {\n    encodedByte = `0${encodedByte}`;\n  }\n\n  SHORT_TO_HEX[i] = encodedByte;\n  HEX_TO_SHORT[encodedByte] = i;\n}\n\n/**\n * Converts a hexadecimal encoded string to a Uint8Array of bytes.\n *\n * @param encoded The hexadecimal encoded string\n */\nexport function fromHex(encoded: string): Uint8Array {\n  if (encoded.length % 2 !== 0) {\n    throw new Error(\"Hex encoded strings must have an even number length\");\n  }\n\n  const out = new Uint8Array(encoded.length / 2);\n  for (let i = 0; i < encoded.length; i += 2) {\n    const encodedByte = encoded.substr(i, 2).toLowerCase();\n    if (encodedByte in HEX_TO_SHORT) {\n      out[i / 2] = HEX_TO_SHORT[encodedByte];\n    } else {\n      throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);\n    }\n  }\n\n  return out;\n}\n\n/**\n * Converts a Uint8Array of binary data to a hexadecimal encoded string.\n *\n * @param bytes The binary data to encode\n */\nexport function toHex(bytes: Uint8Array): string {\n  let out = \"\";\n  for (let i = 0; i < bytes.byteLength; i++) {\n    out += SHORT_TO_HEX[bytes[i]];\n  }\n\n  return out;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}