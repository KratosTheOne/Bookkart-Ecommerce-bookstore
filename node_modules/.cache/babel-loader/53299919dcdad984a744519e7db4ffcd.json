{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nexport var retryMiddleware = function (options) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , options.retryStrategy.retry(next, args)];\n        });\n      });\n    };\n  };\n};\nexport var retryMiddlewareOptions = {\n  name: \"retryMiddleware\",\n  tags: [\"RETRY\"],\n  step: \"finalizeRequest\",\n  priority: \"high\"\n};\nexport var getRetryPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(retryMiddleware(options), retryMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/retryMiddleware.ts"],"names":[],"mappings":";AAYA,OAAO,IAAM,eAAe,GAAG,UAAC,OAAD,EAA6B;AAAK,SAAA,UAC/D,IAD+D,EAC7B;AACD,WAAA,UACjC,IADiC,EACE;AAAA,aAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;AAAA,eAAA,WAAA,CAAA,IAAA,EAAA,UAAA,EAAA,EAAA;AACQ,iBAAA,CAAA;AAAA;AAAA,YAAA,OAAO,CAAC,aAAR,CAAsB,KAAtB,CAA4B,IAA5B,EAAkC,IAAlC,CAAA,CAAA;SADR,CAAA;OAAA,CAAA;AADF,KAAA;AAF8B,GAAA;AAImB,CAJ7E;AAMP,OAAO,IAAM,sBAAsB,GAAqD;AACtF,EAAA,IAAI,EAAE,iBADgF;AAEtF,EAAA,IAAI,EAAE,CAAC,OAAD,CAFgF;AAGtF,EAAA,IAAI,EAAE,iBAHgF;AAItF,EAAA,QAAQ,EAAE;AAJ4E,CAAjF;AAOP,OAAO,IAAM,cAAc,GAAG,UAAC,OAAD,EAA6B;AAA0B,SAAC;AACpF,IAAA,YAAY,EAAE,UAAC,WAAD,EAAY;AACxB,MAAA,WAAW,CAAC,GAAZ,CAAgB,eAAe,CAAC,OAAD,CAA/B,EAA0C,sBAA1C;AACD;AAHmF,GAAD;AAInF,CAJK","sourcesContent":["import {\n  AbsoluteLocation,\n  FinalizeHandler,\n  FinalizeHandlerArguments,\n  FinalizeHandlerOutput,\n  FinalizeRequestHandlerOptions,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nimport { RetryResolvedConfig } from \"./configurations\";\n\nexport const retryMiddleware = (options: RetryResolvedConfig) => <Output extends MetadataBearer = MetadataBearer>(\n  next: FinalizeHandler<any, Output>\n): FinalizeHandler<any, Output> => async (\n  args: FinalizeHandlerArguments<any>\n): Promise<FinalizeHandlerOutput<Output>> => options.retryStrategy.retry(next, args);\n\nexport const retryMiddlewareOptions: FinalizeRequestHandlerOptions & AbsoluteLocation = {\n  name: \"retryMiddleware\",\n  tags: [\"RETRY\"],\n  step: \"finalizeRequest\",\n  priority: \"high\",\n};\n\nexport const getRetryPlugin = (options: RetryResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(retryMiddleware(options), retryMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}