{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { parse as parseArn, validate as validateArn } from \"@aws-sdk/util-arn-parser\";\nimport { bucketHostname } from \"./bucketHostname\";\nimport { getPseudoRegion } from \"./bucketHostnameUtils\";\nexport var bucketEndpointMiddleware = function bucketEndpointMiddleware(options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var bucketName, replaceBucketInPath, request, bucketArn, clientRegion, _a, _b, partition, _c, signingRegion, useArnRegion, _d, hostname, bucketEndpoint, modifiedSigningRegion, signingService, clientRegion, _e, _f, hostname, bucketEndpoint;\n\n        return __generator(this, function (_g) {\n          switch (_g.label) {\n            case 0:\n              bucketName = args.input.Bucket;\n              replaceBucketInPath = options.bucketEndpoint;\n              request = args.request;\n              if (!HttpRequest.isInstance(request)) return [3\n              /*break*/\n              , 8];\n              if (!options.bucketEndpoint) return [3\n              /*break*/\n              , 1];\n              request.hostname = bucketName;\n              return [3\n              /*break*/\n              , 7];\n\n            case 1:\n              if (!validateArn(bucketName)) return [3\n              /*break*/\n              , 5];\n              bucketArn = parseArn(bucketName);\n              _a = getPseudoRegion;\n              return [4\n              /*yield*/\n              , options.region()];\n\n            case 2:\n              clientRegion = _a.apply(void 0, [_g.sent()]);\n              return [4\n              /*yield*/\n              , options.regionInfoProvider(clientRegion)];\n\n            case 3:\n              _b = _g.sent() || {}, partition = _b.partition, _c = _b.signingRegion, signingRegion = _c === void 0 ? clientRegion : _c;\n              return [4\n              /*yield*/\n              , options.useArnRegion()];\n\n            case 4:\n              useArnRegion = _g.sent();\n              _d = bucketHostname({\n                bucketName: bucketArn,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: options.useDualstackEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\",\n                useArnRegion: useArnRegion,\n                clientPartition: partition,\n                clientSigningRegion: signingRegion,\n                clientRegion: clientRegion,\n                isCustomEndpoint: options.isCustomEndpoint\n              }), hostname = _d.hostname, bucketEndpoint = _d.bucketEndpoint, modifiedSigningRegion = _d.signingRegion, signingService = _d.signingService; // If the request needs to use a region or service name inferred from ARN that different from client region, we\n              // need to set them in the handler context so the signer will use them\n\n              if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n                context[\"signing_region\"] = modifiedSigningRegion;\n              }\n\n              if (signingService && signingService !== \"s3\") {\n                context[\"signing_service\"] = signingService;\n              }\n\n              request.hostname = hostname;\n              replaceBucketInPath = bucketEndpoint;\n              return [3\n              /*break*/\n              , 7];\n\n            case 5:\n              _e = getPseudoRegion;\n              return [4\n              /*yield*/\n              , options.region()];\n\n            case 6:\n              clientRegion = _e.apply(void 0, [_g.sent()]);\n              _f = bucketHostname({\n                bucketName: bucketName,\n                clientRegion: clientRegion,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: options.useDualstackEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\",\n                isCustomEndpoint: options.isCustomEndpoint\n              }), hostname = _f.hostname, bucketEndpoint = _f.bucketEndpoint;\n              request.hostname = hostname;\n              replaceBucketInPath = bucketEndpoint;\n              _g.label = 7;\n\n            case 7:\n              if (replaceBucketInPath) {\n                request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n\n                if (request.path === \"\") {\n                  request.path = \"/\";\n                }\n              }\n\n              _g.label = 8;\n\n            case 8:\n              return [2\n              /*return*/\n              , next(__assign(__assign({}, args), {\n                request: request\n              }))];\n          }\n        });\n      });\n    };\n  };\n};\nexport var bucketEndpointMiddlewareOptions = {\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\",\n  override: true\n};\nexport var getBucketEndpointPlugin = function getBucketEndpointPlugin(options) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/bucketEndpointMiddleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  HandlerExecutionContext,\n  MetadataBearer,\n  Pluggable,\n  RelativeMiddlewareOptions,\n} from \"@aws-sdk/types\";\nimport { parse as parseArn, validate as validateArn } from \"@aws-sdk/util-arn-parser\";\n\nimport { bucketHostname } from \"./bucketHostname\";\nimport { getPseudoRegion } from \"./bucketHostnameUtils\";\nimport { BucketEndpointResolvedConfig } from \"./configurations\";\n\nexport const bucketEndpointMiddleware = (options: BucketEndpointResolvedConfig): BuildMiddleware<any, any> => <\n  Output extends MetadataBearer\n>(\n  next: BuildHandler<any, Output>,\n  context: HandlerExecutionContext\n): BuildHandler<any, Output> => async (args: BuildHandlerArguments<any>): Promise<BuildHandlerOutput<Output>> => {\n  const { Bucket: bucketName } = args.input as { Bucket: string };\n  let replaceBucketInPath = options.bucketEndpoint;\n  const request = args.request;\n  if (HttpRequest.isInstance(request)) {\n    if (options.bucketEndpoint) {\n      request.hostname = bucketName;\n    } else if (validateArn(bucketName)) {\n      const bucketArn = parseArn(bucketName);\n      const clientRegion = getPseudoRegion(await options.region());\n      const { partition, signingRegion = clientRegion } = (await options.regionInfoProvider(clientRegion)) || {};\n      const useArnRegion = await options.useArnRegion();\n      const { hostname, bucketEndpoint, signingRegion: modifiedSigningRegion, signingService } = bucketHostname({\n        bucketName: bucketArn,\n        baseHostname: request.hostname,\n        accelerateEndpoint: options.useAccelerateEndpoint,\n        dualstackEndpoint: options.useDualstackEndpoint,\n        pathStyleEndpoint: options.forcePathStyle,\n        tlsCompatible: request.protocol === \"https:\",\n        useArnRegion,\n        clientPartition: partition,\n        clientSigningRegion: signingRegion,\n        clientRegion: clientRegion,\n        isCustomEndpoint: options.isCustomEndpoint,\n      });\n\n      // If the request needs to use a region or service name inferred from ARN that different from client region, we\n      // need to set them in the handler context so the signer will use them\n      if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n        context[\"signing_region\"] = modifiedSigningRegion;\n      }\n      if (signingService && signingService !== \"s3\") {\n        context[\"signing_service\"] = signingService;\n      }\n\n      request.hostname = hostname;\n      replaceBucketInPath = bucketEndpoint;\n    } else {\n      const clientRegion = getPseudoRegion(await options.region());\n      const { hostname, bucketEndpoint } = bucketHostname({\n        bucketName,\n        clientRegion,\n        baseHostname: request.hostname,\n        accelerateEndpoint: options.useAccelerateEndpoint,\n        dualstackEndpoint: options.useDualstackEndpoint,\n        pathStyleEndpoint: options.forcePathStyle,\n        tlsCompatible: request.protocol === \"https:\",\n        isCustomEndpoint: options.isCustomEndpoint,\n      });\n\n      request.hostname = hostname;\n      replaceBucketInPath = bucketEndpoint;\n    }\n\n    if (replaceBucketInPath) {\n      request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n      if (request.path === \"\") {\n        request.path = \"/\";\n      }\n    }\n  }\n\n  return next({ ...args, request });\n};\n\nexport const bucketEndpointMiddlewareOptions: RelativeMiddlewareOptions = {\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\",\n  override: true,\n};\n\nexport const getBucketEndpointPlugin = (options: BucketEndpointResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}