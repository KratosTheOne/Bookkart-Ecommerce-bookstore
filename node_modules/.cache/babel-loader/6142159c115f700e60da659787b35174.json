{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\n\nvar isClockSkewed = function isClockSkewed(newServerTime, systemClockOffset) {\n  return Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 300000;\n};\n\nvar getSkewCorrectedDate = function getSkewCorrectedDate(systemClockOffset) {\n  return new Date(Date.now() + systemClockOffset);\n};\n\nexport function awsAuthMiddleware(options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(this, void 0, void 0, function () {\n        var signer, _a, output, _b, _c, headers, dateHeader, serverTime;\n\n        var _d;\n\n        return __generator(this, function (_e) {\n          switch (_e.label) {\n            case 0:\n              if (!HttpRequest.isInstance(args.request)) return [2\n              /*return*/\n              , next(args)];\n              if (!(typeof options.signer === \"function\")) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , options.signer()];\n\n            case 1:\n              _a = _e.sent();\n              return [3\n              /*break*/\n              , 3];\n\n            case 2:\n              _a = options.signer;\n              _e.label = 3;\n\n            case 3:\n              signer = _a;\n              _b = next;\n              _c = [__assign({}, args)];\n              _d = {};\n              return [4\n              /*yield*/\n              , signer.sign(args.request, {\n                signingDate: new Date(Date.now() + options.systemClockOffset),\n                signingRegion: context[\"signing_region\"],\n                signingService: context[\"signing_service\"]\n              })];\n\n            case 4:\n              return [4\n              /*yield*/\n              , _b.apply(void 0, [__assign.apply(void 0, _c.concat([(_d.request = _e.sent(), _d)]))])];\n\n            case 5:\n              output = _e.sent();\n              headers = output.response.headers;\n              dateHeader = headers && (headers.date || headers.Date);\n\n              if (dateHeader) {\n                serverTime = Date.parse(dateHeader);\n\n                if (isClockSkewed(serverTime, options.systemClockOffset)) {\n                  options.systemClockOffset = serverTime - Date.now();\n                }\n              }\n\n              return [2\n              /*return*/\n              , output];\n          }\n        });\n      });\n    };\n  };\n}\nexport var awsAuthMiddlewareOptions = {\n  name: \"awsAuthMiddleware\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\",\n  override: true\n};\nexport var getAwsAuthPlugin = function getAwsAuthPlugin(options) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/middleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  FinalizeHandler,\n  FinalizeHandlerArguments,\n  FinalizeHandlerOutput,\n  FinalizeRequestMiddleware,\n  HandlerExecutionContext,\n  Pluggable,\n  RelativeMiddlewareOptions,\n} from \"@aws-sdk/types\";\n\nimport { AwsAuthResolvedConfig } from \"./configurations\";\n\nconst isClockSkewed = (newServerTime: number, systemClockOffset: number) =>\n  Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 300000;\n\nconst getSkewCorrectedDate = (systemClockOffset: number) => new Date(Date.now() + systemClockOffset);\n\nexport function awsAuthMiddleware<Input extends object, Output extends object>(\n  options: AwsAuthResolvedConfig\n): FinalizeRequestMiddleware<Input, Output> {\n  return (next: FinalizeHandler<Input, Output>, context: HandlerExecutionContext): FinalizeHandler<Input, Output> =>\n    async function (args: FinalizeHandlerArguments<Input>): Promise<FinalizeHandlerOutput<Output>> {\n      if (!HttpRequest.isInstance(args.request)) return next(args);\n      const signer = typeof options.signer === \"function\" ? await options.signer() : options.signer;\n      const output = await next({\n        ...args,\n        request: await signer.sign(args.request, {\n          signingDate: new Date(Date.now() + options.systemClockOffset),\n          signingRegion: context[\"signing_region\"],\n          signingService: context[\"signing_service\"],\n        }),\n      });\n\n      const { headers } = output.response as any;\n      const dateHeader = headers && (headers.date || headers.Date);\n      if (dateHeader) {\n        const serverTime = Date.parse(dateHeader);\n        if (isClockSkewed(serverTime, options.systemClockOffset)) {\n          options.systemClockOffset = serverTime - Date.now();\n        }\n      }\n\n      return output;\n    };\n}\n\nexport const awsAuthMiddlewareOptions: RelativeMiddlewareOptions = {\n  name: \"awsAuthMiddleware\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\",\n  override: true,\n};\n\nexport const getAwsAuthPlugin = (options: AwsAuthResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}