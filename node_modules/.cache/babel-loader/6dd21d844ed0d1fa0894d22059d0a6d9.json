{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nvar IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nvar DOTS_PATTERN = /\\.\\./;\nvar DOT_PATTERN = /\\./;\nvar S3_HOSTNAME_PATTERN = /^(.+\\.)?s3[.-]([a-z0-9-]+)\\./;\nvar S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\\.amazonaws\\.com$/;\nvar AWS_PARTITION_SUFFIX = \"amazonaws.com\";\n\nfunction bucketHostname(_a) {\n  var _b = _a.accelerateEndpoint,\n      accelerateEndpoint = _b === void 0 ? false : _b,\n      baseHostname = _a.baseHostname,\n      bucketName = _a.bucketName,\n      _c = _a.dualstackEndpoint,\n      dualstackEndpoint = _c === void 0 ? false : _c,\n      _d = _a.pathStyleEndpoint,\n      pathStyleEndpoint = _d === void 0 ? false : _d,\n      _e = _a.tlsCompatible,\n      tlsCompatible = _e === void 0 ? true : _e;\n\n  if (!S3_HOSTNAME_PATTERN.test(baseHostname)) {\n    return {\n      bucketEndpoint: false,\n      hostname: baseHostname\n    };\n  }\n\n  var _f = tslib_1.__read(S3_US_EAST_1_ALTNAME_PATTERN.test(baseHostname) ? [\"us-east-1\", AWS_PARTITION_SUFFIX] : partitionSuffix(baseHostname), 2),\n      region = _f[0],\n      hostnameSuffix = _f[1];\n\n  if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || tlsCompatible && DOT_PATTERN.test(bucketName)) {\n    return {\n      bucketEndpoint: false,\n      hostname: dualstackEndpoint ? \"s3.dualstack.\" + region + \".\" + hostnameSuffix : baseHostname\n    };\n  }\n\n  if (accelerateEndpoint) {\n    baseHostname = \"s3-accelerate\" + (dualstackEndpoint ? \".dualstack\" : \"\") + \".\" + hostnameSuffix;\n  } else if (dualstackEndpoint) {\n    baseHostname = \"s3.dualstack.\" + region + \".\" + hostnameSuffix;\n  }\n\n  return {\n    bucketEndpoint: true,\n    hostname: bucketName + \".\" + baseHostname\n  };\n}\n\nexports.bucketHostname = bucketHostname;\n/**\n * Determines whether a given string is DNS compliant per the rules outlined by\n * S3. Length, capitaization, and leading dot restrictions are enforced by the\n * DOMAIN_PATTERN regular expression.\n *\n * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html\n */\n\nfunction isDnsCompatibleBucketName(bucketName) {\n  return DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);\n}\n\nfunction partitionSuffix(hostname) {\n  var parts = hostname.match(S3_HOSTNAME_PATTERN);\n  return [parts[2], hostname.replace(new RegExp(\"^\" + parts[0]), \"\")];\n}","map":{"version":3,"sources":["../src/bucketHostname.ts"],"names":[],"mappings":";;;;;;;;AAAA,IAAM,cAAc,GAAG,sCAAvB;AACA,IAAM,kBAAkB,GAAG,eAA3B;AACA,IAAM,YAAY,GAAG,MAArB;AACA,IAAM,WAAW,GAAG,IAApB;AACA,IAAM,mBAAmB,GAAG,8BAA5B;AACA,IAAM,4BAA4B,GAAG,oCAArC;AACA,IAAM,oBAAoB,GAAG,eAA7B;;AAgBA,SAAgB,cAAhB,CAA+B,EAA/B,EAO2B;MANzB,EAAA,GAAA,EAAA,CAAA,kB;MAAA,kBAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,E;MACA,YAAA,GAAA,EAAA,CAAA,Y;MACA,UAAA,GAAA,EAAA,CAAA,U;MACA,EAAA,GAAA,EAAA,CAAA,iB;MAAA,iBAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,E;MACA,EAAA,GAAA,EAAA,CAAA,iB;MAAA,iBAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,E;MACA,EAAA,GAAA,EAAA,CAAA,a;MAAA,aAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,E;;AAEA,MAAI,CAAC,mBAAmB,CAAC,IAApB,CAAyB,YAAzB,CAAL,EAA6C;AAC3C,WAAO;AACL,MAAA,cAAc,EAAE,KADX;AAEL,MAAA,QAAQ,EAAE;AAFL,KAAP;AAID;;AAEK,MAAA,EAAA,GAAA,OAAA,CAAA,MAAA,CAAA,4BAAA,CAAA,IAAA,CAAA,YAAA,I,mCAAA,G,6BAAA,EAI2B,CAJ3B,CAAA;AAAA,MAAC,MAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAS,cAAA,GAAA,EAAA,CAAA,CAAA,CAAT;;AAMN,MACE,iBAAiB,IACjB,CAAC,yBAAyB,CAAC,UAAD,CAD1B,IAEC,aAAa,IAAI,WAAW,CAAC,IAAZ,CAAiB,UAAjB,CAHpB,EAIE;AACA,WAAO;AACL,MAAA,cAAc,EAAE,KADX;AAEL,MAAA,QAAQ,EAAE,iBAAiB,GACvB,kBAAgB,MAAhB,GAAsB,GAAtB,GAA0B,cADH,GAEvB;AAJC,KAAP;AAMD;;AAED,MAAI,kBAAJ,EAAwB;AACtB,IAAA,YAAY,GAAG,mBACb,iBAAiB,GAAG,YAAH,GAAkB,EADtB,IACwB,GADxB,GAEX,cAFJ;AAGD,GAJD,MAIO,IAAI,iBAAJ,EAAuB;AAC5B,IAAA,YAAY,GAAG,kBAAgB,MAAhB,GAAsB,GAAtB,GAA0B,cAAzC;AACD;;AAED,SAAO;AACL,IAAA,cAAc,EAAE,IADX;AAEL,IAAA,QAAQ,EAAK,UAAU,GAAA,GAAV,GAAc;AAFtB,GAAP;AAID;;AA9CD,OAAA,CAAA,cAAA,GAAA,cAAA;AAgDA;;;;;;;;AAOA,SAAS,yBAAT,CAAmC,UAAnC,EAAqD;AACnD,SACE,cAAc,CAAC,IAAf,CAAoB,UAApB,KACA,CAAC,kBAAkB,CAAC,IAAnB,CAAwB,UAAxB,CADD,IAEA,CAAC,YAAY,CAAC,IAAb,CAAkB,UAAlB,CAHH;AAKD;;AAED,SAAS,eAAT,CAAyB,QAAzB,EAAyC;AACvC,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAT,CAAe,mBAAf,CAAd;AAEA,SAAO,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,QAAQ,CAAC,OAAT,CAAiB,IAAI,MAAJ,CAAW,MAAI,KAAK,CAAC,CAAD,CAApB,CAAjB,EAA6C,EAA7C,CAAX,CAAP;AACD","sourcesContent":["const DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nconst IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nconst DOTS_PATTERN = /\\.\\./;\nconst DOT_PATTERN = /\\./;\nconst S3_HOSTNAME_PATTERN = /^(.+\\.)?s3[.-]([a-z0-9-]+)\\./;\nconst S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\\.amazonaws\\.com$/;\nconst AWS_PARTITION_SUFFIX = \"amazonaws.com\";\n\nexport interface BucketHostnameParameters {\n  accelerateEndpoint?: boolean;\n  baseHostname: string;\n  bucketName: string;\n  dualstackEndpoint?: boolean;\n  pathStyleEndpoint?: boolean;\n  tlsCompatible?: boolean;\n}\n\nexport interface BucketHostname {\n  hostname: string;\n  bucketEndpoint: boolean;\n}\n\nexport function bucketHostname({\n  accelerateEndpoint = false,\n  baseHostname,\n  bucketName,\n  dualstackEndpoint = false,\n  pathStyleEndpoint = false,\n  tlsCompatible = true\n}: BucketHostnameParameters): BucketHostname {\n  if (!S3_HOSTNAME_PATTERN.test(baseHostname)) {\n    return {\n      bucketEndpoint: false,\n      hostname: baseHostname\n    };\n  }\n\n  const [region, hostnameSuffix] = S3_US_EAST_1_ALTNAME_PATTERN.test(\n    baseHostname\n  )\n    ? [\"us-east-1\", AWS_PARTITION_SUFFIX]\n    : partitionSuffix(baseHostname);\n\n  if (\n    pathStyleEndpoint ||\n    !isDnsCompatibleBucketName(bucketName) ||\n    (tlsCompatible && DOT_PATTERN.test(bucketName))\n  ) {\n    return {\n      bucketEndpoint: false,\n      hostname: dualstackEndpoint\n        ? `s3.dualstack.${region}.${hostnameSuffix}`\n        : baseHostname\n    };\n  }\n\n  if (accelerateEndpoint) {\n    baseHostname = `s3-accelerate${\n      dualstackEndpoint ? \".dualstack\" : \"\"\n    }.${hostnameSuffix}`;\n  } else if (dualstackEndpoint) {\n    baseHostname = `s3.dualstack.${region}.${hostnameSuffix}`;\n  }\n\n  return {\n    bucketEndpoint: true,\n    hostname: `${bucketName}.${baseHostname}`\n  };\n}\n\n/**\n * Determines whether a given string is DNS compliant per the rules outlined by\n * S3. Length, capitaization, and leading dot restrictions are enforced by the\n * DOMAIN_PATTERN regular expression.\n *\n * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html\n */\nfunction isDnsCompatibleBucketName(bucketName: string): boolean {\n  return (\n    DOMAIN_PATTERN.test(bucketName) &&\n    !IP_ADDRESS_PATTERN.test(bucketName) &&\n    !DOTS_PATTERN.test(bucketName)\n  );\n}\n\nfunction partitionSuffix(hostname: string): [string, string] {\n  const parts = hostname.match(S3_HOSTNAME_PATTERN) as RegExpMatchArray;\n\n  return [parts[2], hostname.replace(new RegExp(`^${parts[0]}`), \"\")];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}