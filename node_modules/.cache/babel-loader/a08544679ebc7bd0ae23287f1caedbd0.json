{"ast":null,"code":"import { __assign, __awaiter, __generator, __rest } from \"tslib\";\nimport { SignatureV4 } from \"@aws-sdk/signature-v4\";\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\n\nvar S3RequestPresigner =\n/** @class */\nfunction () {\n  function S3RequestPresigner(options) {\n    var resolvedOptions = __assign({\n      // Allow `signingName` because we want to support usecase of supply client's resolved config\n      // directly. Where service equals signingName.\n      service: options.signingName || options.service || \"s3\",\n      uriEscapePath: options.uriEscapePath || false\n    }, options);\n\n    this.signer = new SignatureV4(resolvedOptions);\n  }\n\n  S3RequestPresigner.prototype.presign = function (requestToSign, _a) {\n    if (_a === void 0) {\n      _a = {};\n    }\n\n    var _b = _a.unsignableHeaders,\n        unsignableHeaders = _b === void 0 ? new Set() : _b,\n        _c = _a.unhoistableHeaders,\n        unhoistableHeaders = _c === void 0 ? new Set() : _c,\n        options = __rest(_a, [\"unsignableHeaders\", \"unhoistableHeaders\"]);\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_d) {\n        unsignableHeaders.add(\"content-type\"); // S3 requires SSE headers to be signed in headers instead of query\n        // See: https://github.com/aws/aws-sdk-js-v3/issues/1576\n\n        Object.keys(requestToSign.headers).map(function (header) {\n          return header.toLowerCase();\n        }).filter(function (header) {\n          return header.startsWith(\"x-amz-server-side-encryption\");\n        }).forEach(function (header) {\n          unhoistableHeaders.add(header);\n        });\n        requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;\n\n        if (!requestToSign.headers[\"host\"]) {\n          requestToSign.headers.host = requestToSign.hostname;\n        }\n\n        return [2\n        /*return*/\n        , this.signer.presign(requestToSign, __assign({\n          expiresIn: 900,\n          unsignableHeaders: unsignableHeaders,\n          unhoistableHeaders: unhoistableHeaders\n        }, options))];\n      });\n    });\n  };\n\n  return S3RequestPresigner;\n}();\n\nexport { S3RequestPresigner };","map":{"version":3,"sources":["../../src/presigner.ts"],"names":[],"mappings":";AAAA,SAAS,WAAT,QAAoE,uBAApE;AAIA,SAAS,aAAT,EAAwB,gBAAxB,QAAgD,aAAhD;;AAcA,IAAA,kBAAA;AAAA;AAAA,YAAA;AAEE,WAAA,kBAAA,CAAY,OAAZ,EAA8C;AAC5C,QAAM,eAAe,GAAA,QAAA,CAAA;AACnB;AACA;AACA,MAAA,OAAO,EAAE,OAAO,CAAC,WAAR,IAAuB,OAAO,CAAC,OAA/B,IAA0C,IAHhC;AAInB,MAAA,aAAa,EAAE,OAAO,CAAC,aAAR,IAAyB;AAJrB,KAAA,EAKhB,OALgB,CAArB;;AAOA,SAAK,MAAL,GAAc,IAAI,WAAJ,CAAgB,eAAhB,CAAd;AACD;;AAEY,EAAA,kBAAA,CAAA,SAAA,CAAA,OAAA,GAAb,UACE,aADF,EAEE,EAFF,EAEgH;AAA9G,QAAA,EAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,EAAA,GAAA,EAAA;AAA8G;;AAA5G,QAAA,EAAA,GAAA,EAAA,CAAA,iBAAA;AAAA,QAAA,iBAAiB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAJ,EAAH,GAAY,EAA7B;AAAA,QAA+B,EAAA,GAAA,EAAA,CAAA,kBAA/B;AAAA,QAA+B,kBAAkB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAJ,EAAH,GAAY,EAA7D;AAAA,QAAkE,OAAO,GAAA,MAAA,CAAA,EAAA,EAA3E,CAAA,mBAAA,EAAA,oBAAA,CAA2E,CAAzE;;;;AAEF,QAAA,iBAAiB,CAAC,GAAlB,CAAsB,cAAtB,E,CACA;AACA;;AACA,QAAA,MAAM,CAAC,IAAP,CAAY,aAAa,CAAC,OAA1B,EACG,GADH,CACO,UAAC,MAAD,EAAO;AAAK,iBAAA,MAAM,CAAN,WAAA,EAAA;AAAoB,SADvC,EAEG,MAFH,CAEU,UAAC,MAAD,EAAO;AAAK,iBAAA,MAAM,CAAC,UAAP,CAAA,8BAAA,CAAA;AAAiD,SAFvE,EAGG,OAHH,CAGW,UAAC,MAAD,EAAO;AACd,UAAA,kBAAkB,CAAC,GAAnB,CAAuB,MAAvB;AACD,SALH;AAMA,QAAA,aAAa,CAAC,OAAd,CAAsB,aAAtB,IAAuC,gBAAvC;;AACA,YAAI,CAAC,aAAa,CAAC,OAAd,CAAsB,MAAtB,CAAL,EAAoC;AAClC,UAAA,aAAa,CAAC,OAAd,CAAsB,IAAtB,GAA6B,aAAa,CAAC,QAA3C;AACD;;AACD,eAAA,CAAA;AAAA;AAAA,UAAO,KAAK,MAAL,CAAY,OAAZ,CAAoB,aAApB,EAAiC,QAAA,CAAA;AACtC,UAAA,SAAS,EAAE,GAD2B;AAEtC,UAAA,iBAAiB,EAAA,iBAFqB;AAGtC,UAAA,kBAAkB,EAAA;AAHoB,SAAA,EAInC,OAJmC,CAAjC,CAAP,CAAA;;;AAMD,GAvBY;;AAwBf,SAAA,kBAAA;AAAC,CArCD,EAAA","sourcesContent":["import { SignatureV4, SignatureV4CryptoInit, SignatureV4Init } from \"@aws-sdk/signature-v4\";\nimport { RequestPresigner, RequestPresigningArguments } from \"@aws-sdk/types\";\nimport { HttpRequest as IHttpRequest } from \"@aws-sdk/types\";\n\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\n\n/**\n * PartialBy<T, K> makes properties specified in K optional in interface T\n * see: https://stackoverflow.com/questions/43159887/make-a-single-property-optional-in-typescript\n * */\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport type S3RequestPresignerOptions = PartialBy<\n  SignatureV4Init & SignatureV4CryptoInit,\n  \"service\" | \"uriEscapePath\"\n> & { signingName?: string };\n\nexport class S3RequestPresigner implements RequestPresigner {\n  private readonly signer: SignatureV4;\n  constructor(options: S3RequestPresignerOptions) {\n    const resolvedOptions = {\n      // Allow `signingName` because we want to support usecase of supply client's resolved config\n      // directly. Where service equals signingName.\n      service: options.signingName || options.service || \"s3\",\n      uriEscapePath: options.uriEscapePath || false,\n      ...options,\n    };\n    this.signer = new SignatureV4(resolvedOptions);\n  }\n\n  public async presign(\n    requestToSign: IHttpRequest,\n    { unsignableHeaders = new Set(), unhoistableHeaders = new Set(), ...options }: RequestPresigningArguments = {}\n  ): Promise<IHttpRequest> {\n    unsignableHeaders.add(\"content-type\");\n    // S3 requires SSE headers to be signed in headers instead of query\n    // See: https://github.com/aws/aws-sdk-js-v3/issues/1576\n    Object.keys(requestToSign.headers)\n      .map((header) => header.toLowerCase())\n      .filter((header) => header.startsWith(\"x-amz-server-side-encryption\"))\n      .forEach((header) => {\n        unhoistableHeaders.add(header);\n      });\n    requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;\n    if (!requestToSign.headers[\"host\"]) {\n      requestToSign.headers.host = requestToSign.hostname;\n    }\n    return this.signer.presign(requestToSign, {\n      expiresIn: 900,\n      unsignableHeaders,\n      unhoistableHeaders,\n      ...options,\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}