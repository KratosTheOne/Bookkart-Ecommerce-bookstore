{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nexport function userAgentMiddleware(options) {\n  return function (next) {\n    return function (args) {\n      var request = args.request;\n      if (!HttpRequest.isInstance(request)) return next(args);\n      var headers = request.headers;\n      var userAgentHeader = options.runtime === \"node\" ? \"user-agent\" : \"x-amz-user-agent\";\n\n      if (!headers[userAgentHeader]) {\n        headers[userAgentHeader] = \"\" + options.defaultUserAgent;\n      } else {\n        headers[userAgentHeader] += \" \" + options.defaultUserAgent;\n      }\n\n      if (options.customUserAgent) {\n        headers[userAgentHeader] += \" \" + options.customUserAgent;\n      }\n\n      return next(__assign(__assign({}, args), {\n        request: request\n      }));\n    };\n  };\n}\nexport var getUserAgentMiddlewareOptions = {\n  name: \"getUserAgentMiddleware\",\n  step: \"build\",\n  tags: [\"SET_USER_AGENT\", \"USER_AGENT\"]\n};\nexport var getUserAgentPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/middleware.ts"],"names":[],"mappings":";AAAA,SAAS,WAAT,QAA4B,wBAA5B;AAYA,OAAM,SAAU,mBAAV,CAA8B,OAA9B,EAA8D;AAClE,SAAO,UAAgC,IAAhC,EAA4D;AAA6B,WAAA,UAC9F,IAD8F,EAC9D;AAExB,UAAA,OAAO,GAAK,IAAI,CAAT,OAAP;AACR,UAAI,CAAC,WAAW,CAAC,UAAZ,CAAuB,OAAvB,CAAL,EAAsC,OAAO,IAAI,CAAC,IAAD,CAAX;AAC9B,UAAA,OAAO,GAAK,OAAO,CAAZ,OAAP;AACR,UAAM,eAAe,GAAG,OAAO,CAAC,OAAR,KAAoB,MAApB,GAA6B,YAA7B,GAA4C,kBAApE;;AACA,UAAI,CAAC,OAAO,CAAC,eAAD,CAAZ,EAA+B;AAC7B,QAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,KAAG,OAAO,CAAC,gBAAtC;AACD,OAFD,MAEO;AACL,QAAA,OAAO,CAAC,eAAD,CAAP,IAA4B,MAAI,OAAO,CAAC,gBAAxC;AACD;;AACD,UAAI,OAAO,CAAC,eAAZ,EAA6B;AAC3B,QAAA,OAAO,CAAC,eAAD,CAAP,IAA4B,MAAI,OAAO,CAAC,eAAxC;AACD;;AACD,aAAO,IAAI,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACN,IADM,CAAA,EACF;AACP,QAAA,OAAO,EAAA;AADA,OADE,CAAA,CAAX;AAf8F,KAAA;AAmB/F,GAnBD;AAoBD;AAED,OAAO,IAAM,6BAA6B,GAAwB;AAChE,EAAA,IAAI,EAAE,wBAD0D;AAEhE,EAAA,IAAI,EAAE,OAF0D;AAGhE,EAAA,IAAI,EAAE,CAAC,gBAAD,EAAmB,YAAnB;AAH0D,CAA3D;AAMP,OAAO,IAAM,kBAAkB,GAAG,UAAC,MAAD,EAAgC;AAA0B,SAAC;AAC3F,IAAA,YAAY,EAAE,UAAC,WAAD,EAAY;AACxB,MAAA,WAAW,CAAC,GAAZ,CAAgB,mBAAmB,CAAC,MAAD,CAAnC,EAA6C,6BAA7C;AACD;AAH0F,GAAD;AAI1F,CAJK","sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nimport { UserAgentResolvedConfig } from \"./configurations\";\n\nexport function userAgentMiddleware(options: UserAgentResolvedConfig) {\n  return <Output extends MetadataBearer>(next: BuildHandler<any, any>): BuildHandler<any, any> => (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    const { request } = args;\n    if (!HttpRequest.isInstance(request)) return next(args);\n    const { headers } = request;\n    const userAgentHeader = options.runtime === \"node\" ? \"user-agent\" : \"x-amz-user-agent\";\n    if (!headers[userAgentHeader]) {\n      headers[userAgentHeader] = `${options.defaultUserAgent}`;\n    } else {\n      headers[userAgentHeader] += ` ${options.defaultUserAgent}`;\n    }\n    if (options.customUserAgent) {\n      headers[userAgentHeader] += ` ${options.customUserAgent}`;\n    }\n    return next({\n      ...args,\n      request,\n    });\n  };\n}\n\nexport const getUserAgentMiddlewareOptions: BuildHandlerOptions = {\n  name: \"getUserAgentMiddleware\",\n  step: \"build\",\n  tags: [\"SET_USER_AGENT\", \"USER_AGENT\"],\n};\n\nexport const getUserAgentPlugin = (config: UserAgentResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}