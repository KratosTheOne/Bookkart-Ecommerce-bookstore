{"ast":null,"code":"import { __asyncGenerator, __asyncValues, __await, __generator } from \"tslib\";\nimport { EventStreamMarshaller as EventMarshaller } from \"@aws-sdk/eventstream-marshaller\";\nimport { getChunkedStream } from \"./getChunkedStream\";\nimport { getUnmarshalledStream } from \"./getUnmarshalledStream\";\n\nvar EventStreamMarshaller =\n/** @class */\nfunction () {\n  function EventStreamMarshaller(_a) {\n    var utf8Encoder = _a.utf8Encoder,\n        utf8Decoder = _a.utf8Decoder;\n    this.eventMarshaller = new EventMarshaller(utf8Encoder, utf8Decoder);\n    this.utfEncoder = utf8Encoder;\n  }\n\n  EventStreamMarshaller.prototype.deserialize = function (body, deserializer) {\n    var chunkedStream = getChunkedStream(body);\n    var unmarshalledStream = getUnmarshalledStream(chunkedStream, {\n      eventMarshaller: this.eventMarshaller,\n      deserializer: deserializer,\n      toUtf8: this.utfEncoder\n    });\n    return unmarshalledStream;\n  };\n\n  EventStreamMarshaller.prototype.serialize = function (input, serializer) {\n    var _a; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n\n    var self = this;\n\n    var serializedIterator = function serializedIterator() {\n      return __asyncGenerator(this, arguments, function () {\n        var input_1, input_1_1, chunk, payloadBuf, e_1_1;\n\n        var e_1, _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              _b.trys.push([0, 7, 8, 13]);\n\n              input_1 = __asyncValues(input);\n              _b.label = 1;\n\n            case 1:\n              return [4\n              /*yield*/\n              , __await(input_1.next())];\n\n            case 2:\n              if (!(input_1_1 = _b.sent(), !input_1_1.done)) return [3\n              /*break*/\n              , 6];\n              chunk = input_1_1.value;\n              payloadBuf = self.eventMarshaller.marshall(serializer(chunk));\n              return [4\n              /*yield*/\n              , __await(payloadBuf)];\n\n            case 3:\n              return [4\n              /*yield*/\n              , _b.sent()];\n\n            case 4:\n              _b.sent();\n\n              _b.label = 5;\n\n            case 5:\n              return [3\n              /*break*/\n              , 1];\n\n            case 6:\n              return [3\n              /*break*/\n              , 13];\n\n            case 7:\n              e_1_1 = _b.sent();\n              e_1 = {\n                error: e_1_1\n              };\n              return [3\n              /*break*/\n              , 13];\n\n            case 8:\n              _b.trys.push([8,, 11, 12]);\n\n              if (!(input_1_1 && !input_1_1.done && (_a = input_1.return))) return [3\n              /*break*/\n              , 10];\n              return [4\n              /*yield*/\n              , __await(_a.call(input_1))];\n\n            case 9:\n              _b.sent();\n\n              _b.label = 10;\n\n            case 10:\n              return [3\n              /*break*/\n              , 12];\n\n            case 11:\n              if (e_1) throw e_1.error;\n              return [7\n              /*endfinally*/\n              ];\n\n            case 12:\n              return [7\n              /*endfinally*/\n              ];\n\n            case 13:\n              return [4\n              /*yield*/\n              , __await(new Uint8Array(0))];\n\n            case 14:\n              // Ending frame\n              return [4\n              /*yield*/\n              , _b.sent()];\n\n            case 15:\n              // Ending frame\n              _b.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    return _a = {}, _a[Symbol.asyncIterator] = serializedIterator, _a;\n  };\n\n  return EventStreamMarshaller;\n}();\n\nexport { EventStreamMarshaller };","map":{"version":3,"sources":["../../src/EventStreamMarshaller.ts"],"names":[],"mappings":";AAAA,SAAS,qBAAqB,IAAI,eAAlC,QAAyD,iCAAzD;AAGA,SAAS,gBAAT,QAAiC,oBAAjC;AACA,SAAS,qBAAT,QAAsC,yBAAtC;;AASA,IAAA,qBAAA;AAAA;AAAA,YAAA;AAGE,WAAA,qBAAA,CAAY,EAAZ,EAAsE;QAAxD,WAAW,GAAA,EAAA,CAAA,W;QAAE,WAAW,GAAA,EAAA,CAAA,W;AACpC,SAAK,eAAL,GAAuB,IAAI,eAAJ,CAAoB,WAApB,EAAiC,WAAjC,CAAvB;AACA,SAAK,UAAL,GAAkB,WAAlB;AACD;;AAED,EAAA,qBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UACE,IADF,EAEE,YAFF,EAEmE;AAEjE,QAAM,aAAa,GAAG,gBAAgB,CAAC,IAAD,CAAtC;AACA,QAAM,kBAAkB,GAAG,qBAAqB,CAAC,aAAD,EAAgB;AAC9D,MAAA,eAAe,EAAE,KAAK,eADwC;AAE9D,MAAA,YAAY,EAAA,YAFkD;AAG9D,MAAA,MAAM,EAAE,KAAK;AAHiD,KAAhB,CAAhD;AAKA,WAAO,kBAAP;AACD,GAXD;;AAaA,EAAA,qBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAa,KAAb,EAAsC,UAAtC,EAAuE;WAAA,CACrE;;;AACA,QAAM,IAAI,GAAG,IAAb;;AACA,QAAM,kBAAkB,GAAG,SAArB,kBAAqB,GAAA;;;;;;;;;;;AACC,cAAA,OAAA,GAAA,aAAA,CAAA,KAAA,CAAA;;;;;;;;;;;;AAAT,cAAA,KAAK,GAAA,SAAA,CAAA,KAAL;AACT,cAAA,UAAU,GAAG,IAAI,CAAC,eAAL,CAAqB,QAArB,CAA8B,UAAU,CAAC,KAAD,CAAxC,CAAb;;;wBACA,U;;;AAAN,qBAAA,CAAA;AAAA;AAAA,gBAAA,EAAA,CAAA,IAAA,EAAA,CAAA;;;AAAA,cAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBAGI,IAAI,UAAJ,CAAe,CAAf,C;;;AADN;AACA,qBAAA,CAAA;AAAA;AAAA,gBAAA,EAAA,CAAA,IAAA,EAAA,CAAA;;;AADA;AACA,cAAA,EAAA,CAAA,IAAA;;;;;;;;AACD,KAPD;;AAQA,WAAA,EAAA,GAAA,EAAA,EACE,EAAA,CAAC,MAAM,CAAC,aAAR,CAAA,GAAwB,kBAD1B,EAEE,EAFF;AAGD,GAdD;;AAeF,SAAA,qBAAA;AAAC,CApCD,EAAA","sourcesContent":["import { EventStreamMarshaller as EventMarshaller } from \"@aws-sdk/eventstream-marshaller\";\nimport { Decoder, Encoder, EventStreamMarshaller as IEventStreamMarshaller, Message } from \"@aws-sdk/types\";\n\nimport { getChunkedStream } from \"./getChunkedStream\";\nimport { getUnmarshalledStream } from \"./getUnmarshalledStream\";\n\nexport interface EventStreamMarshaller extends IEventStreamMarshaller {}\n\nexport interface EventStreamMarshallerOptions {\n  utf8Encoder: Encoder;\n  utf8Decoder: Decoder;\n}\n\nexport class EventStreamMarshaller {\n  private readonly eventMarshaller: EventMarshaller;\n  private readonly utfEncoder: Encoder;\n  constructor({ utf8Encoder, utf8Decoder }: EventStreamMarshallerOptions) {\n    this.eventMarshaller = new EventMarshaller(utf8Encoder, utf8Decoder);\n    this.utfEncoder = utf8Encoder;\n  }\n\n  deserialize<T>(\n    body: AsyncIterable<Uint8Array>,\n    deserializer: (input: { [event: string]: Message }) => Promise<T>\n  ): AsyncIterable<T> {\n    const chunkedStream = getChunkedStream(body);\n    const unmarshalledStream = getUnmarshalledStream(chunkedStream, {\n      eventMarshaller: this.eventMarshaller,\n      deserializer,\n      toUtf8: this.utfEncoder,\n    });\n    return unmarshalledStream;\n  }\n\n  serialize<T>(input: AsyncIterable<T>, serializer: (event: T) => Message): AsyncIterable<Uint8Array> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    const serializedIterator = async function* () {\n      for await (const chunk of input) {\n        const payloadBuf = self.eventMarshaller.marshall(serializer(chunk));\n        yield payloadBuf;\n      }\n      // Ending frame\n      yield new Uint8Array(0);\n    };\n    return {\n      [Symbol.asyncIterator]: serializedIterator,\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}