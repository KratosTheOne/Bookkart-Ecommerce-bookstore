{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar is_array_buffer_1 = require(\"@aws-sdk/is-array-buffer\");\n\nvar protocol_http_1 = require(\"@aws-sdk/protocol-http\");\n\nfunction applyMd5BodyChecksumMiddleware(options) {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var request, body, headers, digest, hash, _a, _b, _c, _d, _e, _f, _g;\n\n        return tslib_1.__generator(this, function (_h) {\n          switch (_h.label) {\n            case 0:\n              request = args.request;\n              if (!protocol_http_1.HttpRequest.isInstance(request)) return [3\n              /*break*/\n              , 2];\n              body = request.body, headers = request.headers;\n              if (!!hasHeader(\"Content-MD5\", headers)) return [3\n              /*break*/\n              , 2];\n              digest = void 0;\n\n              if (body === undefined || typeof body === \"string\" || ArrayBuffer.isView(body) || is_array_buffer_1.isArrayBuffer(body)) {\n                hash = new options.md5();\n                hash.update(body || \"\");\n                digest = hash.digest();\n              } else {\n                digest = options.streamHasher(options.md5, body);\n              }\n\n              _a = [tslib_1.__assign({}, request)];\n              _b = {};\n              _c = [tslib_1.__assign({}, headers)];\n              _d = {};\n              _e = \"Content-MD5\";\n              _g = (_f = options).base64Encoder;\n              return [4\n              /*yield*/\n              , digest];\n\n            case 1:\n              request = tslib_1.__assign.apply(void 0, _a.concat([(_b.headers = tslib_1.__assign.apply(void 0, _c.concat([(_d[_e] = _g.apply(_f, [_h.sent()]), _d)])), _b)]));\n              _h.label = 2;\n\n            case 2:\n              return [2\n              /*return*/\n              , next(tslib_1.__assign(tslib_1.__assign({}, args), {\n                request: request\n              }))];\n          }\n        });\n      });\n    };\n  };\n}\n\nexports.applyMd5BodyChecksumMiddleware = applyMd5BodyChecksumMiddleware;\nexports.applyMd5BodyChecksumMiddlewareOptions = {\n  name: \"applyMd5BodyChecksumMiddleware\",\n  step: \"build\",\n  tags: [\"SET_CONTENT_MD5\", \"BODY_CHECKSUM\"]\n};\n\nexports.getApplyMd5BodyChecksumPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(applyMd5BodyChecksumMiddleware(config), exports.applyMd5BodyChecksumMiddlewareOptions);\n    }\n  };\n};\n\nfunction hasHeader(soughtHeader, headers) {\n  var e_1, _a;\n\n  soughtHeader = soughtHeader.toLowerCase();\n\n  try {\n    for (var _b = tslib_1.__values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var headerName = _c.value;\n\n      if (soughtHeader === headerName.toLowerCase()) {\n        return true;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["../src/applyMd5BodyChecksumMiddleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  MetadataBearer,\n  HeaderBag,\n  Pluggable\n} from \"@aws-sdk/types\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { Md5BodyChecksumResolvedConfig } from \"./md5Configuration\";\n\nexport function applyMd5BodyChecksumMiddleware(\n  options: Md5BodyChecksumResolvedConfig\n): BuildMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: BuildHandler<any, Output>\n  ): BuildHandler<any, Output> => async (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    let { request } = args;\n    if (HttpRequest.isInstance(request)) {\n      const { body, headers } = request;\n      if (!hasHeader(\"Content-MD5\", headers)) {\n        let digest: Promise<Uint8Array>;\n        if (\n          body === undefined ||\n          typeof body === \"string\" ||\n          ArrayBuffer.isView(body) ||\n          isArrayBuffer(body)\n        ) {\n          const hash = new options.md5();\n          hash.update(body || \"\");\n          digest = hash.digest();\n        } else {\n          digest = options.streamHasher(options.md5, body);\n        }\n\n        request = {\n          ...request,\n          headers: {\n            ...headers,\n            \"Content-MD5\": options.base64Encoder(await digest)\n          }\n        };\n      }\n    }\n    return next({\n      ...args,\n      request\n    });\n  };\n}\n\nexport const applyMd5BodyChecksumMiddlewareOptions: BuildHandlerOptions = {\n  name: \"applyMd5BodyChecksumMiddleware\",\n  step: \"build\",\n  tags: [\"SET_CONTENT_MD5\", \"BODY_CHECKSUM\"]\n};\n\nexport const getApplyMd5BodyChecksumPlugin = (\n  config: Md5BodyChecksumResolvedConfig\n): Pluggable<any, any> => ({\n  applyToStack: clientStack => {\n    clientStack.add(\n      applyMd5BodyChecksumMiddleware(config),\n      applyMd5BodyChecksumMiddlewareOptions\n    );\n  }\n});\n\nfunction hasHeader(soughtHeader: string, headers: HeaderBag): boolean {\n  soughtHeader = soughtHeader.toLowerCase();\n  for (const headerName of Object.keys(headers)) {\n    if (soughtHeader === headerName.toLowerCase()) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}