{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar protocol_http_1 = require(\"@aws-sdk/protocol-http\");\n\nfunction resolveHostHeaderConfig(input) {\n  return input;\n}\n\nexports.resolveHostHeaderConfig = resolveHostHeaderConfig;\n\nexports.hostHeaderMiddleware = function (options) {\n  return function (next) {\n    return function (args) {\n      return tslib_1.__awaiter(void 0, void 0, void 0, function () {\n        var request, _a, handlerProtocol;\n\n        return tslib_1.__generator(this, function (_b) {\n          if (!protocol_http_1.HttpRequest.isInstance(args.request)) return [2\n          /*return*/\n          , next(args)];\n          request = args.request;\n          _a = (options.requestHandler.metadata || {}).handlerProtocol, handlerProtocol = _a === void 0 ? \"\" : _a; //For H2 request, remove 'host' header and use ':authority' header instead\n          //reference: https://nodejs.org/dist/latest-v13.x/docs/api/errors.html#ERR_HTTP2_INVALID_CONNECTION_HEADERS\n\n          if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n            delete request.headers[\"host\"];\n            request.headers[\":authority\"] = \"\"; //non-H2 request and 'host' header is not set, set the 'host' header to request's hostname.\n          } else if (!request.headers[\"host\"]) {\n            request.headers[\"host\"] = request.hostname;\n          }\n\n          return [2\n          /*return*/\n          , next(args)];\n        });\n      });\n    };\n  };\n};\n\nexports.hostHeaderMiddlewareOptions = {\n  name: \"hostHeaderMiddleware\",\n  step: \"build\",\n  tags: [\"HOST\"]\n};\n\nexports.getHostHeaderPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(exports.hostHeaderMiddleware(options), exports.hostHeaderMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;AAAA,IAAA,eAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAgBA,SAAgB,uBAAhB,CACE,KADF,EACuD;AAErD,SAAO,KAAP;AACD;;AAJD,OAAA,CAAA,uBAAA,GAAA,uBAAA;;AAMa,OAAA,CAAA,oBAAA,GAAuB,UAIlC,OAJkC,EAID;AACE,SAAA,UAAA,IAAA,EAAI;AAAI,WAAA,UAAM,IAAN,EAAU;AAAA,aAAA,OAAA,CAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;AACrD,cAAI,CAAC,eAAA,CAAA,WAAA,CAAY,UAAZ,CAAuB,IAAI,CAAC,OAA5B,CAAL,EAA2C,OAAA,CAAA;AAAA;AAAA,YAAO,IAAI,CAAC,IAAD,CAAX,CAAA;AACnC,UAAA,OAAO,GAAK,IAAI,CAAT,OAAP;AACA,UAAA,EAAA,GAAyB,CAAA,OAAO,CAAC,cAAR,CAAuB,QAAvB,IAAmC,EAAnC,EAAL,eAApB,EAAA,eAAe,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAAK,EAApB,C,CACR;AACA;;AACA,cAAI,eAAe,CAAC,OAAhB,CAAwB,IAAxB,KAAiC,CAAjC,IAAsC,CAAC,OAAO,CAAC,OAAR,CAAgB,YAAhB,CAA3C,EAA0E;AACxE,mBAAO,OAAO,CAAC,OAAR,CAAgB,MAAhB,CAAP;AACA,YAAA,OAAO,CAAC,OAAR,CAAgB,YAAhB,IAAgC,EAAhC,CAFwE,CAGxE;AACD,WAJD,MAIO,IAAI,CAAC,OAAO,CAAC,OAAR,CAAgB,MAAhB,CAAL,EAA8B;AACnC,YAAA,OAAO,CAAC,OAAR,CAAgB,MAAhB,IAA0B,OAAO,CAAC,QAAlC;AACD;;AACD,iBAAA,CAAA;AAAA;AAAA,YAAO,IAAI,CAAC,IAAD,CAAX,CAAA;;OAbqD,CAAA;AAAV,KAAA;AAAR,GAAA;AAcpC,CAnBY;;AAqBA,OAAA,CAAA,2BAAA,GACQ;AACnB,EAAA,IAAI,EAAE,sBADa;AAEnB,EAAA,IAAI,EAAE,OAFa;AAGnB,EAAA,IAAI,EAAE,CAAC,MAAD;AAHa,CADR;;AAOA,OAAA,CAAA,mBAAA,GAAsB,UACjC,OADiC,EACA;AACT,SAAC;AACzB,IAAA,YAAY,EAAE,UAAA,WAAA,EAAW;AACvB,MAAA,WAAW,CAAC,GAAZ,CAAgB,OAAA,CAAA,oBAAA,CAAqB,OAArB,CAAhB,EAA+C,OAAA,CAAA,2BAA/C;AACD;AAHwB,GAAD;AAIxB,CANW","sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  RequestHandler,\n  BuildMiddleware,\n  BuildHandlerOptions,\n  AbsoluteLocation,\n  Pluggable\n} from \"@aws-sdk/types\";\n\nexport interface HostHeaderInputConfig {}\ninterface PreviouslyResolved {\n  requestHandler: RequestHandler<any, any>;\n}\nexport interface HostHeaderResolvedConfig {\n  requestHandler: RequestHandler<any, any>;\n}\nexport function resolveHostHeaderConfig<T>(\n  input: T & PreviouslyResolved & HostHeaderInputConfig\n): T & HostHeaderResolvedConfig {\n  return input;\n}\n\nexport const hostHeaderMiddleware = <\n  Input extends object,\n  Output extends object\n>(\n  options: HostHeaderResolvedConfig\n): BuildMiddleware<Input, Output> => next => async args => {\n  if (!HttpRequest.isInstance(args.request)) return next(args);\n  const { request } = args;\n  const { handlerProtocol = \"\" } = options.requestHandler.metadata || {};\n  //For H2 request, remove 'host' header and use ':authority' header instead\n  //reference: https://nodejs.org/dist/latest-v13.x/docs/api/errors.html#ERR_HTTP2_INVALID_CONNECTION_HEADERS\n  if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n    delete request.headers[\"host\"];\n    request.headers[\":authority\"] = \"\";\n    //non-H2 request and 'host' header is not set, set the 'host' header to request's hostname.\n  } else if (!request.headers[\"host\"]) {\n    request.headers[\"host\"] = request.hostname;\n  }\n  return next(args);\n};\n\nexport const hostHeaderMiddlewareOptions: BuildHandlerOptions &\n  AbsoluteLocation = {\n  name: \"hostHeaderMiddleware\",\n  step: \"build\",\n  tags: [\"HOST\"]\n};\n\nexport const getHostHeaderPlugin = (\n  options: HostHeaderResolvedConfig\n): Pluggable<any, any> => ({\n  applyToStack: clientStack => {\n    clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}