{"ast":null,"code":"import { __assign, __read, __spread, __values } from \"tslib\";\nexport var constructStack = function () {\n  var absoluteEntries = [];\n  var relativeEntries = [];\n  var entriesNameSet = new Set();\n\n  var sort = function (entries) {\n    return entries.sort(function (a, b) {\n      return stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"];\n    });\n  };\n\n  var removeByName = function (toRemove) {\n    var isRemoved = false;\n\n    var filterCb = function (entry) {\n      if (entry.name && entry.name === toRemove) {\n        isRemoved = true;\n        entriesNameSet.delete(toRemove);\n        return false;\n      }\n\n      return true;\n    };\n\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  var removeByReference = function (toRemove) {\n    var isRemoved = false;\n\n    var filterCb = function (entry) {\n      if (entry.middleware === toRemove) {\n        isRemoved = true;\n        if (entry.name) entriesNameSet.delete(entry.name);\n        return false;\n      }\n\n      return true;\n    };\n\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  var cloneTo = function (toStack) {\n    absoluteEntries.forEach(function (entry) {\n      //@ts-ignore\n      toStack.add(entry.middleware, __assign({}, entry));\n    });\n    relativeEntries.forEach(function (entry) {\n      //@ts-ignore\n      toStack.addRelativeTo(entry.middleware, __assign({}, entry));\n    });\n    return toStack;\n  };\n\n  var expandRelativeMiddlewareList = function (from) {\n    var expandedMiddlewareList = [];\n    from.before.forEach(function (entry) {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread(expandRelativeMiddlewareList(entry)));\n      }\n    });\n    expandedMiddlewareList.push(from);\n    from.after.reverse().forEach(function (entry) {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread(expandRelativeMiddlewareList(entry)));\n      }\n    });\n    return expandedMiddlewareList;\n  };\n  /**\n   * Get a final list of middleware in the order of being executed in the resolved handler.\n   */\n\n\n  var getMiddlewareList = function () {\n    var normalizedAbsoluteEntries = [];\n    var normalizedRelativeEntries = [];\n    var normalizedEntriesNameMap = {};\n    absoluteEntries.forEach(function (entry) {\n      var normalizedEntry = __assign(__assign({}, entry), {\n        before: [],\n        after: []\n      });\n\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedAbsoluteEntries.push(normalizedEntry);\n    });\n    relativeEntries.forEach(function (entry) {\n      var normalizedEntry = __assign(__assign({}, entry), {\n        before: [],\n        after: []\n      });\n\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedRelativeEntries.push(normalizedEntry);\n    });\n    normalizedRelativeEntries.forEach(function (entry) {\n      if (entry.toMiddleware) {\n        var toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n\n        if (toMiddleware === undefined) {\n          throw new Error(entry.toMiddleware + \" is not found when adding \" + (entry.name || \"anonymous\") + \" middleware \" + entry.relation + \" \" + entry.toMiddleware);\n        }\n\n        if (entry.relation === \"after\") {\n          toMiddleware.after.push(entry);\n        }\n\n        if (entry.relation === \"before\") {\n          toMiddleware.before.push(entry);\n        }\n      }\n    });\n    var mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(function (wholeList, expendedMiddlewareList) {\n      // TODO: Replace it with Array.flat();\n      wholeList.push.apply(wholeList, __spread(expendedMiddlewareList));\n      return wholeList;\n    }, []);\n    return mainChain.map(function (entry) {\n      return entry.middleware;\n    });\n  };\n\n  var stack = {\n    add: function (middleware, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var name = options.name,\n          override = options.override;\n\n      var entry = __assign({\n        step: \"initialize\",\n        priority: \"normal\",\n        middleware: middleware\n      }, options);\n\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(\"Duplicate middleware name '\" + name + \"'\");\n          var toOverrideIndex = absoluteEntries.findIndex(function (entry) {\n            return entry.name === name;\n          });\n          var toOverride = absoluteEntries[toOverrideIndex];\n\n          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n            throw new Error(\"\\\"\" + name + \"\\\" middleware with \" + toOverride.priority + \" priority in \" + toOverride.step + \" step cannot be \" + (\"overridden by same-name middleware with \" + entry.priority + \" priority in \" + entry.step + \" step.\"));\n          }\n\n          absoluteEntries.splice(toOverrideIndex, 1);\n        }\n\n        entriesNameSet.add(name);\n      }\n\n      absoluteEntries.push(entry);\n    },\n    addRelativeTo: function (middleware, options) {\n      var name = options.name,\n          override = options.override;\n\n      var entry = __assign({\n        middleware: middleware\n      }, options);\n\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(\"Duplicate middleware name '\" + name + \"'\");\n          var toOverrideIndex = relativeEntries.findIndex(function (entry) {\n            return entry.name === name;\n          });\n          var toOverride = relativeEntries[toOverrideIndex];\n\n          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n            throw new Error(\"\\\"\" + name + \"\\\" middleware \" + toOverride.relation + \" \\\"\" + toOverride.toMiddleware + \"\\\" middleware cannot be overridden \" + (\"by same-name middleware \" + entry.relation + \" \\\"\" + entry.toMiddleware + \"\\\" middleware.\"));\n          }\n\n          relativeEntries.splice(toOverrideIndex, 1);\n        }\n\n        entriesNameSet.add(name);\n      }\n\n      relativeEntries.push(entry);\n    },\n    clone: function () {\n      return cloneTo(constructStack());\n    },\n    use: function (plugin) {\n      plugin.applyToStack(stack);\n    },\n    remove: function (toRemove) {\n      if (typeof toRemove === \"string\") return removeByName(toRemove);else return removeByReference(toRemove);\n    },\n    removeByTag: function (toRemove) {\n      var isRemoved = false;\n\n      var filterCb = function (entry) {\n        var tags = entry.tags,\n            name = entry.name;\n\n        if (tags && tags.includes(toRemove)) {\n          if (name) entriesNameSet.delete(name);\n          isRemoved = true;\n          return false;\n        }\n\n        return true;\n      };\n\n      absoluteEntries = absoluteEntries.filter(filterCb);\n      relativeEntries = relativeEntries.filter(filterCb);\n      return isRemoved;\n    },\n    concat: function (from) {\n      var cloned = cloneTo(constructStack());\n      cloned.use(from);\n      return cloned;\n    },\n    applyToStack: cloneTo,\n    resolve: function (handler, context) {\n      var e_1, _a;\n\n      try {\n        for (var _b = __values(getMiddlewareList().reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var middleware = _c.value;\n          handler = middleware(handler, context);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return handler;\n    }\n  };\n  return stack;\n};\nvar stepWeights = {\n  initialize: 5,\n  serialize: 4,\n  build: 3,\n  finalizeRequest: 2,\n  deserialize: 1\n};\nvar priorityWeights = {\n  high: 3,\n  normal: 2,\n  low: 1\n};","map":{"version":3,"sources":["../../src/MiddlewareStack.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AbsoluteLocation,\n  DeserializeHandler,\n  Handler,\n  HandlerExecutionContext,\n  HandlerOptions,\n  MiddlewareStack,\n  MiddlewareType,\n  Pluggable,\n  Priority,\n  RelativeLocation,\n  Step,\n} from \"@aws-sdk/types\";\n\nimport { AbsoluteMiddlewareEntry, MiddlewareEntry, Normalized, RelativeMiddlewareEntry } from \"./types\";\n\nexport const constructStack = <Input extends object, Output extends object>(): MiddlewareStack<Input, Output> => {\n  let absoluteEntries: AbsoluteMiddlewareEntry<Input, Output>[] = [];\n  let relativeEntries: RelativeMiddlewareEntry<Input, Output>[] = [];\n  const entriesNameSet: Set<string> = new Set();\n\n  const sort = <T extends AbsoluteMiddlewareEntry<Input, Output>>(entries: T[]): T[] =>\n    entries.sort(\n      (a, b) =>\n        stepWeights[b.step] - stepWeights[a.step] ||\n        priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]\n    );\n\n  const removeByName = (toRemove: string): boolean => {\n    let isRemoved = false;\n    const filterCb = (entry: MiddlewareEntry<Input, Output>): boolean => {\n      if (entry.name && entry.name === toRemove) {\n        isRemoved = true;\n        entriesNameSet.delete(toRemove);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  const removeByReference = (toRemove: MiddlewareType<Input, Output>): boolean => {\n    let isRemoved = false;\n    const filterCb = (entry: MiddlewareEntry<Input, Output>): boolean => {\n      if (entry.middleware === toRemove) {\n        isRemoved = true;\n        if (entry.name) entriesNameSet.delete(entry.name);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  const cloneTo = <InputType extends Input, OutputType extends Output>(\n    toStack: MiddlewareStack<InputType, OutputType>\n  ): MiddlewareStack<InputType, OutputType> => {\n    absoluteEntries.forEach((entry) => {\n      //@ts-ignore\n      toStack.add(entry.middleware, { ...entry });\n    });\n    relativeEntries.forEach((entry) => {\n      //@ts-ignore\n      toStack.addRelativeTo(entry.middleware, { ...entry });\n    });\n    return toStack;\n  };\n\n  const expandRelativeMiddlewareList = (\n    from: Normalized<MiddlewareEntry<Input, Output>, Input, Output>\n  ): MiddlewareEntry<Input, Output>[] => {\n    const expandedMiddlewareList: MiddlewareEntry<Input, Output>[] = [];\n    from.before.forEach((entry) => {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n      }\n    });\n    expandedMiddlewareList.push(from);\n    from.after.reverse().forEach((entry) => {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n      }\n    });\n    return expandedMiddlewareList;\n  };\n\n  /**\n   * Get a final list of middleware in the order of being executed in the resolved handler.\n   */\n  const getMiddlewareList = (): Array<MiddlewareType<Input, Output>> => {\n    const normalizedAbsoluteEntries: Normalized<AbsoluteMiddlewareEntry<Input, Output>, Input, Output>[] = [];\n    const normalizedRelativeEntries: Normalized<RelativeMiddlewareEntry<Input, Output>, Input, Output>[] = [];\n    const normalizedEntriesNameMap: {\n      [middlewareName: string]: Normalized<MiddlewareEntry<Input, Output>, Input, Output>;\n    } = {};\n\n    absoluteEntries.forEach((entry) => {\n      const normalizedEntry = {\n        ...entry,\n        before: [],\n        after: [],\n      };\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedAbsoluteEntries.push(normalizedEntry);\n    });\n\n    relativeEntries.forEach((entry) => {\n      const normalizedEntry = {\n        ...entry,\n        before: [],\n        after: [],\n      };\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedRelativeEntries.push(normalizedEntry);\n    });\n\n    normalizedRelativeEntries.forEach((entry) => {\n      if (entry.toMiddleware) {\n        const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n        if (toMiddleware === undefined) {\n          throw new Error(\n            `${entry.toMiddleware} is not found when adding ${entry.name || \"anonymous\"} middleware ${entry.relation} ${\n              entry.toMiddleware\n            }`\n          );\n        }\n        if (entry.relation === \"after\") {\n          toMiddleware.after.push(entry);\n        }\n        if (entry.relation === \"before\") {\n          toMiddleware.before.push(entry);\n        }\n      }\n    });\n\n    const mainChain = sort(normalizedAbsoluteEntries)\n      .map(expandRelativeMiddlewareList)\n      .reduce((wholeList, expendedMiddlewareList) => {\n        // TODO: Replace it with Array.flat();\n        wholeList.push(...expendedMiddlewareList);\n        return wholeList;\n      }, [] as MiddlewareEntry<Input, Output>[]);\n    return mainChain.map((entry) => entry.middleware);\n  };\n\n  const stack = {\n    add: (middleware: MiddlewareType<Input, Output>, options: HandlerOptions & AbsoluteLocation = {}) => {\n      const { name, override } = options;\n      const entry: AbsoluteMiddlewareEntry<Input, Output> = {\n        step: \"initialize\",\n        priority: \"normal\",\n        middleware,\n        ...options,\n      };\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(`Duplicate middleware name '${name}'`);\n          const toOverrideIndex = absoluteEntries.findIndex((entry) => entry.name === name);\n          const toOverride = absoluteEntries[toOverrideIndex];\n          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n            throw new Error(\n              `\"${name}\" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` +\n                `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`\n            );\n          }\n          absoluteEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      absoluteEntries.push(entry);\n    },\n\n    addRelativeTo: (middleware: MiddlewareType<Input, Output>, options: HandlerOptions & RelativeLocation) => {\n      const { name, override } = options;\n      const entry: RelativeMiddlewareEntry<Input, Output> = {\n        middleware,\n        ...options,\n      };\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(`Duplicate middleware name '${name}'`);\n          const toOverrideIndex = relativeEntries.findIndex((entry) => entry.name === name);\n          const toOverride = relativeEntries[toOverrideIndex];\n          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n            throw new Error(\n              `\"${name}\" middleware ${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden ` +\n                `by same-name middleware ${entry.relation} \"${entry.toMiddleware}\" middleware.`\n            );\n          }\n          relativeEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      relativeEntries.push(entry);\n    },\n\n    clone: () => cloneTo(constructStack<Input, Output>()),\n\n    use: (plugin: Pluggable<Input, Output>) => {\n      plugin.applyToStack(stack);\n    },\n\n    remove: (toRemove: MiddlewareType<Input, Output> | string): boolean => {\n      if (typeof toRemove === \"string\") return removeByName(toRemove);\n      else return removeByReference(toRemove);\n    },\n\n    removeByTag: (toRemove: string): boolean => {\n      let isRemoved = false;\n      const filterCb = (entry: MiddlewareEntry<Input, Output>): boolean => {\n        const { tags, name } = entry;\n        if (tags && tags.includes(toRemove)) {\n          if (name) entriesNameSet.delete(name);\n          isRemoved = true;\n          return false;\n        }\n        return true;\n      };\n      absoluteEntries = absoluteEntries.filter(filterCb);\n      relativeEntries = relativeEntries.filter(filterCb);\n      return isRemoved;\n    },\n\n    concat: <InputType extends Input, OutputType extends Output>(\n      from: MiddlewareStack<InputType, OutputType>\n    ): MiddlewareStack<InputType, OutputType> => {\n      const cloned = cloneTo(constructStack<InputType, OutputType>());\n      cloned.use(from);\n      return cloned;\n    },\n\n    applyToStack: cloneTo,\n\n    resolve: <InputType extends Input, OutputType extends Output>(\n      handler: DeserializeHandler<InputType, OutputType>,\n      context: HandlerExecutionContext\n    ): Handler<InputType, OutputType> => {\n      for (const middleware of getMiddlewareList().reverse()) {\n        handler = middleware(handler as Handler<Input, OutputType>, context) as any;\n      }\n      return handler as Handler<InputType, OutputType>;\n    },\n  };\n  return stack;\n};\n\nconst stepWeights: { [key in Step]: number } = {\n  initialize: 5,\n  serialize: 4,\n  build: 3,\n  finalizeRequest: 2,\n  deserialize: 1,\n};\n\nconst priorityWeights: { [key in Priority]: number } = {\n  high: 3,\n  normal: 2,\n  low: 1,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}