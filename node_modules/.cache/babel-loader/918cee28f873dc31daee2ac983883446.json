{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetRecordsInput, GetRecordsOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetRecordsCommand, serializeAws_json1_1GetRecordsCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets data records from a Kinesis data stream's shard.</p>\n *         <p>Specify a shard iterator using the <code>ShardIterator</code> parameter. The shard\n *             iterator specifies the position in the shard from which you want to start reading data\n *             records sequentially. If there are no records available in the portion of the shard that\n *             the iterator points to, <a>GetRecords</a> returns an empty list. It might\n *             take multiple calls to get to a portion of the shard that contains records.</p>\n *         <p>You can scale by provisioning multiple shards per stream while considering service\n *             limits (for more information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Amazon Kinesis Data Streams\n *                 Limits</a> in the <i>Amazon Kinesis Data Streams Developer\n *                 Guide</i>). Your application should have one thread per shard, each reading\n *             continuously from its stream. To read from a stream continually, call <a>GetRecords</a> in a loop. Use <a>GetShardIterator</a> to get the\n *             shard iterator to specify in the first <a>GetRecords</a> call. <a>GetRecords</a> returns a new shard iterator in\n *                 <code>NextShardIterator</code>. Specify the shard iterator returned in\n *                 <code>NextShardIterator</code> in subsequent calls to <a>GetRecords</a>.\n *             If the shard has been closed, the shard iterator can't return more data and <a>GetRecords</a> returns <code>null</code> in <code>NextShardIterator</code>.\n *             You can terminate the loop when the shard is closed, or when the shard iterator reaches\n *             the record with the sequence number or other attribute that marks it as the last record\n *             to process.</p>\n *         <p>Each data record can be up to 1 MiB in size, and each shard can read up to 2 MiB\n *             per second. You can ensure that your calls don't exceed the maximum supported size or\n *             throughput by using the <code>Limit</code> parameter to specify the maximum number of\n *             records that <a>GetRecords</a> can return. Consider your average record size\n *             when determining this limit. The maximum number of records that can be returned per call\n *             is 10,000.</p>\n *\n *         <p>The size of the data returned by <a>GetRecords</a> varies depending on\n *             the utilization of the shard. The maximum size of data that <a>GetRecords</a>\n *             can return is 10 MiB. If a call returns this amount of data, subsequent calls made\n *             within the next 5 seconds throw <code>ProvisionedThroughputExceededException</code>. If\n *             there is insufficient provisioned throughput on the stream, subsequent calls made within\n *             the next 1 second throw <code>ProvisionedThroughputExceededException</code>. <a>GetRecords</a> doesn't return any data when it throws an exception. For this\n *             reason, we recommend that you wait 1 second between calls to <a>GetRecords</a>. However, it's possible that the application will get exceptions for longer than 1\n *             second.</p>\n *         <p>To detect whether the application is falling behind in processing, you can use the\n *                 <code>MillisBehindLatest</code> response attribute. You can also monitor the stream\n *             using CloudWatch metrics and other mechanisms (see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/monitoring.html\">Monitoring</a> in the <i>Amazon\n *                 Kinesis Data Streams Developer Guide</i>).</p>\n *         <p>Each Amazon Kinesis record includes a value,\n *                 <code>ApproximateArrivalTimestamp</code>, that is set when a stream successfully\n *             receives and stores a record. This is commonly referred to as a server-side time stamp,\n *             whereas a client-side time stamp is set when a data producer creates or sends the record\n *             to a stream (a data producer is any data source putting data records into a stream, for\n *             example with <a>PutRecords</a>). The time stamp has millisecond precision.\n *             There are no guarantees about the time stamp accuracy, or that the time stamp is always\n *             increasing. For example, records in a shard or across a stream might have time stamps\n *             that are out of order.</p>\n *         <p>This operation has a limit of five transactions per second per shard.</p>\n */\n\nvar GetRecordsCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetRecordsCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetRecordsCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetRecordsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"GetRecordsCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetRecordsInput.filterSensitiveLog,\n      outputFilterSensitiveLog: GetRecordsOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetRecordsCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetRecordsCommand(input, context);\n  };\n\n  GetRecordsCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetRecordsCommand(output, context);\n  };\n\n  return GetRecordsCommand;\n}($Command);\n\nexport { GetRecordsCommand };","map":{"version":3,"sources":["../../../commands/GetRecordsCommand.ts"],"names":[],"mappings":";AACA,SAAS,eAAT,EAA0B,gBAA1B,QAAkD,oBAAlD;AACA,SACE,uCADF,EAEE,qCAFF,QAGO,0BAHP;AAIA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDG;;AACH,IAAA,iBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA,CAAvC,CAKE;AACA;;;AAEA,WAAA,iBAAA,CAAqB,KAArB,EAAkD;AAAlD,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAA6B,CAGhD;AACD;AAED;;AAEG;;;AACH,EAAA,iBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,eAAnB;AACA,QAAM,WAAW,GAAG,mBAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,eAAe,CAAC,kBAJc;AAKvD,MAAA,wBAAwB,EAAE,gBAAgB,CAAC;AALY,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GAzBD;;AA2BQ,EAAA,iBAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAAiD,OAAjD,EAAwE;AACtE,WAAO,qCAAqC,CAAC,KAAD,EAAQ,OAAR,CAA5C;AACD,GAFO;;AAIA,EAAA,iBAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,uCAAuC,CAAC,MAAD,EAAS,OAAT,CAA9C;AACD,GAFO;;AAMV,SAAA,iBAAA;AAAC,CAtDD,CAAuC,QAAvC,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { GetRecordsInput, GetRecordsOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetRecordsCommand, serializeAws_json1_1GetRecordsCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets data records from a Kinesis data stream's shard.</p>\n *         <p>Specify a shard iterator using the <code>ShardIterator</code> parameter. The shard\n *             iterator specifies the position in the shard from which you want to start reading data\n *             records sequentially. If there are no records available in the portion of the shard that\n *             the iterator points to, <a>GetRecords</a> returns an empty list. It might\n *             take multiple calls to get to a portion of the shard that contains records.</p>\n *         <p>You can scale by provisioning multiple shards per stream while considering service\n *             limits (for more information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Amazon Kinesis Data Streams\n *                 Limits</a> in the <i>Amazon Kinesis Data Streams Developer\n *                 Guide</i>). Your application should have one thread per shard, each reading\n *             continuously from its stream. To read from a stream continually, call <a>GetRecords</a> in a loop. Use <a>GetShardIterator</a> to get the\n *             shard iterator to specify in the first <a>GetRecords</a> call. <a>GetRecords</a> returns a new shard iterator in\n *                 <code>NextShardIterator</code>. Specify the shard iterator returned in\n *                 <code>NextShardIterator</code> in subsequent calls to <a>GetRecords</a>.\n *             If the shard has been closed, the shard iterator can't return more data and <a>GetRecords</a> returns <code>null</code> in <code>NextShardIterator</code>.\n *             You can terminate the loop when the shard is closed, or when the shard iterator reaches\n *             the record with the sequence number or other attribute that marks it as the last record\n *             to process.</p>\n *         <p>Each data record can be up to 1 MiB in size, and each shard can read up to 2 MiB\n *             per second. You can ensure that your calls don't exceed the maximum supported size or\n *             throughput by using the <code>Limit</code> parameter to specify the maximum number of\n *             records that <a>GetRecords</a> can return. Consider your average record size\n *             when determining this limit. The maximum number of records that can be returned per call\n *             is 10,000.</p>\n *\n *         <p>The size of the data returned by <a>GetRecords</a> varies depending on\n *             the utilization of the shard. The maximum size of data that <a>GetRecords</a>\n *             can return is 10 MiB. If a call returns this amount of data, subsequent calls made\n *             within the next 5 seconds throw <code>ProvisionedThroughputExceededException</code>. If\n *             there is insufficient provisioned throughput on the stream, subsequent calls made within\n *             the next 1 second throw <code>ProvisionedThroughputExceededException</code>. <a>GetRecords</a> doesn't return any data when it throws an exception. For this\n *             reason, we recommend that you wait 1 second between calls to <a>GetRecords</a>. However, it's possible that the application will get exceptions for longer than 1\n *             second.</p>\n *         <p>To detect whether the application is falling behind in processing, you can use the\n *                 <code>MillisBehindLatest</code> response attribute. You can also monitor the stream\n *             using CloudWatch metrics and other mechanisms (see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/monitoring.html\">Monitoring</a> in the <i>Amazon\n *                 Kinesis Data Streams Developer Guide</i>).</p>\n *         <p>Each Amazon Kinesis record includes a value,\n *                 <code>ApproximateArrivalTimestamp</code>, that is set when a stream successfully\n *             receives and stores a record. This is commonly referred to as a server-side time stamp,\n *             whereas a client-side time stamp is set when a data producer creates or sends the record\n *             to a stream (a data producer is any data source putting data records into a stream, for\n *             example with <a>PutRecords</a>). The time stamp has millisecond precision.\n *             There are no guarantees about the time stamp accuracy, or that the time stamp is always\n *             increasing. For example, records in a shard or across a stream might have time stamps\n *             that are out of order.</p>\n *         <p>This operation has a limit of five transactions per second per shard.</p>\n */\nvar GetRecordsCommand = /** @class */ (function (_super) {\n    __extends(GetRecordsCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function GetRecordsCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    GetRecordsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"KinesisClient\";\n        var commandName = \"GetRecordsCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: GetRecordsInput.filterSensitiveLog,\n            outputFilterSensitiveLog: GetRecordsOutput.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    GetRecordsCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1GetRecordsCommand(input, context);\n    };\n    GetRecordsCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1GetRecordsCommand(output, context);\n    };\n    return GetRecordsCommand;\n}($Command));\nexport { GetRecordsCommand };\n//# sourceMappingURL=GetRecordsCommand.js.map"]},"metadata":{},"sourceType":"module"}