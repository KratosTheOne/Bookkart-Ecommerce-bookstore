{"ast":null,"code":"'use strict';\n\nconst nodeToJson = require('./node2json');\n\nconst xmlToNodeobj = require('./xmlstr2xmlnode');\n\nconst x2xmlnode = require('./xmlstr2xmlnode');\n\nconst buildOptions = require('./util').buildOptions;\n\nconst validator = require('./validator');\n\nexports.parse = function (xmlData, options, validationOption) {\n  if (validationOption) {\n    if (validationOption === true) validationOption = {};\n    const result = validator.validate(xmlData, validationOption);\n\n    if (result !== true) {\n      throw Error(result.err.msg);\n    }\n  }\n\n  options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);\n  const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options); //print(traversableObj, \"  \");\n\n  return nodeToJson.convertToJson(traversableObj, options);\n};\n\nexports.convertTonimn = require('../src/nimndata').convert2nimn;\nexports.getTraversalObj = xmlToNodeobj.getTraversalObj;\nexports.convertToJson = nodeToJson.convertToJson;\nexports.convertToJsonString = require('./node2json_str').convertToJsonString;\nexports.validate = validator.validate;\nexports.j2xParser = require('./json2xml');\n\nexports.parseToNimn = function (xmlData, schema, options) {\n  return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);\n};\n\nfunction print(xmlNode, indentation) {\n  if (xmlNode) {\n    console.log(indentation + \"{\");\n    console.log(indentation + \"  \\\"tagName\\\": \\\"\" + xmlNode.tagname + \"\\\", \");\n\n    if (xmlNode.parent) {\n      console.log(indentation + \"  \\\"parent\\\": \\\"\" + xmlNode.parent.tagname + \"\\\", \");\n    }\n\n    console.log(indentation + \"  \\\"val\\\": \\\"\" + xmlNode.val + \"\\\", \");\n    console.log(indentation + \"  \\\"attrs\\\": \" + JSON.stringify(xmlNode.attrsMap, null, 4) + \", \");\n\n    if (xmlNode.child) {\n      console.log(indentation + \"\\\"child\\\": {\");\n      const indentation2 = indentation + indentation;\n      Object.keys(xmlNode.child).forEach(function (key) {\n        const node = xmlNode.child[key];\n\n        if (Array.isArray(node)) {\n          console.log(indentation + \"\\\"\" + key + \"\\\" :[\");\n          node.forEach(function (item, index) {\n            //console.log(indentation + \" \\\"\"+index+\"\\\" : [\")\n            print(item, indentation2);\n          });\n          console.log(indentation + \"],\");\n        } else {\n          console.log(indentation + \" \\\"\" + key + \"\\\" : {\");\n          print(node, indentation2);\n          console.log(indentation + \"},\");\n        }\n      });\n      console.log(indentation + \"},\");\n    }\n\n    console.log(indentation + \"},\");\n  }\n}","map":{"version":3,"sources":["C:/Users/Kaustubh Sinha/Desktop/bookkart/node_modules/fast-xml-parser/src/parser.js"],"names":["nodeToJson","require","xmlToNodeobj","x2xmlnode","buildOptions","validator","exports","parse","xmlData","options","validationOption","result","validate","Error","err","msg","defaultOptions","props","traversableObj","getTraversalObj","convertToJson","convertTonimn","convert2nimn","convertToJsonString","j2xParser","parseToNimn","schema","print","xmlNode","indentation","console","log","tagname","parent","val","JSON","stringify","attrsMap","child","indentation2","Object","keys","forEach","key","node","Array","isArray","item","index"],"mappings":"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","sourcesContent":["'use strict';\n\nconst nodeToJson = require('./node2json');\nconst xmlToNodeobj = require('./xmlstr2xmlnode');\nconst x2xmlnode = require('./xmlstr2xmlnode');\nconst buildOptions = require('./util').buildOptions;\nconst validator = require('./validator');\n\nexports.parse = function(xmlData, options, validationOption) {\n  if( validationOption){\n    if(validationOption === true) validationOption = {}\n    \n    const result = validator.validate(xmlData, validationOption);\n    if (result !== true) {\n      throw Error( result.err.msg)\n    }\n  }\n  options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);\n  const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options)\n  //print(traversableObj, \"  \");\n  return nodeToJson.convertToJson(traversableObj, options);\n};\nexports.convertTonimn = require('../src/nimndata').convert2nimn;\nexports.getTraversalObj = xmlToNodeobj.getTraversalObj;\nexports.convertToJson = nodeToJson.convertToJson;\nexports.convertToJsonString = require('./node2json_str').convertToJsonString;\nexports.validate = validator.validate;\nexports.j2xParser = require('./json2xml');\nexports.parseToNimn = function(xmlData, schema, options) {\n  return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);\n};\n\n\nfunction print(xmlNode, indentation){\n  if(xmlNode){\n    console.log(indentation + \"{\")\n    console.log(indentation + \"  \\\"tagName\\\": \\\"\" + xmlNode.tagname + \"\\\", \");\n    if(xmlNode.parent){\n      console.log(indentation + \"  \\\"parent\\\": \\\"\" + xmlNode.parent.tagname  + \"\\\", \");\n    }\n    console.log(indentation + \"  \\\"val\\\": \\\"\" + xmlNode.val  + \"\\\", \");\n    console.log(indentation + \"  \\\"attrs\\\": \" + JSON.stringify(xmlNode.attrsMap,null,4)  + \", \");\n\n    if(xmlNode.child){\n      console.log(indentation + \"\\\"child\\\": {\")\n      const indentation2 = indentation + indentation;\n      Object.keys(xmlNode.child).forEach( function(key) {\n        const node = xmlNode.child[key];\n\n        if(Array.isArray(node)){\n          console.log(indentation +  \"\\\"\"+key+\"\\\" :[\")\n          node.forEach( function(item,index) {\n            //console.log(indentation + \" \\\"\"+index+\"\\\" : [\")\n            print(item, indentation2);\n          })\n          console.log(indentation + \"],\")  \n        }else{\n          console.log(indentation + \" \\\"\"+key+\"\\\" : {\")\n          print(node, indentation2);\n          console.log(indentation + \"},\")  \n        }\n      });\n      console.log(indentation + \"},\")\n    }\n    console.log(indentation + \"},\")\n  }\n}"]},"metadata":{},"sourceType":"script"}