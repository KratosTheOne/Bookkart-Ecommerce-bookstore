{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar constants_1 = require(\"./constants\");\n\nvar delayDecider_1 = require(\"./delayDecider\");\n\nvar retryDecider_1 = require(\"./retryDecider\");\n\nvar service_error_classification_1 = require(\"@aws-sdk/service-error-classification\");\n\nvar ExponentialBackOffStrategy =\n/** @class */\nfunction () {\n  function ExponentialBackOffStrategy(maxRetries, retryDecider, delayDecider) {\n    if (retryDecider === void 0) {\n      retryDecider = retryDecider_1.defaultRetryDecider;\n    }\n\n    if (delayDecider === void 0) {\n      delayDecider = delayDecider_1.defaultDelayDecider;\n    }\n\n    this.maxRetries = maxRetries;\n    this.retryDecider = retryDecider;\n    this.delayDecider = delayDecider;\n  }\n\n  ExponentialBackOffStrategy.prototype.shouldRetry = function (error, retryAttempted) {\n    return retryAttempted < this.maxRetries && this.retryDecider(error);\n  };\n\n  ExponentialBackOffStrategy.prototype.retry = function (next, args) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var retries, totalDelay, _loop_1, this_1, state_1;\n\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            retries = 0;\n            totalDelay = 0;\n\n            _loop_1 = function () {\n              var _a, response, output, err_1, delay_1;\n\n              return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    _b.trys.push([0, 2,, 5]);\n\n                    return [4\n                    /*yield*/\n                    , next(args)];\n\n                  case 1:\n                    _a = _b.sent(), response = _a.response, output = _a.output;\n                    output.$metadata.retries = retries;\n                    output.$metadata.totalRetryDelay = totalDelay;\n                    return [2\n                    /*return*/\n                    , {\n                      value: {\n                        response: response,\n                        output: output\n                      }\n                    }];\n\n                  case 2:\n                    err_1 = _b.sent();\n                    if (!this_1.shouldRetry(err_1, retries)) return [3\n                    /*break*/\n                    , 4];\n                    delay_1 = this_1.delayDecider(service_error_classification_1.isThrottlingError(err_1) ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE, retries++);\n                    totalDelay += delay_1;\n                    return [4\n                    /*yield*/\n                    , new Promise(function (resolve) {\n                      return setTimeout(resolve, delay_1);\n                    })];\n\n                  case 3:\n                    _b.sent();\n\n                    return [2\n                    /*return*/\n                    , \"continue\"];\n\n                  case 4:\n                    if (!err_1.$metadata) {\n                      err_1.$metadata = {};\n                    }\n\n                    err_1.$metadata.retries = retries;\n                    err_1.$metadata.totalRetryDelay = totalDelay;\n                    throw err_1;\n\n                  case 5:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_1 = this;\n            _a.label = 1;\n\n          case 1:\n            if (!true) return [3\n            /*break*/\n            , 3];\n            return [5\n            /*yield**/\n            , _loop_1()];\n\n          case 2:\n            state_1 = _a.sent();\n            if (typeof state_1 === \"object\") return [2\n            /*return*/\n            , state_1.value];\n            return [3\n            /*break*/\n            , 1];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return ExponentialBackOffStrategy;\n}();\n\nexports.ExponentialBackOffStrategy = ExponentialBackOffStrategy;","map":{"version":3,"sources":["../src/defaultStrategy.ts"],"names":[],"mappings":";;;;;;;;AAAA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAIA,IAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,8BAAA,GAAA,OAAA,CAAA,uCAAA,CAAA;;AA6BA,IAAA,0BAAA;AAAA;AAAA,YAAA;AACE,WAAA,0BAAA,CACkB,UADlB,EAEU,YAFV,EAGU,YAHV,EAG0D;AADhD,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAA6B,cAAA,CAAA,mBAA7B;AAAgD;;AAChD,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAA6B,cAAA,CAAA,mBAA7B;AAAgD;;AAFxC,SAAA,UAAA,GAAA,UAAA;AACR,SAAA,YAAA,GAAA,YAAA;AACA,SAAA,YAAA,GAAA,YAAA;AACN;;AACI,EAAA,0BAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,KAApB,EAAqC,cAArC,EAA2D;AACzD,WAAO,cAAc,GAAG,KAAK,UAAtB,IAAoC,KAAK,YAAL,CAAkB,KAAlB,CAA3C;AACD,GAFO;;AAIF,EAAA,0BAAA,CAAA,SAAA,CAAA,KAAA,GAAN,UACE,IADF,EAEE,IAFF,EAEuC;;;;;;;AAEjC,YAAA,OAAO,GAAG,CAAV;AACA,YAAA,UAAU,GAAG,CAAb;;;;;;;;;;AAG6B,2BAAA,CAAA;AAAA;AAAA,sBAAM,IAAI,CAAC,IAAD,CAAV,CAAA;;;AAAvB,oBAAA,EAAA,GAAuB,EAAA,CAAA,IAAA,EAAvB,EAAE,QAAQ,GAAA,EAAA,CAAA,QAAV,EAAY,MAAM,GAAA,EAAA,CAAA,MAAlB;AACN,oBAAA,MAAM,CAAC,SAAP,CAAiB,OAAjB,GAA2B,OAA3B;AACA,oBAAA,MAAM,CAAC,SAAP,CAAiB,eAAjB,GAAmC,UAAnC;;;;6BAEO;AAAE,wBAAA,QAAQ,EAAA,QAAV;AAAY,wBAAA,MAAM,EAAA;AAAlB;;;;;yBAEH,MAAA,CAAK,WAAL,CAAiB,KAAjB,EAAkC,OAAlC,C,EAAA,OAAA,CAAA;AAAA;AAAA,sBAAA,CAAA,CAAA;AACI,oBAAA,OAAA,GAAQ,MAAA,CAAK,YAAL,CACZ,8BAAA,CAAA,iBAAA,CAAkB,KAAlB,IACI,WAAA,CAAA,2BADJ,GAEI,WAAA,CAAA,wBAHQ,EAIZ,OAAO,EAJK,CAAR;AAMN,oBAAA,UAAU,IAAI,OAAd;AAEA,2BAAA,CAAA;AAAA;AAAA,sBAAM,IAAI,OAAJ,CAAY,UAAA,OAAA,EAAO;AAAI,6BAAA,UAAU,CAAC,OAAD,EAAV,OAAU,CAAV;AAA0B,qBAAjD,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;AAIF,wBAAI,CAAC,KAAG,CAAC,SAAT,EAAoB;AAClB,sBAAA,KAAG,CAAC,SAAJ,GAAgB,EAAhB;AACD;;AAED,oBAAA,KAAG,CAAC,SAAJ,CAAc,OAAd,GAAwB,OAAxB;AACA,oBAAA,KAAG,CAAC,SAAJ,CAAc,eAAd,GAAgC,UAAhC;AACA,0BAAM,KAAN;;;;;;;;;;;;;;iBA3BG,I,EAAI,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;AA8BZ,GApCK;;AAqCR,SAAA,0BAAA;AAAC,CA/CD,EAAA;;AAAa,OAAA,CAAA,0BAAA,GAAA,0BAAA","sourcesContent":["import {\n  DEFAULT_RETRY_DELAY_BASE,\n  THROTTLING_RETRY_DELAY_BASE\n} from \"./constants\";\nimport { defaultDelayDecider } from \"./delayDecider\";\nimport { defaultRetryDecider } from \"./retryDecider\";\nimport { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nimport {\n  SdkError,\n  FinalizeHandler,\n  MetadataBearer,\n  FinalizeHandlerArguments,\n  RetryStrategy\n} from \"@aws-sdk/types\";\n\n/**\n * Determines whether an error is retryable based on the number of retries\n * already attempted, the HTTP status code, and the error received (if any).\n *\n * @param error         The error encountered.\n */\nexport interface RetryDecider {\n  (error: SdkError): boolean;\n}\n\n/**\n * Determines the number of milliseconds to wait before retrying an action.\n *\n * @param delayBase The base delay (in milliseconds).\n * @param attempts  The number of times the action has already been tried.\n */\nexport interface DelayDecider {\n  (delayBase: number, attempts: number): number;\n}\n\nexport class ExponentialBackOffStrategy implements RetryStrategy {\n  constructor(\n    public readonly maxRetries: number,\n    private retryDecider: RetryDecider = defaultRetryDecider,\n    private delayDecider: DelayDecider = defaultDelayDecider\n  ) {}\n  private shouldRetry(error: SdkError, retryAttempted: number) {\n    return retryAttempted < this.maxRetries && this.retryDecider(error);\n  }\n\n  async retry<Input extends object, Ouput extends MetadataBearer>(\n    next: FinalizeHandler<Input, Ouput>,\n    args: FinalizeHandlerArguments<Input>\n  ) {\n    let retries = 0;\n    let totalDelay = 0;\n    while (true) {\n      try {\n        const { response, output } = await next(args);\n        output.$metadata.retries = retries;\n        output.$metadata.totalRetryDelay = totalDelay;\n\n        return { response, output };\n      } catch (err) {\n        if (this.shouldRetry(err as SdkError, retries)) {\n          const delay = this.delayDecider(\n            isThrottlingError(err)\n              ? THROTTLING_RETRY_DELAY_BASE\n              : DEFAULT_RETRY_DELAY_BASE,\n            retries++\n          );\n          totalDelay += delay;\n\n          await new Promise(resolve => setTimeout(resolve, delay));\n          continue;\n        }\n\n        if (!err.$metadata) {\n          err.$metadata = {};\n        }\n\n        err.$metadata.retries = retries;\n        err.$metadata.totalRetryDelay = totalDelay;\n        throw err;\n      }\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}