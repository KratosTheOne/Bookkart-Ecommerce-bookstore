{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nfunction parseQueryString(querystring) {\n  var e_1, _a;\n\n  var query = {};\n  querystring = querystring.replace(/^\\?/, \"\");\n\n  if (querystring) {\n    try {\n      for (var _b = tslib_1.__values(querystring.split(\"&\")), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var pair = _c.value;\n\n        var _d = tslib_1.__read(pair.split(\"=\"), 2),\n            key = _d[0],\n            _e = _d[1],\n            value = _e === void 0 ? null : _e;\n\n        key = decodeURIComponent(key);\n\n        if (value) {\n          value = decodeURIComponent(value);\n        }\n\n        if (!(key in query)) {\n          query[key] = value;\n        } else if (Array.isArray(query[key])) {\n          query[key].push(value);\n        } else {\n          query[key] = [query[key], value];\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  }\n\n  return query;\n}\n\nexports.parseQueryString = parseQueryString;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;AAEA,SAAgB,gBAAhB,CAAiC,WAAjC,EAAoD;;;AAClD,MAAM,KAAK,GAAsB,EAAjC;AACA,EAAA,WAAW,GAAG,WAAW,CAAC,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CAAd;;AAEA,MAAI,WAAJ,EAAiB;;AACf,WAAmB,IAAA,EAAA,GAAA,OAAA,CAAA,QAAA,CAAA,WAAW,CAAC,KAAZ,CAAkB,GAAlB,CAAA,CAAA,EAAsB,EAAA,GAAA,EAAA,CAAA,IAAA,EAAzC,EAAyC,CAAA,EAAA,CAAA,IAAzC,EAAyC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAzC,EAA2C;AAAtC,YAAM,IAAI,GAAA,EAAA,CAAA,KAAV;;AACC,YAAA,EAAA,GAAA,OAAA,CAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA;AAAA,YAAC,GAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,YAAM,EAAA,GAAA,EAAA,CAAA,CAAA,CAAN;AAAA,YAAM,KAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,EAAN;;AACJ,QAAA,GAAG,GAAG,kBAAkB,CAAC,GAAD,CAAxB;;AACA,YAAI,KAAJ,EAAW;AACT,UAAA,KAAK,GAAG,kBAAkB,CAAC,KAAD,CAA1B;AACD;;AACD,YAAI,EAAE,GAAG,IAAI,KAAT,CAAJ,EAAqB;AACnB,UAAA,KAAK,CAAC,GAAD,CAAL,GAAa,KAAb;AACD,SAFD,MAEO,IAAI,KAAK,CAAC,OAAN,CAAc,KAAK,CAAC,GAAD,CAAnB,CAAJ,EAA+B;AACnC,UAAA,KAAK,CAAC,GAAD,CAAL,CAA6B,IAA7B,CAAkC,KAAlC;AACF,SAFM,MAEA;AACL,UAAA,KAAK,CAAC,GAAD,CAAL,GAAa,CAAC,KAAK,CAAC,GAAD,CAAN,EAAuB,KAAvB,CAAb;AACD;AACF;;;;;;;;;;;;AACF;;AAED,SAAO,KAAP;AACD;;AAtBD,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourcesContent":["import { QueryParameterBag } from \"@aws-sdk/types\";\n\nexport function parseQueryString(querystring: string): QueryParameterBag {\n  const query: QueryParameterBag = {};\n  querystring = querystring.replace(/^\\?/, \"\");\n\n  if (querystring) {\n    for (const pair of querystring.split(\"&\")) {\n      let [key, value = null] = pair.split(\"=\");\n      key = decodeURIComponent(key);\n      if (value) {\n        value = decodeURIComponent(value);\n      }\n      if (!(key in query)) {\n        query[key] = value;\n      } else if (Array.isArray(query[key])) {\n        (query[key] as Array<string>).push(value as string);\n      } else {\n        query[key] = [query[key] as string, value as string];\n      }\n    }\n  }\n\n  return query;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}