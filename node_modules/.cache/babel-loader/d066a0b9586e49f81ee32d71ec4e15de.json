{"ast":null,"code":"import { constructStack } from \"@aws-sdk/middleware-stack\";\n\nvar Command =\n/** @class */\nfunction () {\n  function Command() {\n    this.middlewareStack = constructStack();\n  }\n\n  return Command;\n}();\n\nexport { Command };","map":{"version":3,"sources":["../../src/command.ts"],"names":[],"mappings":"AAAA,SAAS,cAAT,QAA+B,2BAA/B;;AAGA,IAAA,OAAA;AAAA;AAAA,YAAA;AAAA,WAAA,OAAA,GAAA;AAQW,SAAA,eAAA,GAAmD,cAAc,EAAjE;AAMV;;AAAD,SAAA,OAAA;AAAC,CAdD,EAAA","sourcesContent":["import { constructStack } from \"@aws-sdk/middleware-stack\";\nimport { Command as ICommand, Handler, MetadataBearer, MiddlewareStack as IMiddlewareStack } from \"@aws-sdk/types\";\n\nexport abstract class Command<\n  Input extends ClientInput,\n  Output extends ClientOutput,\n  ResolvedClientConfiguration,\n  ClientInput extends object = any,\n  ClientOutput extends MetadataBearer = any\n> implements ICommand<ClientInput, Input, ClientOutput, Output, ResolvedClientConfiguration> {\n  abstract input: Input;\n  readonly middlewareStack: IMiddlewareStack<Input, Output> = constructStack<Input, Output>();\n  abstract resolveMiddleware(\n    stack: IMiddlewareStack<ClientInput, ClientOutput>,\n    configuration: ResolvedClientConfiguration,\n    options: any\n  ): Handler<Input, Output>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}