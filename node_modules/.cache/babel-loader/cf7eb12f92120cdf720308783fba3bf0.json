{"ast":null,"code":"/**\n * Validates that waiter options are passed correctly\n * @param options a waiter configuration object\n */\nexport var validateWaiterOptions = function (options) {\n  if (options.maxWaitTime < 1) {\n    throw new Error(\"WaiterConfiguration.maxWaitTime must be greater than 0\");\n  } else if (options.minDelay < 1) {\n    throw new Error(\"WaiterConfiguration.minDelay must be greater than 0\");\n  } else if (options.maxDelay < 1) {\n    throw new Error(\"WaiterConfiguration.maxDelay must be greater than 0\");\n  } else if (options.maxWaitTime <= options.minDelay) {\n    throw new Error(\"WaiterConfiguration.maxWaitTime [\" + options.maxWaitTime + \"] must be greater than WaiterConfiguration.minDelay [\" + options.minDelay + \"] for this waiter\");\n  } else if (options.maxDelay < options.minDelay) {\n    throw new Error(\"WaiterConfiguration.maxDelay [\" + options.maxDelay + \"] must be greater than WaiterConfiguration.minDelay [\" + options.minDelay + \"] for this waiter\");\n  }\n};","map":{"version":3,"sources":["../../../src/utils/validate.ts"],"names":[],"mappings":"AAEA;;;AAGG;AACH,OAAO,IAAM,qBAAqB,GAAG,UAAS,OAAT,EAAuC;AAC1E,MAAI,OAAO,CAAC,WAAR,GAAsB,CAA1B,EAA6B;AAC3B,UAAM,IAAI,KAAJ,CAAU,wDAAV,CAAN;AACD,GAFD,MAEO,IAAI,OAAO,CAAC,QAAR,GAAmB,CAAvB,EAA0B;AAC/B,UAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACD,GAFM,MAEA,IAAI,OAAO,CAAC,QAAR,GAAmB,CAAvB,EAA0B;AAC/B,UAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACD,GAFM,MAEA,IAAI,OAAO,CAAC,WAAR,IAAuB,OAAO,CAAC,QAAnC,EAA6C;AAClD,UAAM,IAAI,KAAJ,CACJ,sCAAoC,OAAO,CAAC,WAA5C,GAAuD,uDAAvD,GAA+G,OAAO,CAAC,QAAvH,GAA+H,mBAD3H,CAAN;AAGD,GAJM,MAIA,IAAI,OAAO,CAAC,QAAR,GAAmB,OAAO,CAAC,QAA/B,EAAyC;AAC9C,UAAM,IAAI,KAAJ,CACJ,mCAAiC,OAAO,CAAC,QAAzC,GAAiD,uDAAjD,GAAyG,OAAO,CAAC,QAAjH,GAAyH,mBADrH,CAAN;AAGD;AACF,CAhBM","sourcesContent":["import { WaiterOptions } from \"../waiter\";\n\n/**\n * Validates that waiter options are passed correctly\n * @param options a waiter configuration object\n */\nexport const validateWaiterOptions = <Client>(options: WaiterOptions<Client>): void => {\n  if (options.maxWaitTime < 1) {\n    throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);\n  } else if (options.minDelay < 1) {\n    throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);\n  } else if (options.maxDelay < 1) {\n    throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);\n  } else if (options.maxWaitTime <= options.minDelay) {\n    throw new Error(\n      `WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`\n    );\n  } else if (options.maxDelay < options.minDelay) {\n    throw new Error(\n      `WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`\n    );\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}