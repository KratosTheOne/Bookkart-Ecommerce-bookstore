{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { DescribeStreamCommand } from \"../commands/DescribeStreamCommand\";\nimport { WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nvar checkState = function (client, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var result_1, returnComparator, exception_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n\n          return [4\n          /*yield*/\n          , client.send(new DescribeStreamCommand(input))];\n\n        case 1:\n          result_1 = _a.sent();\n\n          try {\n            returnComparator = function () {\n              return result_1.StreamDescription.StreamStatus;\n            };\n\n            if (returnComparator() === \"ACTIVE\") {\n              return [2\n              /*return*/\n              , {\n                state: WaiterState.SUCCESS\n              }];\n            }\n          } catch (e) {}\n\n          return [3\n          /*break*/\n          , 3];\n\n        case 2:\n          exception_1 = _a.sent();\n          return [3\n          /*break*/\n          , 3];\n\n        case 3:\n          return [2\n          /*return*/\n          , {\n            state: WaiterState.RETRY\n          }];\n      }\n    });\n  });\n};\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeStreamCommand for polling.\n */\n\n\nexport var waitForStreamExists = function (params, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var serviceDefaults;\n    return __generator(this, function (_a) {\n      serviceDefaults = {\n        minDelay: 10,\n        maxDelay: 120\n      };\n      return [2\n      /*return*/\n      , createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];\n    });\n  });\n};","map":{"version":3,"sources":["../../../waiters/waitForStreamExists.ts"],"names":[],"mappings":";AACA,SAAS,qBAAT,QAAkE,mCAAlE;AACA,SAA4C,WAA5C,EAAyD,YAAzD,QAA6E,sBAA7E;;AAEA,IAAM,UAAU,GAAG,UAAO,MAAP,EAA8B,KAA9B,EAA+D;AAAA,SAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;AAE5D,iBAAA,CAAA;AAAA;AAAA,YAAM,MAAM,CAAC,IAAP,CAAY,IAAI,qBAAJ,CAA0B,KAA1B,CAAZ,CAAN,CAAA;;;AAAd,UAAA,QAAA,GAAc,EAAA,CAAA,IAAA,EAAd;;AACJ,cAAI;AACE,YAAA,gBAAgB,GAAG,YAAA;AACrB,qBAAO,QAAM,CAAC,iBAAP,CAAyB,YAAhC;AACD,aAFG;;AAGJ,gBAAI,gBAAgB,OAAO,QAA3B,EAAqC;AACnC,qBAAA,CAAA;AAAA;AAAA,gBAAO;AAAE,gBAAA,KAAK,EAAE,WAAW,CAAC;AAArB,eAAP,CAAA;AACD;AACF,WAPD,CAOE,OAAO,CAAP,EAAU,CAAE;;;;;;;;;;;;;AAEhB,iBAAA,CAAA;AAAA;AAAA,YAAO;AAAE,YAAA,KAAK,EAAE,WAAW,CAAC;AAArB,WAAP,CAAA;;;GAZgF,CAAA;AAajF,CAbD;AAcA;;;;AAIG;;;AACH,OAAO,IAAM,mBAAmB,GAAG,UACjC,MADiC,EAEjC,KAFiC,EAEA;AAAA,SAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;AAE3B,MAAA,eAAe,GAAG;AAAE,QAAA,QAAQ,EAAE,EAAZ;AAAgB,QAAA,QAAQ,EAAE;AAA1B,OAAlB;AACN,aAAA,CAAA;AAAA;AAAA,QAAO,YAAY,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAM,eAAN,CAAA,EAA0B,MAA1B,CAAA,EAAoC,KAApC,EAA2C,UAA3C,CAAnB,CAAA;;GAHiC,CAAA;AAIlC,CANM","sourceRoot":"","sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { DescribeStreamCommand } from \"../commands/DescribeStreamCommand\";\nimport { WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\nvar checkState = function (client, input) { return __awaiter(void 0, void 0, void 0, function () {\n    var result_1, returnComparator, exception_1;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                _a.trys.push([0, 2, , 3]);\n                return [4 /*yield*/, client.send(new DescribeStreamCommand(input))];\n            case 1:\n                result_1 = _a.sent();\n                try {\n                    returnComparator = function () {\n                        return result_1.StreamDescription.StreamStatus;\n                    };\n                    if (returnComparator() === \"ACTIVE\") {\n                        return [2 /*return*/, { state: WaiterState.SUCCESS }];\n                    }\n                }\n                catch (e) { }\n                return [3 /*break*/, 3];\n            case 2:\n                exception_1 = _a.sent();\n                return [3 /*break*/, 3];\n            case 3: return [2 /*return*/, { state: WaiterState.RETRY }];\n        }\n    });\n}); };\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeStreamCommand for polling.\n */\nexport var waitForStreamExists = function (params, input) { return __awaiter(void 0, void 0, void 0, function () {\n    var serviceDefaults;\n    return __generator(this, function (_a) {\n        serviceDefaults = { minDelay: 10, maxDelay: 120 };\n        return [2 /*return*/, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];\n    });\n}); };\n//# sourceMappingURL=waitForStreamExists.js.map"]},"metadata":{},"sourceType":"module"}