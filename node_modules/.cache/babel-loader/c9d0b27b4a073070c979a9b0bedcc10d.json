{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { SPACE, UA_ESCAPE_REGEX, USER_AGENT, X_AMZ_USER_AGENT } from \"./constants\";\n/**\n * Build user agent header sections from:\n * 1. runtime-specific default user agent provider;\n * 2. custom user agent from `customUserAgent` client config;\n * 3. handler execution context set by internal SDK components;\n * The built user agent will be set to `x-amz-user-agent` header for ALL the\n * runtimes.\n * Please note that any override to the `user-agent` or `x-amz-user-agent` header\n * in the HTTP request is discouraged. Please use `customUserAgent` client\n * config or middleware setting the `userAgent` context to generate desired user\n * agent.\n */\n\nexport var userAgentMiddleware = function (options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var request, headers, userAgent, defaultUserAgent, customUserAgent, normalUAValue;\n\n        var _a, _b;\n\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              request = args.request;\n              if (!HttpRequest.isInstance(request)) return [2\n              /*return*/\n              , next(args)];\n              headers = request.headers;\n              userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];\n              return [4\n              /*yield*/\n              , options.defaultUserAgentProvider()];\n\n            case 1:\n              defaultUserAgent = _c.sent().map(escapeUserAgent);\n              customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || []; // Set value to AWS-specific user agent header\n\n              headers[X_AMZ_USER_AGENT] = __spread(defaultUserAgent, userAgent, customUserAgent).join(SPACE);\n              normalUAValue = __spread(defaultUserAgent.filter(function (section) {\n                return section.startsWith(\"aws-sdk-\");\n              }), customUserAgent).join(SPACE);\n\n              if (options.runtime !== \"browser\" && normalUAValue) {\n                headers[USER_AGENT] = headers[USER_AGENT] ? headers[USER_AGENT] + \" \" + normalUAValue : normalUAValue;\n              }\n\n              return [2\n              /*return*/\n              , next(__assign(__assign({}, args), {\n                request: request\n              }))];\n          }\n        });\n      });\n    };\n  };\n};\n/**\n * Escape the each pair according to https://tools.ietf.org/html/rfc5234 and join the pair with pattern `name/version`.\n * User agent name may include prefix like `md/`, `api/`, `os/` etc., we should not escape the `/` after the prefix.\n * @private\n */\n\nvar escapeUserAgent = function (_a) {\n  var _b = __read(_a, 2),\n      name = _b[0],\n      version = _b[1];\n\n  var prefixSeparatorIndex = name.indexOf(\"/\");\n  var prefix = name.substring(0, prefixSeparatorIndex); // If no prefix, prefix is just \"\"\n\n  var uaName = name.substring(prefixSeparatorIndex + 1);\n\n  if (prefix === \"api\") {\n    uaName = uaName.toLowerCase();\n  }\n\n  return [prefix, uaName, version].filter(function (item) {\n    return item && item.length > 0;\n  }).map(function (item) {\n    return item === null || item === void 0 ? void 0 : item.replace(UA_ESCAPE_REGEX, \"_\");\n  }).join(\"/\");\n};\n\nexport var getUserAgentMiddlewareOptions = {\n  name: \"getUserAgentMiddleware\",\n  step: \"build\",\n  priority: \"low\",\n  tags: [\"SET_USER_AGENT\", \"USER_AGENT\"],\n  override: true\n};\nexport var getUserAgentPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/user-agent-middleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  AbsoluteLocation,\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  HandlerExecutionContext,\n  MetadataBearer,\n  Pluggable,\n  UserAgentPair,\n} from \"@aws-sdk/types\";\n\nimport { UserAgentResolvedConfig } from \"./configurations\";\nimport { SPACE, UA_ESCAPE_REGEX, USER_AGENT, X_AMZ_USER_AGENT } from \"./constants\";\n\n/**\n * Build user agent header sections from:\n * 1. runtime-specific default user agent provider;\n * 2. custom user agent from `customUserAgent` client config;\n * 3. handler execution context set by internal SDK components;\n * The built user agent will be set to `x-amz-user-agent` header for ALL the\n * runtimes.\n * Please note that any override to the `user-agent` or `x-amz-user-agent` header\n * in the HTTP request is discouraged. Please use `customUserAgent` client\n * config or middleware setting the `userAgent` context to generate desired user\n * agent.\n */\nexport const userAgentMiddleware = (options: UserAgentResolvedConfig) => <Output extends MetadataBearer>(\n  next: BuildHandler<any, any>,\n  context: HandlerExecutionContext\n): BuildHandler<any, any> => async (args: BuildHandlerArguments<any>): Promise<BuildHandlerOutput<Output>> => {\n  const { request } = args;\n  if (!HttpRequest.isInstance(request)) return next(args);\n  const { headers } = request;\n  const userAgent = context?.userAgent?.map(escapeUserAgent) || [];\n  const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);\n  const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];\n  // Set value to AWS-specific user agent header\n  headers[X_AMZ_USER_AGENT] = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(SPACE);\n  // Get value to be sent with non-AWS-specific user agent header.\n  const normalUAValue = [\n    ...defaultUserAgent.filter((section) => section.startsWith(\"aws-sdk-\")),\n    ...customUserAgent,\n  ].join(SPACE);\n  if (options.runtime !== \"browser\" && normalUAValue) {\n    headers[USER_AGENT] = headers[USER_AGENT] ? `${headers[USER_AGENT]} ${normalUAValue}` : normalUAValue;\n  }\n\n  return next({\n    ...args,\n    request,\n  });\n};\n\n/**\n * Escape the each pair according to https://tools.ietf.org/html/rfc5234 and join the pair with pattern `name/version`.\n * User agent name may include prefix like `md/`, `api/`, `os/` etc., we should not escape the `/` after the prefix.\n * @private\n */\nconst escapeUserAgent = ([name, version]: UserAgentPair): string => {\n  const prefixSeparatorIndex = name.indexOf(\"/\");\n  const prefix = name.substring(0, prefixSeparatorIndex); // If no prefix, prefix is just \"\"\n  let uaName = name.substring(prefixSeparatorIndex + 1);\n  if (prefix === \"api\") {\n    uaName = uaName.toLowerCase();\n  }\n  return [prefix, uaName, version]\n    .filter((item) => item && item.length > 0)\n    .map((item) => item?.replace(UA_ESCAPE_REGEX, \"_\"))\n    .join(\"/\");\n};\n\nexport const getUserAgentMiddlewareOptions: BuildHandlerOptions & AbsoluteLocation = {\n  name: \"getUserAgentMiddleware\",\n  step: \"build\",\n  priority: \"low\",\n  tags: [\"SET_USER_AGENT\", \"USER_AGENT\"],\n  override: true,\n};\n\nexport const getUserAgentPlugin = (config: UserAgentResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}