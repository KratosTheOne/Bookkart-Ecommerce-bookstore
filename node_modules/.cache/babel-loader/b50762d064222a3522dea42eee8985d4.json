{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { UploadPartCopyOutput, UploadPartCopyRequest } from \"../models/models_1\";\nimport { deserializeAws_restXmlUploadPartCopyCommand, serializeAws_restXmlUploadPartCopyCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getThrow200ExceptionsPlugin } from \"@aws-sdk/middleware-sdk-s3\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getSsecPlugin } from \"@aws-sdk/middleware-ssec\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Uploads a part by copying data from an existing object as data source. You specify the\n *          data source by adding the request header <code>x-amz-copy-source</code> in your request and\n *          a byte range by adding the request header <code>x-amz-copy-source-range</code> in your\n *          request. </p>\n *          <p>The minimum allowable part size for a multipart upload is 5 MB. For more information\n *          about multipart upload limits, go to <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/qfacts.html\">Quick\n *             Facts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>. </p>\n *          <note>\n *             <p>Instead of using an existing object as part data, you might use the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *             operation and provide data in your request.</p>\n *          </note>\n *\n *          <p>You must initiate a multipart upload before you can upload any part. In response to your\n *          initiate request. Amazon S3 returns a unique identifier, the upload ID, that you must include in\n *          your upload part request.</p>\n *          <p>For more information about using the <code>UploadPartCopy</code> operation, see the\n *          following:</p>\n *\n *          <ul>\n *             <li>\n *                <p>For conceptual information about multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html\">Uploading Objects Using Multipart\n *                   Upload</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *             </li>\n *             <li>\n *                <p>For information about permissions required to use the multipart upload API, see\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html\">Multipart Upload API and\n *                   Permissions</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *             </li>\n *             <li>\n *                <p>For information about copying objects using a single atomic operation vs. the\n *                multipart upload, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectOperations.html\">Operations on\n *                   Objects</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *             </li>\n *             <li>\n *                <p>For information about using server-side encryption with customer-provided\n *                encryption keys with the UploadPartCopy operation, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html\">CopyObject</a> and <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>.</p>\n *             </li>\n *          </ul>\n *          <p>Note the following additional considerations about the request headers\n *             <code>x-amz-copy-source-if-match</code>, <code>x-amz-copy-source-if-none-match</code>,\n *             <code>x-amz-copy-source-if-unmodified-since</code>, and\n *             <code>x-amz-copy-source-if-modified-since</code>:</p>\n *          <p> </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <b>Consideration 1</b> - If both of the\n *                   <code>x-amz-copy-source-if-match</code> and\n *                   <code>x-amz-copy-source-if-unmodified-since</code> headers are present in the\n *                request as follows:</p>\n *                <p>\n *                   <code>x-amz-copy-source-if-match</code> condition evaluates to <code>true</code>,\n *                and;</p>\n *                <p>\n *                   <code>x-amz-copy-source-if-unmodified-since</code> condition evaluates to\n *                   <code>false</code>;</p>\n *                <p>Amazon S3 returns <code>200 OK</code> and copies the data.\n *                </p>\n *\n *             </li>\n *             <li>\n *                <p>\n *                   <b>Consideration 2</b> - If both of the\n *                   <code>x-amz-copy-source-if-none-match</code> and\n *                   <code>x-amz-copy-source-if-modified-since</code> headers are present in the\n *                request as follows:</p>\n *                <p>\n *                   <code>x-amz-copy-source-if-none-match</code> condition evaluates to\n *                   <code>false</code>, and;</p>\n *                <p>\n *                   <code>x-amz-copy-source-if-modified-since</code> condition evaluates to\n *                   <code>true</code>;</p>\n *                <p>Amazon S3 returns <code>412 Precondition Failed</code> response code.\n *                </p>\n *             </li>\n *          </ul>\n *          <p>\n *             <b>Versioning</b>\n *          </p>\n *          <p>If your bucket has versioning enabled, you could have multiple versions of the same\n *          object. By default, <code>x-amz-copy-source</code> identifies the current version of the\n *          object to copy. If the current version is a delete marker and you don't specify a versionId\n *          in the <code>x-amz-copy-source</code>, Amazon S3 returns a 404 error, because the object does\n *          not exist. If you specify versionId in the <code>x-amz-copy-source</code> and the versionId\n *          is a delete marker, Amazon S3 returns an HTTP 400 error, because you are not allowed to specify\n *          a delete marker as a version for the <code>x-amz-copy-source</code>. </p>\n *          <p>You can optionally specify a specific version of the source object to copy by adding the\n *             <code>versionId</code> subresource as shown in the following example:</p>\n *          <p>\n *             <code>x-amz-copy-source: /bucket/object?versionId=version id</code>\n *          </p>\n *\n *          <p class=\"title\">\n *             <b>Special Errors</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <i>Code: NoSuchUpload</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>Cause: The specified multipart upload does not exist. The upload\n *                         ID might be invalid, or the multipart upload might have been aborted or\n *                         completed.</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>HTTP Status Code: 404 Not Found</i>\n *                      </p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <i>Code: InvalidRequest</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>Cause: The specified copy source is not supported as a byte-range\n *                         copy source.</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>HTTP Status Code: 400 Bad Request</i>\n *                      </p>\n *                   </li>\n *                </ul>\n *             </li>\n *          </ul>\n *\n *\n *\n *\n *\n *\n *          <p class=\"title\">\n *             <b>Related Resources</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html\">AbortMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html\">ListParts</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html\">ListMultipartUploads</a>\n *                </p>\n *             </li>\n *          </ul>\n */\n\nvar UploadPartCopyCommand =\n/** @class */\nfunction (_super) {\n  __extends(UploadPartCopyCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function UploadPartCopyCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  UploadPartCopyCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));\n    this.middlewareStack.use(getSsecPlugin(configuration));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"UploadPartCopyCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: UploadPartCopyRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: UploadPartCopyOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  UploadPartCopyCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlUploadPartCopyCommand(input, context);\n  };\n\n  UploadPartCopyCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlUploadPartCopyCommand(output, context);\n  };\n\n  return UploadPartCopyCommand;\n}($Command);\n\nexport { UploadPartCopyCommand };","map":{"version":3,"sources":["../../../commands/UploadPartCopyCommand.ts"],"names":[],"mappings":";AACA,SAAS,oBAAT,EAA+B,qBAA/B,QAA4D,oBAA5D;AACA,SACE,2CADF,EAEE,yCAFF,QAGO,0BAHP;AAIA,SAAS,uBAAT,QAAwC,qCAAxC;AACA,SAAS,2BAAT,QAA4C,4BAA5C;AACA,SAAS,cAAT,QAA+B,2BAA/B;AACA,SAAS,aAAT,QAA8B,0BAA9B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoLG;;AACH,IAAA,qBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2C,EAAA,SAAA,CAAA,qBAAA,EAAA,MAAA,CAAA,CAA3C,CAKE;AACA;;;AAEA,WAAA,qBAAA,CAAqB,KAArB,EAAsD;AAAtD,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAAiC,CAGpD;AACD;AAED;;AAEG;;;AACH,EAAA,qBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AACA,SAAK,eAAL,CAAqB,GAArB,CAAyB,2BAA2B,CAAC,aAAD,CAApD;AACA,SAAK,eAAL,CAAqB,GAArB,CAAyB,aAAa,CAAC,aAAD,CAAtC;AACA,SAAK,eAAL,CAAqB,GAArB,CAAyB,uBAAuB,CAAC,aAAD,CAAhD;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,UAAnB;AACA,QAAM,WAAW,GAAG,uBAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,qBAAqB,CAAC,kBAJQ;AAKvD,MAAA,wBAAwB,EAAE,oBAAoB,CAAC;AALQ,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GA5BD;;AA8BQ,EAAA,qBAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAAqD,OAArD,EAA4E;AAC1E,WAAO,yCAAyC,CAAC,KAAD,EAAQ,OAAR,CAAhD;AACD,GAFO;;AAIA,EAAA,qBAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,2CAA2C,CAAC,MAAD,EAAS,OAAT,CAAlD;AACD,GAFO;;AAMV,SAAA,qBAAA;AAAC,CAzDD,CAA2C,QAA3C,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { UploadPartCopyOutput, UploadPartCopyRequest } from \"../models/models_1\";\nimport { deserializeAws_restXmlUploadPartCopyCommand, serializeAws_restXmlUploadPartCopyCommand, } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getThrow200ExceptionsPlugin } from \"@aws-sdk/middleware-sdk-s3\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getSsecPlugin } from \"@aws-sdk/middleware-ssec\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Uploads a part by copying data from an existing object as data source. You specify the\n *          data source by adding the request header <code>x-amz-copy-source</code> in your request and\n *          a byte range by adding the request header <code>x-amz-copy-source-range</code> in your\n *          request. </p>\n *          <p>The minimum allowable part size for a multipart upload is 5 MB. For more information\n *          about multipart upload limits, go to <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/qfacts.html\">Quick\n *             Facts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>. </p>\n *          <note>\n *             <p>Instead of using an existing object as part data, you might use the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *             operation and provide data in your request.</p>\n *          </note>\n *\n *          <p>You must initiate a multipart upload before you can upload any part. In response to your\n *          initiate request. Amazon S3 returns a unique identifier, the upload ID, that you must include in\n *          your upload part request.</p>\n *          <p>For more information about using the <code>UploadPartCopy</code> operation, see the\n *          following:</p>\n *\n *          <ul>\n *             <li>\n *                <p>For conceptual information about multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html\">Uploading Objects Using Multipart\n *                   Upload</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *             </li>\n *             <li>\n *                <p>For information about permissions required to use the multipart upload API, see\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html\">Multipart Upload API and\n *                   Permissions</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *             </li>\n *             <li>\n *                <p>For information about copying objects using a single atomic operation vs. the\n *                multipart upload, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectOperations.html\">Operations on\n *                   Objects</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *             </li>\n *             <li>\n *                <p>For information about using server-side encryption with customer-provided\n *                encryption keys with the UploadPartCopy operation, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html\">CopyObject</a> and <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>.</p>\n *             </li>\n *          </ul>\n *          <p>Note the following additional considerations about the request headers\n *             <code>x-amz-copy-source-if-match</code>, <code>x-amz-copy-source-if-none-match</code>,\n *             <code>x-amz-copy-source-if-unmodified-since</code>, and\n *             <code>x-amz-copy-source-if-modified-since</code>:</p>\n *          <p> </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <b>Consideration 1</b> - If both of the\n *                   <code>x-amz-copy-source-if-match</code> and\n *                   <code>x-amz-copy-source-if-unmodified-since</code> headers are present in the\n *                request as follows:</p>\n *                <p>\n *                   <code>x-amz-copy-source-if-match</code> condition evaluates to <code>true</code>,\n *                and;</p>\n *                <p>\n *                   <code>x-amz-copy-source-if-unmodified-since</code> condition evaluates to\n *                   <code>false</code>;</p>\n *                <p>Amazon S3 returns <code>200 OK</code> and copies the data.\n *                </p>\n *\n *             </li>\n *             <li>\n *                <p>\n *                   <b>Consideration 2</b> - If both of the\n *                   <code>x-amz-copy-source-if-none-match</code> and\n *                   <code>x-amz-copy-source-if-modified-since</code> headers are present in the\n *                request as follows:</p>\n *                <p>\n *                   <code>x-amz-copy-source-if-none-match</code> condition evaluates to\n *                   <code>false</code>, and;</p>\n *                <p>\n *                   <code>x-amz-copy-source-if-modified-since</code> condition evaluates to\n *                   <code>true</code>;</p>\n *                <p>Amazon S3 returns <code>412 Precondition Failed</code> response code.\n *                </p>\n *             </li>\n *          </ul>\n *          <p>\n *             <b>Versioning</b>\n *          </p>\n *          <p>If your bucket has versioning enabled, you could have multiple versions of the same\n *          object. By default, <code>x-amz-copy-source</code> identifies the current version of the\n *          object to copy. If the current version is a delete marker and you don't specify a versionId\n *          in the <code>x-amz-copy-source</code>, Amazon S3 returns a 404 error, because the object does\n *          not exist. If you specify versionId in the <code>x-amz-copy-source</code> and the versionId\n *          is a delete marker, Amazon S3 returns an HTTP 400 error, because you are not allowed to specify\n *          a delete marker as a version for the <code>x-amz-copy-source</code>. </p>\n *          <p>You can optionally specify a specific version of the source object to copy by adding the\n *             <code>versionId</code> subresource as shown in the following example:</p>\n *          <p>\n *             <code>x-amz-copy-source: /bucket/object?versionId=version id</code>\n *          </p>\n *\n *          <p class=\"title\">\n *             <b>Special Errors</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <i>Code: NoSuchUpload</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>Cause: The specified multipart upload does not exist. The upload\n *                         ID might be invalid, or the multipart upload might have been aborted or\n *                         completed.</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>HTTP Status Code: 404 Not Found</i>\n *                      </p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <i>Code: InvalidRequest</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>Cause: The specified copy source is not supported as a byte-range\n *                         copy source.</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>HTTP Status Code: 400 Bad Request</i>\n *                      </p>\n *                   </li>\n *                </ul>\n *             </li>\n *          </ul>\n *\n *\n *\n *\n *\n *\n *          <p class=\"title\">\n *             <b>Related Resources</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html\">AbortMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html\">ListParts</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html\">ListMultipartUploads</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nvar UploadPartCopyCommand = /** @class */ (function (_super) {\n    __extends(UploadPartCopyCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function UploadPartCopyCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    UploadPartCopyCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));\n        this.middlewareStack.use(getSsecPlugin(configuration));\n        this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"S3Client\";\n        var commandName = \"UploadPartCopyCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: UploadPartCopyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: UploadPartCopyOutput.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    UploadPartCopyCommand.prototype.serialize = function (input, context) {\n        return serializeAws_restXmlUploadPartCopyCommand(input, context);\n    };\n    UploadPartCopyCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_restXmlUploadPartCopyCommand(output, context);\n    };\n    return UploadPartCopyCommand;\n}($Command));\nexport { UploadPartCopyCommand };\n//# sourceMappingURL=UploadPartCopyCommand.js.map"]},"metadata":{},"sourceType":"module"}