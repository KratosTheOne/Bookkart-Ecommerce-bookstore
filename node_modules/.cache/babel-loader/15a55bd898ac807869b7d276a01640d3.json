{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nfunction ssecMiddleware(options) {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var input, properties, properties_1, properties_1_1, prop, value, valueView, encoded, hash, _a, _b, _c, _d, e_1_1;\n\n        var e_1, _e, _f;\n\n        return tslib_1.__generator(this, function (_g) {\n          switch (_g.label) {\n            case 0:\n              input = tslib_1.__assign({}, args.input);\n              properties = [{\n                target: \"SSECustomerKey\",\n                hash: \"SSECustomerKeyMD5\"\n              }, {\n                target: \"CopySourceSSECustomerKey\",\n                hash: \"CopySourceSSECustomerKeyMD5\"\n              }];\n              _g.label = 1;\n\n            case 1:\n              _g.trys.push([1, 6, 7, 8]);\n\n              properties_1 = tslib_1.__values(properties), properties_1_1 = properties_1.next();\n              _g.label = 2;\n\n            case 2:\n              if (!!properties_1_1.done) return [3\n              /*break*/\n              , 5];\n              prop = properties_1_1.value;\n              value = input[prop.target];\n              if (!value) return [3\n              /*break*/\n              , 4];\n              valueView = ArrayBuffer.isView(value) ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength) : typeof value === \"string\" ? options.utf8Decoder(value) : new Uint8Array(value);\n              encoded = options.base64Encoder(valueView);\n              hash = new options.md5();\n              hash.update(valueView);\n              _a = [tslib_1.__assign({}, input)];\n              _f = {}, _f[prop.target] = encoded;\n              _b = prop.hash;\n              _d = (_c = options).base64Encoder;\n              return [4\n              /*yield*/\n              , hash.digest()];\n\n            case 3:\n              input = tslib_1.__assign.apply(void 0, _a.concat([(_f[_b] = _d.apply(_c, [_g.sent()]), _f)]));\n              _g.label = 4;\n\n            case 4:\n              properties_1_1 = properties_1.next();\n              return [3\n              /*break*/\n              , 2];\n\n            case 5:\n              return [3\n              /*break*/\n              , 8];\n\n            case 6:\n              e_1_1 = _g.sent();\n              e_1 = {\n                error: e_1_1\n              };\n              return [3\n              /*break*/\n              , 8];\n\n            case 7:\n              try {\n                if (properties_1_1 && !properties_1_1.done && (_e = properties_1.return)) _e.call(properties_1);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n\n              return [7\n              /*endfinally*/\n              ];\n\n            case 8:\n              return [2\n              /*return*/\n              , next(tslib_1.__assign(tslib_1.__assign({}, args), {\n                input: input\n              }))];\n          }\n        });\n      });\n    };\n  };\n}\n\nexports.ssecMiddleware = ssecMiddleware;\nexports.ssecMiddlewareOptions = {\n  name: \"ssecMiddleware\",\n  step: \"initialize\",\n  tags: [\"SSE\"]\n};\n\nexports.getSsecPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(ssecMiddleware(config), exports.ssecMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;AAYA,SAAgB,cAAhB,CACE,OADF,EACuC;AADvC,MAAA,KAAA,GAAA,IAAA;;AAGE,SAAO,UACL,IADK,EAC+B;AACD,WAAA,UACnC,IADmC,EACE;AAAA,aAAA,OAAA,CAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;;AAEjC,cAAA,KAAK,GAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,IAAI,CAAC,KAAb,CAAL;AACE,cAAA,UAAU,GAAG,CACjB;AACE,gBAAA,MAAM,EAAE,gBADV;AAEE,gBAAA,IAAI,EAAE;AAFR,eADiB,EAKjB;AACE,gBAAA,MAAM,EAAE,0BADV;AAEE,gBAAA,IAAI,EAAE;AAFR,eALiB,CAAb;;;;;;AAWa,cAAA,YAAA,GAAA,OAAA,CAAA,QAAA,CAAA,UAAA,CAAA,EAAU,cAAA,GAAA,YAAA,CAAA,IAAA,EAAV;;;;;;;AAAR,cAAA,IAAI,GAAA,cAAA,CAAA,KAAJ;AACH,cAAA,KAAK,GAA4B,KAAa,CAAC,IAAI,CAAC,MAAN,CAA9C;mBACF,K,EAAA,OAAA,CAAA;AAAA;AAAA,gBAAA,CAAA,CAAA;AACI,cAAA,SAAS,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAnB,IACd,IAAI,UAAJ,CAAe,KAAK,CAAC,MAArB,EAA6B,KAAK,CAAC,UAAnC,EAA+C,KAAK,CAAC,UAArD,CADc,GAEd,OAAO,KAAP,KAAiB,QAAjB,GACA,OAAO,CAAC,WAAR,CAAoB,KAApB,CADA,GAEA,IAAI,UAAJ,CAAe,KAAf,CAJE;AAKA,cAAA,OAAO,GAAG,OAAO,CAAC,aAAR,CAAsB,SAAtB,CAAV;AACA,cAAA,IAAI,GAAG,IAAI,OAAO,CAAC,GAAZ,EAAP;AACN,cAAA,IAAI,CAAC,MAAL,CAAY,SAAZ;yCAEM,K;0BACH,IAAI,CAAC,M,IAAS,O;AACd,cAAA,EAAA,GAAA,IAAI,CAAC,IAAL;AAAY,cAAA,EAAA,GAAA,CAAA,EAAA,GAAA,OAAA,EAAQ,aAAR;AAAsB,qBAAA,CAAA;AAAA;AAAA,gBAAM,IAAI,CAAC,MAAL,EAAN,CAAA;;;AAHrC,cAAA,KAAK,GAAA,OAAA,CAAA,QAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,GAGU,EAAA,CAAA,KAAA,CAAA,EAAA,EAAA,CAAsB,EAAA,CAAA,IAAA,EAAtB,CAAA,CAHV,EAGoD,EAHpD,EAAA,CAAA,CAAL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQJ,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACN,IADM,CAAA,EACF;AACP,gBAAA,KAAK,EAAA;AADE,eADE,CAAA,CAAX,CAAA;;;OAjCqC,CAAA;AADF,KAAA;AAsCpC,GAxCD;AAyCD;;AA5CD,OAAA,CAAA,cAAA,GAAA,cAAA;AA8Ca,OAAA,CAAA,qBAAA,GAAkD;AAC7D,EAAA,IAAI,EAAE,gBADuD;AAE7D,EAAA,IAAI,EAAE,YAFuD;AAG7D,EAAA,IAAI,EAAE,CAAC,KAAD;AAHuD,CAAlD;;AAMA,OAAA,CAAA,aAAA,GAAgB,UAC3B,MAD2B,EACS;AACZ,SAAC;AACzB,IAAA,YAAY,EAAE,UAAA,WAAA,EAAW;AACvB,MAAA,WAAW,CAAC,GAAZ,CAAgB,cAAc,CAAC,MAAD,CAA9B,EAAwC,OAAA,CAAA,qBAAxC;AACD;AAHwB,GAAD;AAIxB,CANW","sourcesContent":["import {\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  MetadataBearer,\n  Pluggable,\n  InitializeMiddleware,\n  SourceData\n} from \"@aws-sdk/types\";\nimport { ResolvedSsecMiddlewareConfig } from \"./configuration\";\n\nexport function ssecMiddleware(\n  options: ResolvedSsecMiddlewareConfig\n): InitializeMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: InitializeHandler<any, Output>\n  ): InitializeHandler<any, Output> => async (\n    args: InitializeHandlerArguments<any>\n  ): Promise<InitializeHandlerOutput<Output>> => {\n    let input = { ...args.input };\n    const properties = [\n      {\n        target: \"SSECustomerKey\",\n        hash: \"SSECustomerKeyMD5\"\n      },\n      {\n        target: \"CopySourceSSECustomerKey\",\n        hash: \"CopySourceSSECustomerKeyMD5\"\n      }\n    ];\n\n    for (const prop of properties) {\n      const value: SourceData | undefined = (input as any)[prop.target];\n      if (value) {\n        const valueView = ArrayBuffer.isView(value)\n          ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength)\n          : typeof value === \"string\"\n          ? options.utf8Decoder(value)\n          : new Uint8Array(value);\n        const encoded = options.base64Encoder(valueView);\n        const hash = new options.md5();\n        hash.update(valueView);\n        input = {\n          ...(input as any),\n          [prop.target]: encoded,\n          [prop.hash]: options.base64Encoder(await hash.digest())\n        };\n      }\n    }\n\n    return next({\n      ...args,\n      input\n    });\n  };\n}\n\nexport const ssecMiddlewareOptions: InitializeHandlerOptions = {\n  name: \"ssecMiddleware\",\n  step: \"initialize\",\n  tags: [\"SSE\"]\n};\n\nexport const getSsecPlugin = (\n  config: ResolvedSsecMiddlewareConfig\n): Pluggable<any, any> => ({\n  applyToStack: clientStack => {\n    clientStack.add(ssecMiddleware(config), ssecMiddlewareOptions);\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}