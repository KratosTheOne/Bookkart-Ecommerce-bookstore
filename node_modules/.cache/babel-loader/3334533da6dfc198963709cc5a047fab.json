{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetDocumentAnalysisRequest, GetDocumentAnalysisResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetDocumentAnalysisCommand, serializeAws_json1_1GetDocumentAnalysisCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the results for an Amazon Textract asynchronous operation that analyzes text in a document.</p>\n *          <p>You start asynchronous text analysis by calling <a>StartDocumentAnalysis</a>, which returns a job identifier\n *             (<code>JobId</code>). When the text analysis operation finishes, Amazon Textract publishes a\n *          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to\n *             <code>StartDocumentAnalysis</code>. To get the results of the text-detection operation,\n *          first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *          If so, call <code>GetDocumentAnalysis</code>, and pass the job identifier\n *             (<code>JobId</code>) from the initial call to <code>StartDocumentAnalysis</code>.</p>\n *          <p>\n *             <code>GetDocumentAnalysis</code> returns an array of <a>Block</a> objects. The following\n *          types of information are returned: </p>\n *          <ul>\n *             <li>\n *                <p>Form data (key-value pairs). The related information is returned in two <a>Block</a> objects, each of type <code>KEY_VALUE_SET</code>: a KEY\n *             <code>Block</code> object and a VALUE <code>Block</code> object. For example,\n *             <i>Name: Ana Silva Carolina</i> contains a key and value.\n *             <i>Name:</i> is the key. <i>Ana Silva Carolina</i> is\n *             the value.</p>\n *             </li>\n *             <li>\n *                <p>Table and table cell data. A TABLE <code>Block</code> object contains information about a detected table. A CELL\n *             <code>Block</code> object is returned for each cell in a table.</p>\n *             </li>\n *             <li>\n *                <p>Lines and words of text. A LINE <code>Block</code> object contains one or more WORD <code>Block</code> objects.\n *             All lines and words that are detected in the document are returned (including text that doesn't have a\n *             relationship with the value of the <code>StartDocumentAnalysis</code>\n *                   <code>FeatureTypes</code> input parameter). </p>\n *             </li>\n *          </ul>\n *\n *          <p>Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables.\n *          A SELECTION_ELEMENT <code>Block</code> object contains information about a selection element,\n *          including the selection status.</p>\n *\n *\n *\n *          <p>Use the <code>MaxResults</code> parameter to limit the number of blocks that are\n *          returned. If there are more results than specified in <code>MaxResults</code>, the value of\n *             <code>NextToken</code> in the operation response contains a pagination token for getting\n *          the next set of results. To get the next page of results, call\n *             <code>GetDocumentAnalysis</code>, and populate the <code>NextToken</code> request\n *          parameter with the token value that's returned from the previous call to\n *             <code>GetDocumentAnalysis</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\">Document Text Analysis</a>.</p>\n */\n\nvar GetDocumentAnalysisCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetDocumentAnalysisCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetDocumentAnalysisCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetDocumentAnalysisCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"TextractClient\";\n    var commandName = \"GetDocumentAnalysisCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetDocumentAnalysisRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetDocumentAnalysisResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetDocumentAnalysisCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetDocumentAnalysisCommand(input, context);\n  };\n\n  GetDocumentAnalysisCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetDocumentAnalysisCommand(output, context);\n  };\n\n  return GetDocumentAnalysisCommand;\n}($Command);\n\nexport { GetDocumentAnalysisCommand };","map":{"version":3,"sources":["../../../commands/GetDocumentAnalysisCommand.ts"],"names":[],"mappings":";AACA,SAAS,0BAAT,EAAqC,2BAArC,QAAwE,oBAAxE;AACA,SACE,gDADF,EAEE,8CAFF,QAGO,0BAHP;AAIA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CG;;AACH,IAAA,0BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgD,EAAA,SAAA,CAAA,0BAAA,EAAA,MAAA,CAAA,CAAhD,CAKE;AACA;;;AAEA,WAAA,0BAAA,CAAqB,KAArB,EAA2D;AAA3D,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAAsC,CAGzD;AACD;AAED;;AAEG;;;AACH,EAAA,0BAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,gBAAnB;AACA,QAAM,WAAW,GAAG,4BAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,0BAA0B,CAAC,kBAJG;AAKvD,MAAA,wBAAwB,EAAE,2BAA2B,CAAC;AALC,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GAzBD;;AA2BQ,EAAA,0BAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAA0D,OAA1D,EAAiF;AAC/E,WAAO,8CAA8C,CAAC,KAAD,EAAQ,OAAR,CAArD;AACD,GAFO;;AAIA,EAAA,0BAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,gDAAgD,CAAC,MAAD,EAAS,OAAT,CAAvD;AACD,GAFO;;AAMV,SAAA,0BAAA;AAAC,CAtDD,CAAgD,QAAhD,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { GetDocumentAnalysisRequest, GetDocumentAnalysisResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetDocumentAnalysisCommand, serializeAws_json1_1GetDocumentAnalysisCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the results for an Amazon Textract asynchronous operation that analyzes text in a document.</p>\n *          <p>You start asynchronous text analysis by calling <a>StartDocumentAnalysis</a>, which returns a job identifier\n *             (<code>JobId</code>). When the text analysis operation finishes, Amazon Textract publishes a\n *          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to\n *             <code>StartDocumentAnalysis</code>. To get the results of the text-detection operation,\n *          first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *          If so, call <code>GetDocumentAnalysis</code>, and pass the job identifier\n *             (<code>JobId</code>) from the initial call to <code>StartDocumentAnalysis</code>.</p>\n *          <p>\n *             <code>GetDocumentAnalysis</code> returns an array of <a>Block</a> objects. The following\n *          types of information are returned: </p>\n *          <ul>\n *             <li>\n *                <p>Form data (key-value pairs). The related information is returned in two <a>Block</a> objects, each of type <code>KEY_VALUE_SET</code>: a KEY\n *             <code>Block</code> object and a VALUE <code>Block</code> object. For example,\n *             <i>Name: Ana Silva Carolina</i> contains a key and value.\n *             <i>Name:</i> is the key. <i>Ana Silva Carolina</i> is\n *             the value.</p>\n *             </li>\n *             <li>\n *                <p>Table and table cell data. A TABLE <code>Block</code> object contains information about a detected table. A CELL\n *             <code>Block</code> object is returned for each cell in a table.</p>\n *             </li>\n *             <li>\n *                <p>Lines and words of text. A LINE <code>Block</code> object contains one or more WORD <code>Block</code> objects.\n *             All lines and words that are detected in the document are returned (including text that doesn't have a\n *             relationship with the value of the <code>StartDocumentAnalysis</code>\n *                   <code>FeatureTypes</code> input parameter). </p>\n *             </li>\n *          </ul>\n *\n *          <p>Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables.\n *          A SELECTION_ELEMENT <code>Block</code> object contains information about a selection element,\n *          including the selection status.</p>\n *\n *\n *\n *          <p>Use the <code>MaxResults</code> parameter to limit the number of blocks that are\n *          returned. If there are more results than specified in <code>MaxResults</code>, the value of\n *             <code>NextToken</code> in the operation response contains a pagination token for getting\n *          the next set of results. To get the next page of results, call\n *             <code>GetDocumentAnalysis</code>, and populate the <code>NextToken</code> request\n *          parameter with the token value that's returned from the previous call to\n *             <code>GetDocumentAnalysis</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\">Document Text Analysis</a>.</p>\n */\nvar GetDocumentAnalysisCommand = /** @class */ (function (_super) {\n    __extends(GetDocumentAnalysisCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function GetDocumentAnalysisCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    GetDocumentAnalysisCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"TextractClient\";\n        var commandName = \"GetDocumentAnalysisCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: GetDocumentAnalysisRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: GetDocumentAnalysisResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    GetDocumentAnalysisCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1GetDocumentAnalysisCommand(input, context);\n    };\n    GetDocumentAnalysisCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1GetDocumentAnalysisCommand(output, context);\n    };\n    return GetDocumentAnalysisCommand;\n}($Command));\nexport { GetDocumentAnalysisCommand };\n//# sourceMappingURL=GetDocumentAnalysisCommand.js.map"]},"metadata":{},"sourceType":"module"}