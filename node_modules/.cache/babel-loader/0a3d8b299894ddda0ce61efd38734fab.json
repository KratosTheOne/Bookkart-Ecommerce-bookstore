{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar ProviderError_1 = require(\"./ProviderError\");\n/**\n * Compose a single credential provider function from multiple credential\n * providers. The first provider in the argument list will always be invoked;\n * subsequent providers in the list will be invoked in the order in which the\n * were received if the preceding provider did not successfully resolve.\n *\n * If no providers were received or no provider resolves successfully, the\n * returned promise will be rejected.\n */\n\n\nfunction chain() {\n  var providers = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    providers[_i] = arguments[_i];\n  }\n\n  return function () {\n    var e_1, _a;\n\n    var promise = Promise.reject(new ProviderError_1.ProviderError(\"No providers in chain\"));\n\n    var _loop_1 = function (provider) {\n      promise = promise.catch(function (err) {\n        if (err === null || err === void 0 ? void 0 : err.tryNextLink) {\n          return provider();\n        }\n\n        throw err;\n      });\n    };\n\n    try {\n      for (var providers_1 = tslib_1.__values(providers), providers_1_1 = providers_1.next(); !providers_1_1.done; providers_1_1 = providers_1.next()) {\n        var provider = providers_1_1.value;\n\n        _loop_1(provider);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (providers_1_1 && !providers_1_1.done && (_a = providers_1.return)) _a.call(providers_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return promise;\n  };\n}\n\nexports.chain = chain;","map":{"version":3,"sources":["../src/chain.ts"],"names":[],"mappings":";;;;;;;;AAAA,IAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AAGA;;;;;;;;;;;AASA,SAAgB,KAAhB,GAAqB;AAAI,MAAA,SAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAgC;AAAhC,IAAA,SAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACvB,SAAO,YAAA;;;AACL,QAAI,OAAO,GAAe,OAAO,CAAC,MAAR,CACxB,IAAI,eAAA,CAAA,aAAJ,CAAkB,uBAAlB,CADwB,CAA1B;;4BAGW,Q,EAAQ;AACjB,MAAA,OAAO,GAAG,OAAO,CAAC,KAAR,CAAc,UAAC,GAAD,EAAS;AAC/B,YAAI,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,WAAT,EAAsB;AACpB,iBAAO,QAAQ,EAAf;AACD;;AAED,cAAM,GAAN;AACD,OANS,CAAV;;;;AADF,WAAuB,IAAA,WAAA,GAAA,OAAA,CAAA,QAAA,CAAA,SAAA,CAAA,EAAS,aAAA,GAAA,WAAA,CAAA,IAAA,EAAhC,EAAgC,CAAA,aAAA,CAAA,IAAhC,EAAgC,aAAA,GAAA,WAAA,CAAA,IAAA,EAAhC,EAAgC;AAA3B,YAAM,QAAQ,GAAA,aAAA,CAAA,KAAd;;gBAAM,Q;AAQV;;;;;;;;;;;;;AAED,WAAO,OAAP;AACD,GAfD;AAgBD;;AAjBD,OAAA,CAAA,KAAA,GAAA,KAAA","sourcesContent":["import { ProviderError } from \"./ProviderError\";\nimport { Provider } from \"@aws-sdk/types\";\n\n/**\n * Compose a single credential provider function from multiple credential\n * providers. The first provider in the argument list will always be invoked;\n * subsequent providers in the list will be invoked in the order in which the\n * were received if the preceding provider did not successfully resolve.\n *\n * If no providers were received or no provider resolves successfully, the\n * returned promise will be rejected.\n */\nexport function chain<T>(...providers: Array<Provider<T>>): Provider<T> {\n  return () => {\n    let promise: Promise<T> = Promise.reject(\n      new ProviderError(\"No providers in chain\")\n    );\n    for (const provider of providers) {\n      promise = promise.catch((err: any) => {\n        if (err?.tryNextLink) {\n          return provider();\n        }\n\n        throw err;\n      });\n    }\n\n    return promise;\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}