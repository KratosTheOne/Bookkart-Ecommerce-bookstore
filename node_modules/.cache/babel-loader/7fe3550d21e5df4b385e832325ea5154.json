{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HeadBucketCommand } from \"../commands/HeadBucketCommand\";\nimport { WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nvar checkState = function (client, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var result, exception_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n\n          return [4\n          /*yield*/\n          , client.send(new HeadBucketCommand(input))];\n\n        case 1:\n          result = _a.sent();\n          return [2\n          /*return*/\n          , {\n            state: WaiterState.SUCCESS\n          }];\n\n        case 2:\n          exception_1 = _a.sent();\n          return [3\n          /*break*/\n          , 3];\n\n        case 3:\n          return [2\n          /*return*/\n          , {\n            state: WaiterState.RETRY\n          }];\n      }\n    });\n  });\n};\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to HeadBucketCommand for polling.\n */\n\n\nexport var waitForBucketExists = function (params, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var serviceDefaults;\n    return __generator(this, function (_a) {\n      serviceDefaults = {\n        minDelay: 5,\n        maxDelay: 120\n      };\n      return [2\n      /*return*/\n      , createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];\n    });\n  });\n};","map":{"version":3,"sources":["../../../waiters/waitForBucketExists.ts"],"names":[],"mappings":";AACA,SAAS,iBAAT,QAA0D,+BAA1D;AACA,SAA4C,WAA5C,EAAyD,YAAzD,QAA6E,sBAA7E;;AAEA,IAAM,UAAU,GAAG,UAAO,MAAP,EAAyB,KAAzB,EAAsD;AAAA,SAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;AAEnD,iBAAA,CAAA;AAAA;AAAA,YAAM,MAAM,CAAC,IAAP,CAAY,IAAI,iBAAJ,CAAsB,KAAtB,CAAZ,CAAN,CAAA;;;AAAd,UAAA,MAAM,GAAQ,EAAA,CAAA,IAAA,EAAd;AACJ,iBAAA,CAAA;AAAA;AAAA,YAAO;AAAE,YAAA,KAAK,EAAE,WAAW,CAAC;AAArB,WAAP,CAAA;;;;;;;;;AAEF,iBAAA,CAAA;AAAA;AAAA,YAAO;AAAE,YAAA,KAAK,EAAE,WAAW,CAAC;AAArB,WAAP,CAAA;;;GALuE,CAAA;AAMxE,CAND;AAOA;;;;AAIG;;;AACH,OAAO,IAAM,mBAAmB,GAAG,UACjC,MADiC,EAEjC,KAFiC,EAEJ;AAAA,SAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;AAEvB,MAAA,eAAe,GAAG;AAAE,QAAA,QAAQ,EAAE,CAAZ;AAAe,QAAA,QAAQ,EAAE;AAAzB,OAAlB;AACN,aAAA,CAAA;AAAA;AAAA,QAAO,YAAY,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAM,eAAN,CAAA,EAA0B,MAA1B,CAAA,EAAoC,KAApC,EAA2C,UAA3C,CAAnB,CAAA;;GAH6B,CAAA;AAI9B,CANM","sourceRoot":"","sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HeadBucketCommand } from \"../commands/HeadBucketCommand\";\nimport { WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\nvar checkState = function (client, input) { return __awaiter(void 0, void 0, void 0, function () {\n    var result, exception_1;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                _a.trys.push([0, 2, , 3]);\n                return [4 /*yield*/, client.send(new HeadBucketCommand(input))];\n            case 1:\n                result = _a.sent();\n                return [2 /*return*/, { state: WaiterState.SUCCESS }];\n            case 2:\n                exception_1 = _a.sent();\n                return [3 /*break*/, 3];\n            case 3: return [2 /*return*/, { state: WaiterState.RETRY }];\n        }\n    });\n}); };\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to HeadBucketCommand for polling.\n */\nexport var waitForBucketExists = function (params, input) { return __awaiter(void 0, void 0, void 0, function () {\n    var serviceDefaults;\n    return __generator(this, function (_a) {\n        serviceDefaults = { minDelay: 5, maxDelay: 120 };\n        return [2 /*return*/, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];\n    });\n}); };\n//# sourceMappingURL=waitForBucketExists.js.map"]},"metadata":{},"sourceType":"module"}