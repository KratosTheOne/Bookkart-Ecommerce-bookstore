{"ast":null,"code":"import { __awaiter, __generator, __values } from \"tslib\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\nvar signingKeyCache = {};\nvar cacheQueue = [];\n/**\n * Create a string describing the scope of credentials used to sign a request.\n *\n * @param shortDate The current calendar date in the form YYYYMMDD.\n * @param region    The AWS region in which the service resides.\n * @param service   The service to which the signed request is being sent.\n */\n\nexport function createScope(shortDate, region, service) {\n  return shortDate + \"/\" + region + \"/\" + service + \"/\" + KEY_TYPE_IDENTIFIER;\n}\n/**\n * Derive a signing key from its composite parts\n *\n * @param sha256Constructor A constructor function that can instantiate SHA-256\n *                          hash objects.\n * @param credentials       The credentials with which the request will be\n *                          signed.\n * @param shortDate         The current calendar date in the form YYYYMMDD.\n * @param region            The AWS region in which the service resides.\n * @param service           The service to which the signed request is being\n *                          sent.\n */\n\nexport var getSigningKey = function (sha256Constructor, credentials, shortDate, region, service) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var credsHash, cacheKey, key, _a, _b, signable, e_1_1;\n\n    var e_1, _c;\n\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId)];\n\n        case 1:\n          credsHash = _d.sent();\n          cacheKey = shortDate + \":\" + region + \":\" + service + \":\" + toHex(credsHash) + \":\" + credentials.sessionToken;\n\n          if (cacheKey in signingKeyCache) {\n            return [2\n            /*return*/\n            , signingKeyCache[cacheKey]];\n          }\n\n          cacheQueue.push(cacheKey);\n\n          while (cacheQueue.length > MAX_CACHE_SIZE) {\n            delete signingKeyCache[cacheQueue.shift()];\n          }\n\n          key = \"AWS4\" + credentials.secretAccessKey;\n          _d.label = 2;\n\n        case 2:\n          _d.trys.push([2, 7, 8, 9]);\n\n          _a = __values([shortDate, region, service, KEY_TYPE_IDENTIFIER]), _b = _a.next();\n          _d.label = 3;\n\n        case 3:\n          if (!!_b.done) return [3\n          /*break*/\n          , 6];\n          signable = _b.value;\n          return [4\n          /*yield*/\n          , hmac(sha256Constructor, key, signable)];\n\n        case 4:\n          key = _d.sent();\n          _d.label = 5;\n\n        case 5:\n          _b = _a.next();\n          return [3\n          /*break*/\n          , 3];\n\n        case 6:\n          return [3\n          /*break*/\n          , 9];\n\n        case 7:\n          e_1_1 = _d.sent();\n          e_1 = {\n            error: e_1_1\n          };\n          return [3\n          /*break*/\n          , 9];\n\n        case 8:\n          try {\n            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n\n          return [7\n          /*endfinally*/\n          ];\n\n        case 9:\n          return [2\n          /*return*/\n          , signingKeyCache[cacheKey] = key];\n      }\n    });\n  });\n};\n/**\n * @internal\n */\n\nexport function clearCredentialCache() {\n  cacheQueue.length = 0;\n  Object.keys(signingKeyCache).forEach(function (cacheKey) {\n    delete signingKeyCache[cacheKey];\n  });\n}\n\nfunction hmac(ctor, secret, data) {\n  var hash = new ctor(secret);\n  hash.update(data);\n  return hash.digest();\n}","map":{"version":3,"sources":["../../src/credentialDerivation.ts"],"names":[],"mappings":";AACA,SAAS,KAAT,QAAsB,4BAAtB;AAEA,SAAS,mBAAT,EAA8B,cAA9B,QAAoD,aAApD;AAEA,IAAM,eAAe,GAAkC,EAAvD;AACA,IAAM,UAAU,GAAkB,EAAlC;AAEA;;;;;;AAMG;;AACH,OAAM,SAAU,WAAV,CAAsB,SAAtB,EAAyC,MAAzC,EAAyD,OAAzD,EAAwE;AAC5E,SAAU,SAAS,GAAA,GAAT,GAAa,MAAb,GAAmB,GAAnB,GAAuB,OAAvB,GAA8B,GAA9B,GAAkC,mBAA5C;AACD;AAED;;;;;;;;;;;AAWG;;AACH,OAAO,IAAM,aAAa,GAAG,UAC3B,iBAD2B,EAE3B,WAF2B,EAG3B,SAH2B,EAI3B,MAJ2B,EAK3B,OAL2B,EAKZ;AAAA,SAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;;AAEG,iBAAA,CAAA;AAAA;AAAA,YAAM,IAAI,CAAC,iBAAD,EAAoB,WAAW,CAAC,eAAhC,EAAiD,WAAW,CAAC,WAA7D,CAAV,CAAA;;;AAAZ,UAAA,SAAS,GAAG,EAAA,CAAA,IAAA,EAAZ;AACA,UAAA,QAAQ,GAAM,SAAS,GAAA,GAAT,GAAa,MAAb,GAAmB,GAAnB,GAAuB,OAAvB,GAA8B,GAA9B,GAAkC,KAAK,CAAC,SAAD,CAAvC,GAAkD,GAAlD,GAAsD,WAAW,CAAC,YAAhF;;AACN,cAAI,QAAQ,IAAI,eAAhB,EAAiC;AAC/B,mBAAA,CAAA;AAAA;AAAA,cAAO,eAAe,CAAC,QAAD,CAAtB,CAAA;AACD;;AAED,UAAA,UAAU,CAAC,IAAX,CAAgB,QAAhB;;AACA,iBAAO,UAAU,CAAC,MAAX,GAAoB,cAA3B,EAA2C;AACzC,mBAAO,eAAe,CAAC,UAAU,CAAC,KAAX,EAAD,CAAtB;AACD;;AAEG,UAAA,GAAG,GAAe,SAAO,WAAW,CAAC,eAArC;;;;;;AACmB,UAAA,EAAA,GAAA,QAAA,CAAA,CAAC,SAAD,EAAY,MAAZ,EAAoB,OAApB,EAA6B,mBAA7B,CAAA,CAAA,EAAiD,EAAA,GAAA,EAAA,CAAA,IAAA,EAAjD;;;;;;;AAAZ,UAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;AACH,iBAAA,CAAA;AAAA;AAAA,YAAM,IAAI,CAAC,iBAAD,EAAoB,GAApB,EAAyB,QAAzB,CAAV,CAAA;;;AAAN,UAAA,GAAG,GAAG,EAAA,CAAA,IAAA,EAAN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEF,iBAAA,CAAA;AAAA;AAAA,YAAQ,eAAe,CAAC,QAAD,CAAf,GAA4B,GAApC,CAAA;;;GAjBe,CAAA;AAkBhB,CAvBM;AAyBP;;AAEG;;AACH,OAAM,SAAU,oBAAV,GAA8B;AAClC,EAAA,UAAU,CAAC,MAAX,GAAoB,CAApB;AACA,EAAA,MAAM,CAAC,IAAP,CAAY,eAAZ,EAA6B,OAA7B,CAAqC,UAAC,QAAD,EAAS;AAC5C,WAAO,eAAe,CAAC,QAAD,CAAtB;AACD,GAFD;AAGD;;AAED,SAAS,IAAT,CAAc,IAAd,EAAqC,MAArC,EAAyD,IAAzD,EAAyE;AACvE,MAAM,IAAI,GAAG,IAAI,IAAJ,CAAS,MAAT,CAAb;AACA,EAAA,IAAI,CAAC,MAAL,CAAY,IAAZ;AACA,SAAO,IAAI,CAAC,MAAL,EAAP;AACD","sourcesContent":["import { Credentials, HashConstructor, SourceData } from \"@aws-sdk/types\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\n\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\n\nconst signingKeyCache: { [key: string]: Uint8Array } = {};\nconst cacheQueue: Array<string> = [];\n\n/**\n * Create a string describing the scope of credentials used to sign a request.\n *\n * @param shortDate The current calendar date in the form YYYYMMDD.\n * @param region    The AWS region in which the service resides.\n * @param service   The service to which the signed request is being sent.\n */\nexport function createScope(shortDate: string, region: string, service: string): string {\n  return `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;\n}\n\n/**\n * Derive a signing key from its composite parts\n *\n * @param sha256Constructor A constructor function that can instantiate SHA-256\n *                          hash objects.\n * @param credentials       The credentials with which the request will be\n *                          signed.\n * @param shortDate         The current calendar date in the form YYYYMMDD.\n * @param region            The AWS region in which the service resides.\n * @param service           The service to which the signed request is being\n *                          sent.\n */\nexport const getSigningKey = async (\n  sha256Constructor: HashConstructor,\n  credentials: Credentials,\n  shortDate: string,\n  region: string,\n  service: string\n): Promise<Uint8Array> => {\n  const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);\n  const cacheKey = `${shortDate}:${region}:${service}:${toHex(credsHash)}:${credentials.sessionToken}`;\n  if (cacheKey in signingKeyCache) {\n    return signingKeyCache[cacheKey];\n  }\n\n  cacheQueue.push(cacheKey);\n  while (cacheQueue.length > MAX_CACHE_SIZE) {\n    delete signingKeyCache[cacheQueue.shift() as string];\n  }\n\n  let key: SourceData = `AWS4${credentials.secretAccessKey}`;\n  for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {\n    key = await hmac(sha256Constructor, key, signable);\n  }\n  return (signingKeyCache[cacheKey] = key as Uint8Array);\n};\n\n/**\n * @internal\n */\nexport function clearCredentialCache(): void {\n  cacheQueue.length = 0;\n  Object.keys(signingKeyCache).forEach((cacheKey) => {\n    delete signingKeyCache[cacheKey];\n  });\n}\n\nfunction hmac(ctor: HashConstructor, secret: SourceData, data: SourceData): Promise<Uint8Array> {\n  const hash = new ctor(secret);\n  hash.update(data);\n  return hash.digest();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}