{"ast":null,"code":"var ModelSortPredicateCreator =\n/** @class */\nfunction () {\n  function ModelSortPredicateCreator() {}\n\n  ModelSortPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n    var modelName = modelDefinition.name;\n    var fieldNames = new Set(Object.keys(modelDefinition.fields));\n    var handler;\n    var predicate = new Proxy({}, handler = {\n      get: function (_target, propertyKey, receiver) {\n        var field = propertyKey;\n\n        if (!fieldNames.has(field)) {\n          throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n        }\n\n        var result = function (sortDirection) {\n          ModelSortPredicateCreator.sortPredicateGroupsMap.get(receiver).push({\n            field: field,\n            sortDirection: sortDirection\n          });\n          return receiver;\n        };\n\n        return result;\n      }\n    });\n    ModelSortPredicateCreator.sortPredicateGroupsMap.set(predicate, []);\n    return predicate;\n  };\n\n  ModelSortPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelSortPredicateCreator.sortPredicateGroupsMap.has(predicate);\n  };\n\n  ModelSortPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n\n    if (throwOnInvalid && !ModelSortPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n\n    return ModelSortPredicateCreator.sortPredicateGroupsMap.get(predicate);\n  }; // transforms cb-style predicate into Proxy\n\n\n  ModelSortPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n    if (!existing || !modelDefinition) {\n      return undefined;\n    }\n\n    return existing(ModelSortPredicateCreator.createPredicateBuilder(modelDefinition));\n  };\n\n  ModelSortPredicateCreator.sortPredicateGroupsMap = new WeakMap();\n  return ModelSortPredicateCreator;\n}();\n\nexport { ModelSortPredicateCreator };","map":{"version":3,"sources":["../../src/predicates/sort.ts"],"names":[],"mappings":"AASA,IAAA,yBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,yBAAA,GAAA,CA2EC;;AArEe,EAAA,yBAAA,CAAA,sBAAA,GAAf,UACC,eADD,EAC6B;AAEpB,QAAA,SAAA,GAAA,eAAA,CAAA,IAAA;AACR,QAAM,UAAU,GAAG,IAAI,GAAJ,CAAiB,MAAM,CAAC,IAAP,CAAY,eAAe,CAAC,MAA5B,CAAjB,CAAnB;AAEA,QAAI,OAAJ;AACA,QAAM,SAAS,GAAG,IAAI,KAAJ,CACjB,EADiB,EAEhB,OAAO,GAAG;AACV,MAAA,GAAG,EAAH,UAAI,OAAJ,EAAa,WAAb,EAA0B,QAA1B,EAAoD;AACnD,YAAM,KAAK,GAAG,WAAd;;AAEA,YAAI,CAAC,UAAU,CAAC,GAAX,CAAe,KAAf,CAAL,EAA4B;AAC3B,gBAAM,IAAI,KAAJ,CACL,qCAAmC,KAAnC,GAAwC,WAAxC,GAAoD,SAD/C,CAAN;AAGA;;AAED,YAAM,MAAM,GAAG,UAAC,aAAD,EAA6B;AAC3C,UAAA,yBAAyB,CAAC,sBAA1B,CACE,GADF,CACM,QADN,EAEE,IAFF,CAEO;AAAE,YAAA,KAAK,EAAA,KAAP;AAAS,YAAA,aAAa,EAAA;AAAtB,WAFP;AAIA,iBAAO,QAAP;AACA,SAND;;AAOA,eAAO,MAAP;AACA;AAlBS,KAFM,CAAlB;AAwBA,IAAA,yBAAyB,CAAC,sBAA1B,CAAiD,GAAjD,CAAqD,SAArD,EAAgE,EAAhE;AAEA,WAAO,SAAP;AACA,GAlCc;;AAoCR,EAAA,yBAAA,CAAA,gBAAA,GAAP,UACC,SADD,EACe;AAEd,WAAO,yBAAyB,CAAC,sBAA1B,CAAiD,GAAjD,CAAqD,SAArD,CAAP;AACA,GAJM;;AAMA,EAAA,yBAAA,CAAA,aAAA,GAAP,UACC,SADD,EAEC,cAFD,EAE+B;AAA9B,QAAA,cAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,cAAA,GAAA,IAAA;AAA8B;;AAE9B,QACC,cAAc,IACd,CAAC,yBAAyB,CAAC,gBAA1B,CAA2C,SAA3C,CAFF,EAGE;AACD,YAAM,IAAI,KAAJ,CAAU,4BAAV,CAAN;AACA;;AAED,WAAO,yBAAyB,CAAC,sBAA1B,CAAiD,GAAjD,CAAqD,SAArD,CAAP;AACA,GAZM,CAhDR,CA8DC;;;AACO,EAAA,yBAAA,CAAA,kBAAA,GAAP,UACC,eADD,EAEC,QAFD,EAEmC;AAElC,QAAI,CAAC,QAAD,IAAa,CAAC,eAAlB,EAAmC;AAClC,aAAO,SAAP;AACA;;AAED,WAAO,QAAQ,CACd,yBAAyB,CAAC,sBAA1B,CAAiD,eAAjD,CADc,CAAf;AAGA,GAXM;;AA9DQ,EAAA,yBAAA,CAAA,sBAAA,GAAyB,IAAI,OAAJ,EAAzB;AA0EhB,SAAA,yBAAA;AAAC,CA3ED,EAAA;;SAAa,yB","sourceRoot":"","sourcesContent":["var ModelSortPredicateCreator = /** @class */ (function () {\n    function ModelSortPredicateCreator() {\n    }\n    ModelSortPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n        var modelName = modelDefinition.name;\n        var fieldNames = new Set(Object.keys(modelDefinition.fields));\n        var handler;\n        var predicate = new Proxy({}, (handler = {\n            get: function (_target, propertyKey, receiver) {\n                var field = propertyKey;\n                if (!fieldNames.has(field)) {\n                    throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n                }\n                var result = function (sortDirection) {\n                    ModelSortPredicateCreator.sortPredicateGroupsMap\n                        .get(receiver)\n                        .push({ field: field, sortDirection: sortDirection });\n                    return receiver;\n                };\n                return result;\n            },\n        }));\n        ModelSortPredicateCreator.sortPredicateGroupsMap.set(predicate, []);\n        return predicate;\n    };\n    ModelSortPredicateCreator.isValidPredicate = function (predicate) {\n        return ModelSortPredicateCreator.sortPredicateGroupsMap.has(predicate);\n    };\n    ModelSortPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n        if (throwOnInvalid === void 0) { throwOnInvalid = true; }\n        if (throwOnInvalid &&\n            !ModelSortPredicateCreator.isValidPredicate(predicate)) {\n            throw new Error('The predicate is not valid');\n        }\n        return ModelSortPredicateCreator.sortPredicateGroupsMap.get(predicate);\n    };\n    // transforms cb-style predicate into Proxy\n    ModelSortPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n        if (!existing || !modelDefinition) {\n            return undefined;\n        }\n        return existing(ModelSortPredicateCreator.createPredicateBuilder(modelDefinition));\n    };\n    ModelSortPredicateCreator.sortPredicateGroupsMap = new WeakMap();\n    return ModelSortPredicateCreator;\n}());\nexport { ModelSortPredicateCreator };\n//# sourceMappingURL=sort.js.map"]},"metadata":{},"sourceType":"module"}