{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Logger_1 = require(\"./Logger\");\n\nvar logger = new Logger_1.ConsoleLogger('Amplify');\n\nvar AmplifyClass =\n/** @class */\nfunction () {\n  function AmplifyClass() {\n    // Everything that is `register`ed is tracked here\n    this._components = [];\n    this._config = {}; // All modules (with `getModuleName()`) are stored here for dependency injection\n\n    this._modules = {}; // for backward compatibility to avoid breaking change\n    // if someone is using like Amplify.Auth\n\n    this.Auth = null;\n    this.Analytics = null;\n    this.API = null;\n    this.Credentials = null;\n    this.Storage = null;\n    this.I18n = null;\n    this.Cache = null;\n    this.PubSub = null;\n    this.Interactions = null;\n    this.Pushnotification = null;\n    this.UI = null;\n    this.XR = null;\n    this.Predictions = null;\n    this.DataStore = null;\n    this.Logger = Logger_1.ConsoleLogger;\n    this.ServiceWorker = null;\n  }\n\n  AmplifyClass.prototype.register = function (comp) {\n    logger.debug('component registered in amplify', comp);\n\n    this._components.push(comp);\n\n    if (typeof comp.getModuleName === 'function') {\n      this._modules[comp.getModuleName()] = comp;\n      this[comp.getModuleName()] = comp;\n    } else {\n      logger.debug('no getModuleName method for component', comp);\n    } // Finally configure this new component(category) loaded\n    // With the new modularization changes in Amplify V3, all the Amplify\n    // component are not loaded/registered right away but when they are\n    // imported (and hence instantiated) in the client's app. This ensures\n    // that all new components imported get correctly configured with the\n    // configuration that Amplify.configure() was called with.\n\n\n    comp.configure(this._config);\n  };\n\n  AmplifyClass.prototype.configure = function (config) {\n    var _this = this;\n\n    if (!config) return this._config;\n    this._config = Object.assign(this._config, config);\n    logger.debug('amplify config', this._config); // Dependency Injection via property-setting.\n    // This avoids introducing a public method/interface/setter that's difficult to remove later.\n    // Plus, it reduces `if` statements within the `constructor` and `configure` of each module\n\n    Object.entries(this._modules).forEach(function (_a) {\n      var _b = __read(_a, 2),\n          Name = _b[0],\n          comp = _b[1]; // e.g. Auth.*\n\n\n      Object.keys(comp).forEach(function (property) {\n        // e.g. Auth[\"Credentials\"] = this._modules[\"Credentials\"] when set\n        if (_this._modules[property]) {\n          comp[property] = _this._modules[property];\n        }\n      });\n    });\n\n    this._components.map(function (comp) {\n      comp.configure(_this._config);\n    });\n\n    return this._config;\n  };\n\n  AmplifyClass.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable['getCategory'] && typeof pluggable['getCategory'] === 'function') {\n      this._components.map(function (comp) {\n        if (comp['addPluggable'] && typeof comp['addPluggable'] === 'function') {\n          comp.addPluggable(pluggable);\n        }\n      });\n    }\n  };\n\n  return AmplifyClass;\n}();\n\nexports.AmplifyClass = AmplifyClass;\nexports.Amplify = new AmplifyClass();\n/**\n * @deprecated use named import\n */\n\nexports.default = exports.Amplify;","map":{"version":3,"sources":["../src/Amplify.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Logger_1 = require(\"./Logger\");\nvar logger = new Logger_1.ConsoleLogger('Amplify');\nvar AmplifyClass = /** @class */ (function () {\n    function AmplifyClass() {\n        // Everything that is `register`ed is tracked here\n        this._components = [];\n        this._config = {};\n        // All modules (with `getModuleName()`) are stored here for dependency injection\n        this._modules = {};\n        // for backward compatibility to avoid breaking change\n        // if someone is using like Amplify.Auth\n        this.Auth = null;\n        this.Analytics = null;\n        this.API = null;\n        this.Credentials = null;\n        this.Storage = null;\n        this.I18n = null;\n        this.Cache = null;\n        this.PubSub = null;\n        this.Interactions = null;\n        this.Pushnotification = null;\n        this.UI = null;\n        this.XR = null;\n        this.Predictions = null;\n        this.DataStore = null;\n        this.Logger = Logger_1.ConsoleLogger;\n        this.ServiceWorker = null;\n    }\n    AmplifyClass.prototype.register = function (comp) {\n        logger.debug('component registered in amplify', comp);\n        this._components.push(comp);\n        if (typeof comp.getModuleName === 'function') {\n            this._modules[comp.getModuleName()] = comp;\n            this[comp.getModuleName()] = comp;\n        }\n        else {\n            logger.debug('no getModuleName method for component', comp);\n        }\n        // Finally configure this new component(category) loaded\n        // With the new modularization changes in Amplify V3, all the Amplify\n        // component are not loaded/registered right away but when they are\n        // imported (and hence instantiated) in the client's app. This ensures\n        // that all new components imported get correctly configured with the\n        // configuration that Amplify.configure() was called with.\n        comp.configure(this._config);\n    };\n    AmplifyClass.prototype.configure = function (config) {\n        var _this = this;\n        if (!config)\n            return this._config;\n        this._config = Object.assign(this._config, config);\n        logger.debug('amplify config', this._config);\n        // Dependency Injection via property-setting.\n        // This avoids introducing a public method/interface/setter that's difficult to remove later.\n        // Plus, it reduces `if` statements within the `constructor` and `configure` of each module\n        Object.entries(this._modules).forEach(function (_a) {\n            var _b = __read(_a, 2), Name = _b[0], comp = _b[1];\n            // e.g. Auth.*\n            Object.keys(comp).forEach(function (property) {\n                // e.g. Auth[\"Credentials\"] = this._modules[\"Credentials\"] when set\n                if (_this._modules[property]) {\n                    comp[property] = _this._modules[property];\n                }\n            });\n        });\n        this._components.map(function (comp) {\n            comp.configure(_this._config);\n        });\n        return this._config;\n    };\n    AmplifyClass.prototype.addPluggable = function (pluggable) {\n        if (pluggable &&\n            pluggable['getCategory'] &&\n            typeof pluggable['getCategory'] === 'function') {\n            this._components.map(function (comp) {\n                if (comp['addPluggable'] &&\n                    typeof comp['addPluggable'] === 'function') {\n                    comp.addPluggable(pluggable);\n                }\n            });\n        }\n    };\n    return AmplifyClass;\n}());\nexports.AmplifyClass = AmplifyClass;\nexports.Amplify = new AmplifyClass();\n/**\n * @deprecated use named import\n */\nexports.default = exports.Amplify;\n//# sourceMappingURL=Amplify.js.map"]},"metadata":{},"sourceType":"script"}