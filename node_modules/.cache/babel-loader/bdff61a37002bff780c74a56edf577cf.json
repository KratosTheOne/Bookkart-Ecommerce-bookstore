{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nvar CONTENT_LENGTH_HEADER = \"content-length\";\nexport function contentLengthMiddleware(bodyLengthChecker) {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var request, body, headers, length;\n\n        var _a;\n\n        return __generator(this, function (_b) {\n          request = args.request;\n\n          if (HttpRequest.isInstance(request)) {\n            body = request.body, headers = request.headers;\n\n            if (body && Object.keys(headers).map(function (str) {\n              return str.toLowerCase();\n            }).indexOf(CONTENT_LENGTH_HEADER) === -1) {\n              length = bodyLengthChecker(body);\n\n              if (length !== undefined) {\n                request.headers = __assign(__assign({}, request.headers), (_a = {}, _a[CONTENT_LENGTH_HEADER] = String(length), _a));\n              }\n            }\n          }\n\n          return [2\n          /*return*/\n          , next(__assign(__assign({}, args), {\n            request: request\n          }))];\n        });\n      });\n    };\n  };\n}\nexport var contentLengthMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"SET_CONTENT_LENGTH\", \"CONTENT_LENGTH\"],\n  name: \"contentLengthMiddleware\",\n  override: true\n};\nexport var getContentLengthPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";AAAA,SAAS,WAAT,QAA4B,wBAA5B;AAYA,IAAM,qBAAqB,GAAG,gBAA9B;AAEA,OAAM,SAAU,uBAAV,CAAkC,iBAAlC,EAAyE;AAA/E,MAAA,KAAA,GAAA,IAAA;;AACE,SAAO,UAAgC,IAAhC,EAA+D;AAAgC,WAAA,UACpG,IADoG,EACpE;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;AAE1B,UAAA,OAAO,GAAG,IAAI,CAAC,OAAf;;AACN,cAAI,WAAW,CAAC,UAAZ,CAAuB,OAAvB,CAAJ,EAAqC;AAC3B,YAAA,IAAI,GAAc,OAAO,CAArB,IAAJ,EAAM,OAAO,GAAK,OAAO,CAAZ,OAAb;;AACR,gBACE,IAAI,IACJ,MAAM,CAAC,IAAP,CAAY,OAAZ,EACG,GADH,CACO,UAAC,GAAD,EAAI;AAAK,qBAAA,GAAG,CAAH,WAAA,EAAA;AAAiB,aADjC,EAEG,OAFH,CAEW,qBAFX,MAEsC,CAAC,CAJzC,EAKE;AACM,cAAA,MAAM,GAAG,iBAAiB,CAAC,IAAD,CAA1B;;AACN,kBAAI,MAAM,KAAK,SAAf,EAA0B;AACxB,gBAAA,OAAO,CAAC,OAAR,GAAe,QAAA,CAAA,QAAA,CAAA,EAAA,EACV,OAAO,CAAC,OADE,CAAA,GACK,EAAA,GAAA,EAAA,EAAA,EAAA,CACjB,qBADiB,CAAA,GACO,MAAM,CAAC,MAAD,CADb,EACqB,EAF1B,EAAf;AAID;AACF;AACF;;AAED,iBAAA,CAAA;AAAA;AAAA,YAAO,IAAI,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACN,IADM,CAAA,EACF;AACP,YAAA,OAAO,EAAA;AADA,WADE,CAAA,CAAX,CAAA;;OArBgC,CAAA;AADoE,KAAA;AA0BrG,GA1BD;AA2BD;AAED,OAAO,IAAM,8BAA8B,GAAwB;AACjE,EAAA,IAAI,EAAE,OAD2D;AAEjE,EAAA,IAAI,EAAE,CAAC,oBAAD,EAAuB,gBAAvB,CAF2D;AAGjE,EAAA,IAAI,EAAE,yBAH2D;AAIjE,EAAA,QAAQ,EAAE;AAJuD,CAA5D;AAOP,OAAO,IAAM,sBAAsB,GAAG,UAAC,OAAD,EAAqD;AAA0B,SAAC;AACpH,IAAA,YAAY,EAAE,UAAC,WAAD,EAAY;AACxB,MAAA,WAAW,CAAC,GAAZ,CAAgB,uBAAuB,CAAC,OAAO,CAAC,iBAAT,CAAvC,EAAoE,8BAApE;AACD;AAHmH,GAAD;AAInH,CAJK","sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BodyLengthCalculator,\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nconst CONTENT_LENGTH_HEADER = \"content-length\";\n\nexport function contentLengthMiddleware(bodyLengthChecker: BodyLengthCalculator): BuildMiddleware<any, any> {\n  return <Output extends MetadataBearer>(next: BuildHandler<any, Output>): BuildHandler<any, Output> => async (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    const request = args.request;\n    if (HttpRequest.isInstance(request)) {\n      const { body, headers } = request;\n      if (\n        body &&\n        Object.keys(headers)\n          .map((str) => str.toLowerCase())\n          .indexOf(CONTENT_LENGTH_HEADER) === -1\n      ) {\n        const length = bodyLengthChecker(body);\n        if (length !== undefined) {\n          request.headers = {\n            ...request.headers,\n            [CONTENT_LENGTH_HEADER]: String(length),\n          };\n        }\n      }\n    }\n\n    return next({\n      ...args,\n      request,\n    });\n  };\n}\n\nexport const contentLengthMiddlewareOptions: BuildHandlerOptions = {\n  step: \"build\",\n  tags: [\"SET_CONTENT_LENGTH\", \"CONTENT_LENGTH\"],\n  name: \"contentLengthMiddleware\",\n  override: true,\n};\n\nexport const getContentLengthPlugin = (options: { bodyLengthChecker: BodyLengthCalculator }): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}