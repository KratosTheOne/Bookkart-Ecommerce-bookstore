{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nexport var loggerMiddleware = function () {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var logger, response, httpResponse;\n\n        var _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              logger = context.logger;\n              return [4\n              /*yield*/\n              , next(args)];\n\n            case 1:\n              response = _b.sent();\n\n              if (!logger) {\n                return [2\n                /*return*/\n                , response];\n              }\n\n              httpResponse = response.response;\n\n              if (typeof logger.info === \"function\") {\n                logger.info({\n                  metadata: {\n                    statusCode: httpResponse.statusCode,\n                    requestId: (_a = httpResponse.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : httpResponse.headers[\"x-amzn-request-id\"],\n                    extendedRequestId: httpResponse.headers[\"x-amz-id-2\"],\n                    cfId: httpResponse.headers[\"x-amz-cf-id\"]\n                  }\n                });\n              }\n\n              return [2\n              /*return*/\n              , response];\n          }\n        });\n      });\n    };\n  };\n};\nexport var loggerMiddlewareOptions = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"initialize\"\n}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport var getLoggerPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/loggerMiddleware.ts"],"names":[],"mappings":";AAYA,OAAO,IAAM,gBAAgB,GAAG,YAAA;AAAM,SAAA,UACpC,IADoC,EAEpC,OAFoC,EAEJ;AACG,WAAA,UACnC,IADmC,EACE;AAAA,aAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;;AAE7B,cAAA,MAAM,GAAK,OAAO,CAAZ,MAAN;AAES,qBAAA,CAAA;AAAA;AAAA,gBAAM,IAAI,CAAC,IAAD,CAAV,CAAA;;;AAAX,cAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;;AAEN,kBAAI,CAAC,MAAL,EAAa;AACX,uBAAA,CAAA;AAAA;AAAA,kBAAO,QAAP,CAAA;AACD;;AAEK,cAAA,YAAY,GAAG,QAAQ,CAAC,QAAxB;;AAEN,kBAAI,OAAO,MAAM,CAAC,IAAd,KAAuB,UAA3B,EAAuC;AACrC,gBAAA,MAAM,CAAC,IAAP,CAAY;AACV,kBAAA,QAAQ,EAAE;AACR,oBAAA,UAAU,EAAE,YAAY,CAAC,UADjB;AAER,oBAAA,SAAS,EAAA,CAAA,EAAA,GAAE,YAAY,CAAC,OAAb,CAAqB,kBAArB,CAAF,MAA0C,IAA1C,IAA0C,EAAA,KAAA,KAAA,CAA1C,GAA0C,EAA1C,GAA8C,YAAY,CAAC,OAAb,CAAqB,mBAArB,CAF/C;AAGR,oBAAA,iBAAiB,EAAE,YAAY,CAAC,OAAb,CAAqB,YAArB,CAHX;AAIR,oBAAA,IAAI,EAAE,YAAY,CAAC,OAAb,CAAqB,aAArB;AAJE;AADA,iBAAZ;AAQD;;AAED,qBAAA,CAAA;AAAA;AAAA,gBAAO,QAAP,CAAA;;;OAvBqC,CAAA;AADF,KAAA;AAHC,GAAA;AA4BrC,CA5BM;AA8BP,OAAO,IAAM,uBAAuB,GAAgD;AAClF,EAAA,IAAI,EAAE,kBAD4E;AAElF,EAAA,IAAI,EAAE,CAAC,QAAD,CAF4E;AAGlF,EAAA,IAAI,EAAE;AAH4E,CAA7E,C,CAMP;;AACA,OAAO,IAAM,eAAe,GAAG,UAAC,OAAD,EAAa;AAA0B,SAAC;AACrE,IAAA,YAAY,EAAE,UAAC,WAAD,EAAY;AACxB,MAAA,WAAW,CAAC,GAAZ,CAAgB,gBAAgB,EAAhC,EAAoC,uBAApC;AACD;AAHoE,GAAD;AAIpE,CAJK","sourcesContent":["import { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport {\n  AbsoluteLocation,\n  HandlerExecutionContext,\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nexport const loggerMiddleware = () => <Output extends MetadataBearer = MetadataBearer>(\n  next: InitializeHandler<any, Output>,\n  context: HandlerExecutionContext\n): InitializeHandler<any, Output> => async (\n  args: InitializeHandlerArguments<any>\n): Promise<InitializeHandlerOutput<Output>> => {\n  const { logger } = context;\n\n  const response = await next(args);\n\n  if (!logger) {\n    return response;\n  }\n\n  const httpResponse = response.response as HttpResponse;\n\n  if (typeof logger.info === \"function\") {\n    logger.info({\n      metadata: {\n        statusCode: httpResponse.statusCode,\n        requestId: httpResponse.headers[\"x-amzn-requestid\"] ?? httpResponse.headers[\"x-amzn-request-id\"],\n        extendedRequestId: httpResponse.headers[\"x-amz-id-2\"],\n        cfId: httpResponse.headers[\"x-amz-cf-id\"],\n      },\n    });\n  }\n\n  return response;\n};\n\nexport const loggerMiddlewareOptions: InitializeHandlerOptions & AbsoluteLocation = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"initialize\",\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const getLoggerPlugin = (options: any): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}