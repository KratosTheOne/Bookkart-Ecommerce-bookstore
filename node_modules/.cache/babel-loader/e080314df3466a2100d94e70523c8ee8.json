{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\n\nvar HttpRequest =\n/** @class */\nfunction () {\n  function HttpRequest(options) {\n    this.method = options.method || \"GET\";\n    this.hostname = options.hostname || \"localhost\";\n    this.port = options.port;\n    this.query = options.query || {};\n    this.headers = options.headers || {};\n    this.body = options.body;\n    this.protocol = options.protocol ? options.protocol.substr(-1) !== \":\" ? options.protocol + \":\" : options.protocol : \"https:\";\n    this.path = options.path ? options.path.charAt(0) !== \"/\" ? \"/\" + options.path : options.path : \"/\";\n  }\n\n  HttpRequest.isInstance = function (request) {\n    //determine if request is a valid httpRequest\n    if (!request) return false;\n    var req = request;\n    return \"method\" in req && \"protocol\" in req && \"hostname\" in req && \"path\" in req && typeof req[\"query\"] === \"object\" && typeof req[\"headers\"] === \"object\";\n  };\n\n  HttpRequest.prototype.clone = function () {\n    var cloned = new HttpRequest(__assign(__assign({}, this), {\n      headers: __assign({}, this.headers)\n    }));\n    if (cloned.query) cloned.query = cloneQuery(cloned.query);\n    return cloned;\n  };\n\n  return HttpRequest;\n}();\n\nexport { HttpRequest };\n\nfunction cloneQuery(query) {\n  return Object.keys(query).reduce(function (carry, paramName) {\n    var _a;\n\n    var param = query[paramName];\n    return __assign(__assign({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spread(param) : param, _a));\n  }, {});\n}","map":{"version":3,"sources":["../../src/httpRequest.ts"],"names":[],"mappings":";;AAMA,IAAA,WAAA;AAAA;AAAA,YAAA;AAUE,WAAA,WAAA,CAAY,OAAZ,EAAuC;AACrC,SAAK,MAAL,GAAc,OAAO,CAAC,MAAR,IAAkB,KAAhC;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAR,IAAoB,WAApC;AACA,SAAK,IAAL,GAAY,OAAO,CAAC,IAApB;AACA,SAAK,KAAL,GAAa,OAAO,CAAC,KAAR,IAAiB,EAA9B;AACA,SAAK,OAAL,GAAe,OAAO,CAAC,OAAR,IAAmB,EAAlC;AACA,SAAK,IAAL,GAAY,OAAO,CAAC,IAApB;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAR,GACZ,OAAO,CAAC,QAAR,CAAiB,MAAjB,CAAwB,CAAC,CAAzB,MAAgC,GAAhC,GACK,OAAO,CAAC,QAAR,GAAgB,GADrB,GAEE,OAAO,CAAC,QAHE,GAIZ,QAJJ;AAKA,SAAK,IAAL,GAAY,OAAO,CAAC,IAAR,GAAgB,OAAO,CAAC,IAAR,CAAa,MAAb,CAAoB,CAApB,MAA2B,GAA3B,GAAiC,MAAI,OAAO,CAAC,IAA7C,GAAsD,OAAO,CAAC,IAA9E,GAAsF,GAAlG;AACD;;AAEM,EAAA,WAAA,CAAA,UAAA,GAAP,UAAkB,OAAlB,EAAkC;AAChC;AACA,QAAI,CAAC,OAAL,EAAc,OAAO,KAAP;AACd,QAAM,GAAG,GAAQ,OAAjB;AACA,WACE,YAAY,GAAZ,IACA,cAAc,GADd,IAEA,cAAc,GAFd,IAGA,UAAU,GAHV,IAIA,OAAO,GAAG,CAAC,OAAD,CAAV,KAAwB,QAJxB,IAKA,OAAO,GAAG,CAAC,SAAD,CAAV,KAA0B,QAN5B;AAQD,GAZM;;AAcP,EAAA,WAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,QAAM,MAAM,GAAG,IAAI,WAAJ,CAAe,QAAA,CAAA,QAAA,CAAA,EAAA,EACzB,IADyB,CAAA,EACrB;AACP,MAAA,OAAO,EAAA,QAAA,CAAA,EAAA,EAAO,KAAK,OAAZ;AADA,KADqB,CAAf,CAAf;AAIA,QAAI,MAAM,CAAC,KAAX,EAAkB,MAAM,CAAC,KAAP,GAAe,UAAU,CAAC,MAAM,CAAC,KAAR,CAAzB;AAClB,WAAO,MAAP;AACD,GAPD;;AAQF,SAAA,WAAA;AAAC,CA/CD,EAAA;;;;AAiDA,SAAS,UAAT,CAAoB,KAApB,EAA4C;AAC1C,SAAO,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,MAAnB,CAA0B,UAAC,KAAD,EAA2B,SAA3B,EAA4C;;;AAC3E,QAAM,KAAK,GAAG,KAAK,CAAC,SAAD,CAAnB;AACA,WAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,KADL,CAAA,GACU,EAAA,GAAA,EAAA,EAAA,EAAA,CACP,SADO,CAAA,GACK,KAAK,CAAC,OAAN,CAAc,KAAd,IAAsB,QAAA,CAAK,KAAL,CAAtB,GAAoC,KADzC,EAC8C,EAFxD,EAAA;AAID,GANM,EAMJ,EANI,CAAP;AAOD","sourcesContent":["import { Endpoint, HeaderBag, HttpMessage, HttpRequest as IHttpRequest, QueryParameterBag } from \"@aws-sdk/types\";\n\ntype HttpRequestOptions = Partial<HttpMessage> & Partial<Endpoint> & { method?: string };\n\nexport interface HttpRequest extends IHttpRequest {}\n\nexport class HttpRequest implements HttpMessage, Endpoint {\n  public method: string;\n  public protocol: string;\n  public hostname: string;\n  public port?: number;\n  public path: string;\n  public query: QueryParameterBag;\n  public headers: HeaderBag;\n  public body?: any;\n\n  constructor(options: HttpRequestOptions) {\n    this.method = options.method || \"GET\";\n    this.hostname = options.hostname || \"localhost\";\n    this.port = options.port;\n    this.query = options.query || {};\n    this.headers = options.headers || {};\n    this.body = options.body;\n    this.protocol = options.protocol\n      ? options.protocol.substr(-1) !== \":\"\n        ? `${options.protocol}:`\n        : options.protocol\n      : \"https:\";\n    this.path = options.path ? (options.path.charAt(0) !== \"/\" ? `/${options.path}` : options.path) : \"/\";\n  }\n\n  static isInstance(request: unknown): request is HttpRequest {\n    //determine if request is a valid httpRequest\n    if (!request) return false;\n    const req: any = request;\n    return (\n      \"method\" in req &&\n      \"protocol\" in req &&\n      \"hostname\" in req &&\n      \"path\" in req &&\n      typeof req[\"query\"] === \"object\" &&\n      typeof req[\"headers\"] === \"object\"\n    );\n  }\n\n  clone(): HttpRequest {\n    const cloned = new HttpRequest({\n      ...this,\n      headers: { ...this.headers },\n    });\n    if (cloned.query) cloned.query = cloneQuery(cloned.query);\n    return cloned;\n  }\n}\n\nfunction cloneQuery(query: QueryParameterBag): QueryParameterBag {\n  return Object.keys(query).reduce((carry: QueryParameterBag, paramName: string) => {\n    const param = query[paramName];\n    return {\n      ...carry,\n      [paramName]: Array.isArray(param) ? [...param] : param,\n    };\n  }, {});\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}