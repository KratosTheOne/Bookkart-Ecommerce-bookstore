{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetTextDetectionRequest, GetTextDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetTextDetectionCommand, serializeAws_json1_1GetTextDetectionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the text detection results of a Amazon Rekognition Video analysis started by <a>StartTextDetection</a>.</p>\n *          <p>Text detection with Amazon Rekognition Video is an asynchronous operation. You start text detection by\n *      calling <a>StartTextDetection</a> which returns a job identifier (<code>JobId</code>)\n *      When the text detection operation finishes, Amazon Rekognition publishes a completion status to the Amazon Simple Notification Service\n *      topic registered in the initial call to <code>StartTextDetection</code>. To get the results\n *      of the text detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *      if so, call <code>GetTextDetection</code> and pass the job identifier (<code>JobId</code>) from the initial call\n *      of <code>StartLabelDetection</code>.</p>\n *          <p>\n *             <code>GetTextDetection</code> returns an array of detected text (<code>TextDetections</code>) sorted by\n *        the time the text was detected, up to 50 words per frame of video.</p>\n *          <p>Each element of the array includes the detected text, the precentage confidence in the acuracy\n *        of the detected text, the time the text was detected, bounding box information for where the text\n *        was located, and unique identifiers for words and their lines.</p>\n *          <p>Use MaxResults parameter to limit the number of text detections returned. If there are more results than\n *      specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains\n *      a pagination token for getting the next set of results. To get the next page of results, call <code>GetTextDetection</code>\n *      and populate the <code>NextToken</code> request parameter with the token value returned from the previous\n *      call to <code>GetTextDetection</code>.</p>\n */\n\nvar GetTextDetectionCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetTextDetectionCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetTextDetectionCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetTextDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetTextDetectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetTextDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetTextDetectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetTextDetectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetTextDetectionCommand(input, context);\n  };\n\n  GetTextDetectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetTextDetectionCommand(output, context);\n  };\n\n  return GetTextDetectionCommand;\n}($Command);\n\nexport { GetTextDetectionCommand };","map":{"version":3,"sources":["../../../commands/GetTextDetectionCommand.ts"],"names":[],"mappings":";AACA,SAAS,uBAAT,EAAkC,wBAAlC,QAAkE,oBAAlE;AACA,SACE,6CADF,EAEE,2CAFF,QAGO,0BAHP;AAIA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;AAoBG;;AACH,IAAA,uBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6C,EAAA,SAAA,CAAA,uBAAA,EAAA,MAAA,CAAA,CAA7C,CAKE;AACA;;;AAEA,WAAA,uBAAA,CAAqB,KAArB,EAAwD;AAAxD,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAAmC,CAGtD;AACD;AAED;;AAEG;;;AACH,EAAA,uBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,mBAAnB;AACA,QAAM,WAAW,GAAG,yBAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,uBAAuB,CAAC,kBAJM;AAKvD,MAAA,wBAAwB,EAAE,wBAAwB,CAAC;AALI,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GAzBD;;AA2BQ,EAAA,uBAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAAuD,OAAvD,EAA8E;AAC5E,WAAO,2CAA2C,CAAC,KAAD,EAAQ,OAAR,CAAlD;AACD,GAFO;;AAIA,EAAA,uBAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,6CAA6C,CAAC,MAAD,EAAS,OAAT,CAApD;AACD,GAFO;;AAMV,SAAA,uBAAA;AAAC,CAtDD,CAA6C,QAA7C,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { GetTextDetectionRequest, GetTextDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetTextDetectionCommand, serializeAws_json1_1GetTextDetectionCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the text detection results of a Amazon Rekognition Video analysis started by <a>StartTextDetection</a>.</p>\n *          <p>Text detection with Amazon Rekognition Video is an asynchronous operation. You start text detection by\n *      calling <a>StartTextDetection</a> which returns a job identifier (<code>JobId</code>)\n *      When the text detection operation finishes, Amazon Rekognition publishes a completion status to the Amazon Simple Notification Service\n *      topic registered in the initial call to <code>StartTextDetection</code>. To get the results\n *      of the text detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *      if so, call <code>GetTextDetection</code> and pass the job identifier (<code>JobId</code>) from the initial call\n *      of <code>StartLabelDetection</code>.</p>\n *          <p>\n *             <code>GetTextDetection</code> returns an array of detected text (<code>TextDetections</code>) sorted by\n *        the time the text was detected, up to 50 words per frame of video.</p>\n *          <p>Each element of the array includes the detected text, the precentage confidence in the acuracy\n *        of the detected text, the time the text was detected, bounding box information for where the text\n *        was located, and unique identifiers for words and their lines.</p>\n *          <p>Use MaxResults parameter to limit the number of text detections returned. If there are more results than\n *      specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains\n *      a pagination token for getting the next set of results. To get the next page of results, call <code>GetTextDetection</code>\n *      and populate the <code>NextToken</code> request parameter with the token value returned from the previous\n *      call to <code>GetTextDetection</code>.</p>\n */\nvar GetTextDetectionCommand = /** @class */ (function (_super) {\n    __extends(GetTextDetectionCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function GetTextDetectionCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    GetTextDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"RekognitionClient\";\n        var commandName = \"GetTextDetectionCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: GetTextDetectionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: GetTextDetectionResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    GetTextDetectionCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1GetTextDetectionCommand(input, context);\n    };\n    GetTextDetectionCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1GetTextDetectionCommand(output, context);\n    };\n    return GetTextDetectionCommand;\n}($Command));\nexport { GetTextDetectionCommand };\n//# sourceMappingURL=GetTextDetectionCommand.js.map"]},"metadata":{},"sourceType":"module"}