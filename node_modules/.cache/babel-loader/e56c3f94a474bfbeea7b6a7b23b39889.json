{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { validate as validateArn } from \"@aws-sdk/util-arn-parser\";\n/**\n * @internal\n */\n\nexport function validateBucketNameMiddleware() {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var Bucket, err;\n        return __generator(this, function (_a) {\n          Bucket = args.input.Bucket;\n\n          if (typeof Bucket === \"string\" && !validateArn(Bucket) && Bucket.indexOf(\"/\") >= 0) {\n            err = new Error(\"Bucket name shouldn't contain '/', received '\" + Bucket + \"'\");\n            err.name = \"InvalidBucketName\";\n            throw err;\n          }\n\n          return [2\n          /*return*/\n          , next(__assign({}, args))];\n        });\n      });\n    };\n  };\n}\n/**\n * @internal\n */\n\nexport var validateBucketNameMiddlewareOptions = {\n  step: \"initialize\",\n  tags: [\"VALIDATE_BUCKET_NAME\"],\n  name: \"validateBucketNameMiddleware\",\n  override: true\n};\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport var getValidateBucketNamePlugin = function (unused) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/validate-bucket-name.ts"],"names":[],"mappings":";AASA,SAAS,QAAQ,IAAI,WAArB,QAAwC,0BAAxC;AAEA;;AAEG;;AACH,OAAM,SAAU,4BAAV,GAAsC;AAA5C,MAAA,KAAA,GAAA,IAAA;;AACE,SAAO,UACL,IADK,EAC+B;AACD,WAAA,UACnC,IADmC,EACE;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;AAG1B,UAAA,MAAM,GACb,IAAI,CAAA,KAAJ,CADa,MAAN;;AAEX,cAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,CAAC,WAAW,CAAC,MAAD,CAA1C,IAAsD,MAAM,CAAC,OAAP,CAAe,GAAf,KAAuB,CAAjF,EAAoF;AAC5E,YAAA,GAAG,GAAG,IAAI,KAAJ,CAAU,kDAAgD,MAAhD,GAAsD,GAAhE,CAAN;AACN,YAAA,GAAG,CAAC,IAAJ,GAAW,mBAAX;AACA,kBAAM,GAAN;AACD;;AACD,iBAAA,CAAA;AAAA;AAAA,YAAO,IAAI,CAAA,QAAA,CAAA,EAAA,EAAM,IAAN,CAAA,CAAX,CAAA;;OAVqC,CAAA;AADF,KAAA;AAYpC,GAdD;AAeD;AAED;;AAEG;;AACH,OAAO,IAAM,mCAAmC,GAA6B;AAC3E,EAAA,IAAI,EAAE,YADqE;AAE3E,EAAA,IAAI,EAAE,CAAC,sBAAD,CAFqE;AAG3E,EAAA,IAAI,EAAE,8BAHqE;AAI3E,EAAA,QAAQ,EAAE;AAJiE,CAAtE;AAOP;;AAEG;AACH;;AACA,OAAO,IAAM,2BAA2B,GAAG,UAAC,MAAD,EAAY;AAA0B,SAAC;AAChF,IAAA,YAAY,EAAE,UAAC,WAAD,EAAY;AACxB,MAAA,WAAW,CAAC,GAAZ,CAAgB,4BAA4B,EAA5C,EAAgD,mCAAhD;AACD;AAH+E,GAAD;AAI/E,CAJK","sourcesContent":["import {\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  InitializeMiddleware,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\nimport { validate as validateArn } from \"@aws-sdk/util-arn-parser\";\n\n/**\n * @internal\n */\nexport function validateBucketNameMiddleware(): InitializeMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: InitializeHandler<any, Output>\n  ): InitializeHandler<any, Output> => async (\n    args: InitializeHandlerArguments<any>\n  ): Promise<InitializeHandlerOutput<Output>> => {\n    const {\n      input: { Bucket },\n    } = args;\n    if (typeof Bucket === \"string\" && !validateArn(Bucket) && Bucket.indexOf(\"/\") >= 0) {\n      const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);\n      err.name = \"InvalidBucketName\";\n      throw err;\n    }\n    return next({ ...args });\n  };\n}\n\n/**\n * @internal\n */\nexport const validateBucketNameMiddlewareOptions: InitializeHandlerOptions = {\n  step: \"initialize\",\n  tags: [\"VALIDATE_BUCKET_NAME\"],\n  name: \"validateBucketNameMiddleware\",\n  override: true,\n};\n\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const getValidateBucketNamePlugin = (unused: any): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}