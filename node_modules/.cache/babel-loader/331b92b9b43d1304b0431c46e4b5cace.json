{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PostTextRequest, PostTextResponse } from \"../models/models_0\";\nimport { deserializeAws_restJson1PostTextCommand, serializeAws_restJson1PostTextCommand } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Sends user input to Amazon Lex. Client applications can use this API to send requests to\n *       Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it\n *       built for the bot. </p>\n *          <p> In response, Amazon Lex returns the next <code>message</code> to convey to the user an\n *       optional <code>responseCard</code> to display. Consider the following example messages: </p>\n *          <ul>\n *             <li>\n *                <p> For a user input \"I would like a pizza\", Amazon Lex might return a response with a\n *           message eliciting slot data (for example, PizzaSize): \"What size pizza would you like?\"\n *         </p>\n *             </li>\n *             <li>\n *                <p> After the user provides all of the pizza order information, Amazon Lex might return a\n *           response with a message to obtain user confirmation \"Proceed with the pizza order?\".\n *         </p>\n *             </li>\n *             <li>\n *                <p> After the user replies to a confirmation prompt with a \"yes\", Amazon Lex might return\n *           a conclusion statement: \"Thank you, your cheese pizza has been ordered.\". </p>\n *             </li>\n *          </ul>\n *\n *          <p> Not all Amazon Lex messages require a user response. For example, a conclusion statement\n *       does not require a response. Some messages require only a \"yes\" or \"no\" user response. In\n *       addition to the <code>message</code>, Amazon Lex provides additional context about the message\n *       in the response that you might use to enhance client behavior, for example, to display the\n *       appropriate client user interface. These are the <code>slotToElicit</code>,\n *         <code>dialogState</code>, <code>intentName</code>, and <code>slots</code> fields in the\n *       response. Consider the following examples: </p>\n *\n *          <ul>\n *             <li>\n *                <p>If the message is to elicit slot data, Amazon Lex returns the following context\n *           information:</p>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <code>dialogState</code> set to ElicitSlot </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>intentName</code> set to the intent name in the current context </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>slotToElicit</code> set to the slot name for which the <code>message</code> is\n *               eliciting information </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>slots</code> set to a map of slots, configured for the intent, with currently\n *               known values </p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <p> If the message is a confirmation prompt, the <code>dialogState</code> is set to\n *           ConfirmIntent and <code>SlotToElicit</code> is set to null. </p>\n *             </li>\n *             <li>\n *                <p>If the message is a clarification prompt (configured for the intent) that indicates\n *           that user intent is not understood, the <code>dialogState</code> is set to ElicitIntent\n *           and <code>slotToElicit</code> is set to null. </p>\n *             </li>\n *          </ul>\n *\n *          <p> In addition, Amazon Lex also returns your application-specific\n *         <code>sessionAttributes</code>. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing Conversation Context</a>. </p>\n */\n\nvar PostTextCommand =\n/** @class */\nfunction (_super) {\n  __extends(PostTextCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PostTextCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PostTextCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"LexRuntimeServiceClient\";\n    var commandName = \"PostTextCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PostTextRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: PostTextResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PostTextCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restJson1PostTextCommand(input, context);\n  };\n\n  PostTextCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restJson1PostTextCommand(output, context);\n  };\n\n  return PostTextCommand;\n}($Command);\n\nexport { PostTextCommand };","map":{"version":3,"sources":["../../../commands/PostTextCommand.ts"],"names":[],"mappings":";AAKA,SAAS,eAAT,EAA0B,gBAA1B,QAAkD,oBAAlD;AACA,SACE,uCADF,EAEE,qCAFF,QAGO,4BAHP;AAIA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEG;;AACH,IAAA,eAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAqC,EAAA,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA,CAArC,CAKE;AACA;;;AAEA,WAAA,eAAA,CAAqB,KAArB,EAAgD;AAAhD,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAA2B,CAG9C;AACD;AAED;;AAEG;;;AACH,EAAA,eAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,yBAAnB;AACA,QAAM,WAAW,GAAG,iBAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,eAAe,CAAC,kBAJc;AAKvD,MAAA,wBAAwB,EAAE,gBAAgB,CAAC;AALY,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GAzBD;;AA2BQ,EAAA,eAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAA+C,OAA/C,EAAsE;AACpE,WAAO,qCAAqC,CAAC,KAAD,EAAQ,OAAR,CAA5C;AACD,GAFO;;AAIA,EAAA,eAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,uCAAuC,CAAC,MAAD,EAAS,OAAT,CAA9C;AACD,GAFO;;AAMV,SAAA,eAAA;AAAC,CAtDD,CAAqC,QAArC,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { PostTextRequest, PostTextResponse } from \"../models/models_0\";\nimport { deserializeAws_restJson1PostTextCommand, serializeAws_restJson1PostTextCommand, } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Sends user input to Amazon Lex. Client applications can use this API to send requests to\n *       Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it\n *       built for the bot. </p>\n *          <p> In response, Amazon Lex returns the next <code>message</code> to convey to the user an\n *       optional <code>responseCard</code> to display. Consider the following example messages: </p>\n *          <ul>\n *             <li>\n *                <p> For a user input \"I would like a pizza\", Amazon Lex might return a response with a\n *           message eliciting slot data (for example, PizzaSize): \"What size pizza would you like?\"\n *         </p>\n *             </li>\n *             <li>\n *                <p> After the user provides all of the pizza order information, Amazon Lex might return a\n *           response with a message to obtain user confirmation \"Proceed with the pizza order?\".\n *         </p>\n *             </li>\n *             <li>\n *                <p> After the user replies to a confirmation prompt with a \"yes\", Amazon Lex might return\n *           a conclusion statement: \"Thank you, your cheese pizza has been ordered.\". </p>\n *             </li>\n *          </ul>\n *\n *          <p> Not all Amazon Lex messages require a user response. For example, a conclusion statement\n *       does not require a response. Some messages require only a \"yes\" or \"no\" user response. In\n *       addition to the <code>message</code>, Amazon Lex provides additional context about the message\n *       in the response that you might use to enhance client behavior, for example, to display the\n *       appropriate client user interface. These are the <code>slotToElicit</code>,\n *         <code>dialogState</code>, <code>intentName</code>, and <code>slots</code> fields in the\n *       response. Consider the following examples: </p>\n *\n *          <ul>\n *             <li>\n *                <p>If the message is to elicit slot data, Amazon Lex returns the following context\n *           information:</p>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <code>dialogState</code> set to ElicitSlot </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>intentName</code> set to the intent name in the current context </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>slotToElicit</code> set to the slot name for which the <code>message</code> is\n *               eliciting information </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>slots</code> set to a map of slots, configured for the intent, with currently\n *               known values </p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <p> If the message is a confirmation prompt, the <code>dialogState</code> is set to\n *           ConfirmIntent and <code>SlotToElicit</code> is set to null. </p>\n *             </li>\n *             <li>\n *                <p>If the message is a clarification prompt (configured for the intent) that indicates\n *           that user intent is not understood, the <code>dialogState</code> is set to ElicitIntent\n *           and <code>slotToElicit</code> is set to null. </p>\n *             </li>\n *          </ul>\n *\n *          <p> In addition, Amazon Lex also returns your application-specific\n *         <code>sessionAttributes</code>. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing Conversation Context</a>. </p>\n */\nvar PostTextCommand = /** @class */ (function (_super) {\n    __extends(PostTextCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function PostTextCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    PostTextCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"LexRuntimeServiceClient\";\n        var commandName = \"PostTextCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: PostTextRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: PostTextResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    PostTextCommand.prototype.serialize = function (input, context) {\n        return serializeAws_restJson1PostTextCommand(input, context);\n    };\n    PostTextCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_restJson1PostTextCommand(output, context);\n    };\n    return PostTextCommand;\n}($Command));\nexport { PostTextCommand };\n//# sourceMappingURL=PostTextCommand.js.map"]},"metadata":{},"sourceType":"module"}