{"ast":null,"code":"var fallbackWindow = {};\n/**\n * Locates the global scope for a browser or browser-like environment. If\n * neither `window` nor `self` is defined by the environment, the same object\n * will be returned on each invocation.\n */\n\nexport function locateWindow() {\n  if (typeof window !== \"undefined\") {\n    return window;\n  } else if (typeof self !== \"undefined\") {\n    return self;\n  }\n\n  return fallbackWindow;\n}","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,IAAM,cAAc,GAAG,EAAvB;AAEA;;;;;;AAKA,OAAM,SAAU,YAAV,GAAsB;AAC1B,MAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAO,MAAP;AACD,GAFD,MAEO,IAAI,OAAO,IAAP,KAAgB,WAApB,EAAiC;AACtC,WAAO,IAAP;AACD;;AAED,SAAO,cAAP;AACD","sourcesContent":["const fallbackWindow = {} as Window;\n\n/**\n * Locates the global scope for a browser or browser-like environment. If\n * neither `window` nor `self` is defined by the environment, the same object\n * will be returned on each invocation.\n */\nexport function locateWindow(): Window {\n  if (typeof window !== \"undefined\") {\n    return window;\n  } else if (typeof self !== \"undefined\") {\n    return self;\n  }\n\n  return fallbackWindow;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}