{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar constants_1 = require(\"./constants\");\n\nvar RawSha256_1 = require(\"./RawSha256\");\n\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\n\nvar Sha256 =\n/** @class */\nfunction () {\n  function Sha256(secret) {\n    this.hash = new RawSha256_1.RawSha256();\n\n    if (secret) {\n      this.outer = new RawSha256_1.RawSha256();\n      var inner = bufferFromSecret(secret);\n      var outer = new Uint8Array(constants_1.BLOCK_SIZE);\n      outer.set(inner);\n\n      for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n\n      this.hash.update(inner);\n      this.outer.update(outer); // overwrite the copied key in memory\n\n      for (var i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  }\n\n  Sha256.prototype.update = function (toHash) {\n    if (isEmptyData(toHash) || this.error) {\n      return;\n    }\n\n    try {\n      this.hash.update(convertToBuffer(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  };\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n\n\n  Sha256.prototype.digestSync = function () {\n    if (this.error) {\n      throw this.error;\n    }\n\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n\n      return this.outer.digest();\n    }\n\n    return this.hash.digest();\n  };\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n\n\n  Sha256.prototype.digest = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.digestSync()];\n      });\n    });\n  };\n\n  return Sha256;\n}();\n\nexports.Sha256 = Sha256;\n\nfunction bufferFromSecret(secret) {\n  var input = convertToBuffer(secret);\n\n  if (input.byteLength > constants_1.BLOCK_SIZE) {\n    var bufferHash = new RawSha256_1.RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n\n  var buffer = new Uint8Array(constants_1.BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}\n\nfunction isEmptyData(data) {\n  if (typeof data === \"string\") {\n    return data.length === 0;\n  }\n\n  return data.byteLength === 0;\n}\n\nfunction convertToBuffer(data) {\n  if (typeof data === \"string\") {\n    return util_utf8_browser_1.fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n  }\n\n  return new Uint8Array(data);\n}","map":{"version":3,"sources":["../src/jsSha256.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar constants_1 = require(\"./constants\");\nvar RawSha256_1 = require(\"./RawSha256\");\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\nvar Sha256 = /** @class */ (function () {\n    function Sha256(secret) {\n        this.hash = new RawSha256_1.RawSha256();\n        if (secret) {\n            this.outer = new RawSha256_1.RawSha256();\n            var inner = bufferFromSecret(secret);\n            var outer = new Uint8Array(constants_1.BLOCK_SIZE);\n            outer.set(inner);\n            for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n                inner[i] ^= 0x36;\n                outer[i] ^= 0x5c;\n            }\n            this.hash.update(inner);\n            this.outer.update(outer);\n            // overwrite the copied key in memory\n            for (var i = 0; i < inner.byteLength; i++) {\n                inner[i] = 0;\n            }\n        }\n    }\n    Sha256.prototype.update = function (toHash) {\n        if (isEmptyData(toHash) || this.error) {\n            return;\n        }\n        try {\n            this.hash.update(convertToBuffer(toHash));\n        }\n        catch (e) {\n            this.error = e;\n        }\n    };\n    /* This synchronous method keeps compatibility\n     * with the v2 aws-sdk.\n     */\n    Sha256.prototype.digestSync = function () {\n        if (this.error) {\n            throw this.error;\n        }\n        if (this.outer) {\n            if (!this.outer.finished) {\n                this.outer.update(this.hash.digest());\n            }\n            return this.outer.digest();\n        }\n        return this.hash.digest();\n    };\n    /* The underlying digest method here is synchronous.\n     * To keep the same interface with the other hash functions\n     * the default is to expose this as an async method.\n     * However, it can sometimes be useful to have a sync method.\n     */\n    Sha256.prototype.digest = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this.digestSync()];\n            });\n        });\n    };\n    return Sha256;\n}());\nexports.Sha256 = Sha256;\nfunction bufferFromSecret(secret) {\n    var input = convertToBuffer(secret);\n    if (input.byteLength > constants_1.BLOCK_SIZE) {\n        var bufferHash = new RawSha256_1.RawSha256();\n        bufferHash.update(input);\n        input = bufferHash.digest();\n    }\n    var buffer = new Uint8Array(constants_1.BLOCK_SIZE);\n    buffer.set(input);\n    return buffer;\n}\nfunction isEmptyData(data) {\n    if (typeof data === \"string\") {\n        return data.length === 0;\n    }\n    return data.byteLength === 0;\n}\nfunction convertToBuffer(data) {\n    if (typeof data === \"string\") {\n        return util_utf8_browser_1.fromUtf8(data);\n    }\n    if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n    }\n    return new Uint8Array(data);\n}\n//# sourceMappingURL=jsSha256.js.map"]},"metadata":{},"sourceType":"script"}