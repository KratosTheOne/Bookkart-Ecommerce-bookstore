{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar constants_1 = require(\"./constants\");\n/**\n * Calculate a capped, fully-jittered exponential backoff time.\n */\n\n\nfunction defaultDelayDecider(delayBase, attempts) {\n  return Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * Math.pow(2, attempts) * delayBase));\n}\n\nexports.defaultDelayDecider = defaultDelayDecider;","map":{"version":3,"sources":["../src/delayDecider.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;;;;AAGA,SAAgB,mBAAhB,CACE,SADF,EAEE,QAFF,EAEkB;AAEhB,SAAO,IAAI,CAAC,KAAL,CACL,IAAI,CAAC,GAAL,CAAS,WAAA,CAAA,mBAAT,EAA8B,IAAI,CAAC,MAAL,KAAgB,IAAA,CAAA,GAAA,CAAA,CAAA,EAAK,QAAL,CAAhB,GAAgC,SAA9D,CADK,CAAP;AAGD;;AAPD,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourcesContent":["import { MAXIMUM_RETRY_DELAY } from \"./constants\";\n\n/**\n * Calculate a capped, fully-jittered exponential backoff time.\n */\nexport function defaultDelayDecider(\n  delayBase: number,\n  attempts: number\n): number {\n  return Math.floor(\n    Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase)\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}