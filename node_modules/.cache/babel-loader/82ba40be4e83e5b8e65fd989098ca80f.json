{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar escape_attribute_1 = require(\"./escape-attribute\");\n/**\n * Represents an XML node.\n */\n\n\nvar XmlNode =\n/** @class */\nfunction () {\n  function XmlNode(name, children) {\n    if (children === void 0) {\n      children = [];\n    }\n\n    this.name = name;\n    this.children = children;\n    this.attributes = {};\n  }\n\n  XmlNode.prototype.withName = function (name) {\n    this.name = name;\n    return this;\n  };\n\n  XmlNode.prototype.addAttribute = function (name, value) {\n    this.attributes[name] = value;\n    return this;\n  };\n\n  XmlNode.prototype.addChildNode = function (child) {\n    this.children.push(child);\n    return this;\n  };\n\n  XmlNode.prototype.removeAttribute = function (name) {\n    delete this.attributes[name];\n    return this;\n  };\n\n  XmlNode.prototype.toString = function () {\n    var hasChildren = Boolean(this.children.length);\n    var xmlText = \"<\" + this.name; // add attributes\n\n    var attributes = this.attributes;\n\n    for (var _i = 0, _a = Object.keys(attributes); _i < _a.length; _i++) {\n      var attributeName = _a[_i];\n      var attribute = attributes[attributeName];\n\n      if (typeof attribute !== \"undefined\" && attribute !== null) {\n        xmlText += \" \" + attributeName + \"=\\\"\" + escape_attribute_1.escapeAttribute(\"\" + attribute) + \"\\\"\";\n      }\n    }\n\n    return xmlText += !hasChildren ? \"/>\" : \">\" + this.children.map(function (c) {\n      return c.toString();\n    }).join(\"\") + \"</\" + this.name + \">\";\n  };\n\n  return XmlNode;\n}();\n\nexports.XmlNode = XmlNode;","map":{"version":3,"sources":["../src/XmlNode.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AAGA;;;;;AAGA,IAAA,OAAA;AAAA;AAAA,YAAA;AAGE,WAAA,OAAA,CACU,IADV,EAEkB,QAFlB,EAE6C;AAA3B,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,EAAA;AAA2B;;AADnC,SAAA,IAAA,GAAA,IAAA;AACQ,SAAA,QAAA,GAAA,QAAA;AAJV,SAAA,UAAA,GAAsC,EAAtC;AAKJ;;AAEJ,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,IAAT,EAAqB;AACnB,SAAK,IAAL,GAAY,IAAZ;AACA,WAAO,IAAP;AACD,GAHD;;AAKA,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,IAAb,EAA2B,KAA3B,EAAqC;AACnC,SAAK,UAAL,CAAgB,IAAhB,IAAwB,KAAxB;AACA,WAAO,IAAP;AACD,GAHD;;AAKA,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,KAAb,EAA8B;AAC5B,SAAK,QAAL,CAAc,IAAd,CAAmB,KAAnB;AACA,WAAO,IAAP;AACD,GAHD;;AAKA,EAAA,OAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,IAAhB,EAA4B;AAC1B,WAAO,KAAK,UAAL,CAAgB,IAAhB,CAAP;AACA,WAAO,IAAP;AACD,GAHD;;AAKA,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,QAAM,WAAW,GAAG,OAAO,CAAC,KAAK,QAAL,CAAc,MAAf,CAA3B;AACA,QAAI,OAAO,GAAG,MAAI,KAAK,IAAvB,CAFF,CAGE;;AACA,QAAM,UAAU,GAAG,KAAK,UAAxB;;AACA,SAA0B,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,MAAM,CAAC,IAAP,CAAY,UAAZ,CAA1B,EAA0B,EAAA,GAAA,EAAA,CAAA,MAA1B,EAA0B,EAAA,EAA1B,EAAmD;AAA9C,UAAI,aAAa,GAAA,EAAA,CAAA,EAAA,CAAjB;AACH,UAAI,SAAS,GAAG,UAAU,CAAC,aAAD,CAA1B;;AACA,UAAI,OAAO,SAAP,KAAqB,WAArB,IAAoC,SAAS,KAAK,IAAtD,EAA4D;AAC1D,QAAA,OAAO,IAAI,MAAI,aAAJ,GAAiB,KAAjB,GAAsB,kBAAA,CAAA,eAAA,CAAgB,KAAK,SAArB,CAAtB,GAAqD,IAAhE;AACD;AACF;;AAED,WAAQ,OAAO,IAAI,CAAC,WAAD,GACf,IADe,GAEf,MAAI,KAAK,QAAL,CAAc,GAAd,CAAkB,UAAA,CAAA,EAAC;AAAI,aAAA,CAAC,CAAD,QAAA,EAAA;AAAY,KAAnC,EAAqC,IAArC,CAA0C,EAA1C,CAAJ,GAAiD,IAAjD,GAAsD,KAAK,IAA3D,GAA+D,GAFnE;AAGD,GAfD;;AAgBF,SAAA,OAAA;AAAC,CA5CD,EAAA;;AAAa,OAAA,CAAA,OAAA,GAAA,OAAA","sourcesContent":["import { escapeAttribute } from \"./escape-attribute\";\nimport { Stringable } from \"./stringable\";\n\n/**\n * Represents an XML node.\n */\nexport class XmlNode {\n  private attributes: { [name: string]: any } = {};\n\n  constructor(\n    private name: string,\n    public readonly children: Stringable[] = []\n  ) {}\n\n  withName(name: string): XmlNode {\n    this.name = name;\n    return this;\n  }\n\n  addAttribute(name: string, value: any): XmlNode {\n    this.attributes[name] = value;\n    return this;\n  }\n\n  addChildNode(child: Stringable): XmlNode {\n    this.children.push(child);\n    return this;\n  }\n\n  removeAttribute(name: string): XmlNode {\n    delete this.attributes[name];\n    return this;\n  }\n\n  toString(): string {\n    const hasChildren = Boolean(this.children.length);\n    let xmlText = `<${this.name}`;\n    // add attributes\n    const attributes = this.attributes;\n    for (let attributeName of Object.keys(attributes)) {\n      let attribute = attributes[attributeName];\n      if (typeof attribute !== \"undefined\" && attribute !== null) {\n        xmlText += ` ${attributeName}=\"${escapeAttribute(\"\" + attribute)}\"`;\n      }\n    }\n\n    return (xmlText += !hasChildren\n      ? \"/>\"\n      : `>${this.children.map(c => c.toString()).join(\"\")}</${this.name}>`);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}