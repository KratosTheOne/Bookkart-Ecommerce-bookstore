{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutRecordInput, PutRecordOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1PutRecordCommand, serializeAws_json1_1PutRecordCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Writes a single data record into an Amazon Kinesis data stream. Call\n *                 <code>PutRecord</code> to send data into the stream for real-time ingestion and\n *             subsequent processing, one record at a time. Each shard can support writes up to 1,000\n *             records per second, up to a maximum data write total of 1 MiB per second.</p>\n *         <p>You must specify the name of the stream that captures, stores, and transports the\n *             data; a partition key; and the data blob itself.</p>\n *         <p>The data blob can be any type of data; for example, a segment from a log file,\n *             geographic/location data, website clickstream data, and so on.</p>\n *         <p>The partition key is used by Kinesis Data Streams to distribute data across shards.\n *             Kinesis Data Streams segregates the data records that belong to a stream into multiple\n *             shards, using the partition key associated with each data record to determine the shard\n *             to which a given data record belongs.</p>\n *         <p>Partition keys are Unicode strings, with a maximum length limit of 256 characters\n *             for each key. An MD5 hash function is used to map partition keys to 128-bit integer\n *             values and to map associated data records to shards using the hash key ranges of the\n *             shards. You can override hashing the partition key to determine the shard by explicitly\n *             specifying a hash value using the <code>ExplicitHashKey</code> parameter. For more\n *             information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream\">Adding Data to a Stream</a> in the <i>Amazon Kinesis Data Streams\n *                 Developer Guide</i>.</p>\n *         <p>\n *             <code>PutRecord</code> returns the shard ID of where the data record was placed and the\n *             sequence number that was assigned to the data record.</p>\n *         <p>Sequence numbers increase over time and are specific to a shard within a stream,\n *             not across all shards within a stream. To guarantee strictly increasing ordering, write\n *             serially to a shard and use the <code>SequenceNumberForOrdering</code> parameter. For\n *             more information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream\">Adding Data to a Stream</a> in the <i>Amazon Kinesis Data Streams\n *                 Developer Guide</i>.</p>\n *         <important>\n *             <p>After you write a record to a stream, you cannot modify that record or its order\n *                 within the stream.</p>\n *         </important>\n *         <p>If a <code>PutRecord</code> request cannot be processed because of insufficient\n *             provisioned throughput on the shard involved in the request, <code>PutRecord</code>\n *             throws <code>ProvisionedThroughputExceededException</code>. </p>\n *         <p>By default, data records are accessible for 24 hours from the time that they are\n *             added to a stream. You can use <a>IncreaseStreamRetentionPeriod</a> or <a>DecreaseStreamRetentionPeriod</a> to modify this retention period.</p>\n */\n\nvar PutRecordCommand =\n/** @class */\nfunction (_super) {\n  __extends(PutRecordCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PutRecordCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PutRecordCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"PutRecordCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutRecordInput.filterSensitiveLog,\n      outputFilterSensitiveLog: PutRecordOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutRecordCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1PutRecordCommand(input, context);\n  };\n\n  PutRecordCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1PutRecordCommand(output, context);\n  };\n\n  return PutRecordCommand;\n}($Command);\n\nexport { PutRecordCommand };","map":{"version":3,"sources":["../../../commands/PutRecordCommand.ts"],"names":[],"mappings":";AACA,SAAS,cAAT,EAAyB,eAAzB,QAAgD,oBAAhD;AACA,SAAS,sCAAT,EAAiD,oCAAjD,QAA6F,0BAA7F;AACA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCG;;AACH,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsC,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA,CAAtC,CAKE;AACA;;;AAEA,WAAA,gBAAA,CAAqB,KAArB,EAAiD;AAAjD,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAA4B,CAG/C;AACD;AAED;;AAEG;;;AACH,EAAA,gBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,eAAnB;AACA,QAAM,WAAW,GAAG,kBAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,cAAc,CAAC,kBAJe;AAKvD,MAAA,wBAAwB,EAAE,eAAe,CAAC;AALa,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GAzBD;;AA2BQ,EAAA,gBAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAAgD,OAAhD,EAAuE;AACrE,WAAO,oCAAoC,CAAC,KAAD,EAAQ,OAAR,CAA3C;AACD,GAFO;;AAIA,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,sCAAsC,CAAC,MAAD,EAAS,OAAT,CAA7C;AACD,GAFO;;AAMV,SAAA,gBAAA;AAAC,CAtDD,CAAsC,QAAtC,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { PutRecordInput, PutRecordOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1PutRecordCommand, serializeAws_json1_1PutRecordCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Writes a single data record into an Amazon Kinesis data stream. Call\n *                 <code>PutRecord</code> to send data into the stream for real-time ingestion and\n *             subsequent processing, one record at a time. Each shard can support writes up to 1,000\n *             records per second, up to a maximum data write total of 1 MiB per second.</p>\n *         <p>You must specify the name of the stream that captures, stores, and transports the\n *             data; a partition key; and the data blob itself.</p>\n *         <p>The data blob can be any type of data; for example, a segment from a log file,\n *             geographic/location data, website clickstream data, and so on.</p>\n *         <p>The partition key is used by Kinesis Data Streams to distribute data across shards.\n *             Kinesis Data Streams segregates the data records that belong to a stream into multiple\n *             shards, using the partition key associated with each data record to determine the shard\n *             to which a given data record belongs.</p>\n *         <p>Partition keys are Unicode strings, with a maximum length limit of 256 characters\n *             for each key. An MD5 hash function is used to map partition keys to 128-bit integer\n *             values and to map associated data records to shards using the hash key ranges of the\n *             shards. You can override hashing the partition key to determine the shard by explicitly\n *             specifying a hash value using the <code>ExplicitHashKey</code> parameter. For more\n *             information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream\">Adding Data to a Stream</a> in the <i>Amazon Kinesis Data Streams\n *                 Developer Guide</i>.</p>\n *         <p>\n *             <code>PutRecord</code> returns the shard ID of where the data record was placed and the\n *             sequence number that was assigned to the data record.</p>\n *         <p>Sequence numbers increase over time and are specific to a shard within a stream,\n *             not across all shards within a stream. To guarantee strictly increasing ordering, write\n *             serially to a shard and use the <code>SequenceNumberForOrdering</code> parameter. For\n *             more information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream\">Adding Data to a Stream</a> in the <i>Amazon Kinesis Data Streams\n *                 Developer Guide</i>.</p>\n *         <important>\n *             <p>After you write a record to a stream, you cannot modify that record or its order\n *                 within the stream.</p>\n *         </important>\n *         <p>If a <code>PutRecord</code> request cannot be processed because of insufficient\n *             provisioned throughput on the shard involved in the request, <code>PutRecord</code>\n *             throws <code>ProvisionedThroughputExceededException</code>. </p>\n *         <p>By default, data records are accessible for 24 hours from the time that they are\n *             added to a stream. You can use <a>IncreaseStreamRetentionPeriod</a> or <a>DecreaseStreamRetentionPeriod</a> to modify this retention period.</p>\n */\nvar PutRecordCommand = /** @class */ (function (_super) {\n    __extends(PutRecordCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function PutRecordCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    PutRecordCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"KinesisClient\";\n        var commandName = \"PutRecordCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: PutRecordInput.filterSensitiveLog,\n            outputFilterSensitiveLog: PutRecordOutput.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    PutRecordCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1PutRecordCommand(input, context);\n    };\n    PutRecordCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1PutRecordCommand(output, context);\n    };\n    return PutRecordCommand;\n}($Command));\nexport { PutRecordCommand };\n//# sourceMappingURL=PutRecordCommand.js.map"]},"metadata":{},"sourceType":"module"}