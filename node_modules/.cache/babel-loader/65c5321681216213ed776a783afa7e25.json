{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar protocol_http_1 = require(\"@aws-sdk/protocol-http\");\n\nfunction addExpectContinueMiddleware(options) {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var request;\n        return tslib_1.__generator(this, function (_a) {\n          request = args.request;\n\n          if (protocol_http_1.HttpRequest.isInstance(request) && request.body && options.runtime === \"node\") {\n            request.headers = tslib_1.__assign(tslib_1.__assign({}, request.headers), {\n              Expect: \"100-continue\"\n            });\n          }\n\n          return [2\n          /*return*/\n          , next(tslib_1.__assign(tslib_1.__assign({}, args), {\n            request: request\n          }))];\n        });\n      });\n    };\n  };\n}\n\nexports.addExpectContinueMiddleware = addExpectContinueMiddleware;\nexports.addExpectContinueMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"SET_EXPECT_HEADER\", \"EXPECT_HEADER\"],\n  name: \"addExpectContinueMiddleware\"\n};\n\nexports.getAddExpectContinuePlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(addExpectContinueMiddleware(options), exports.addExpectContinueMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;AASA,IAAA,eAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAMA,SAAgB,2BAAhB,CACE,OADF,EAC6B;AAD7B,MAAA,KAAA,GAAA,IAAA;;AAGE,SAAO,UACL,IADK,EAC0B;AACD,WAAA,UAC9B,IAD8B,EACE;AAAA,aAAA,OAAA,CAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;AAE1B,UAAA,OAAO,GAAK,IAAI,CAAT,OAAP;;AACN,cACE,eAAA,CAAA,WAAA,CAAY,UAAZ,CAAuB,OAAvB,KACA,OAAO,CAAC,IADR,IAEA,OAAO,CAAC,OAAR,KAAoB,MAHtB,EAIE;AACA,YAAA,OAAO,CAAC,OAAR,GAAe,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACV,OAAO,CAAC,OADE,CAAA,EACK;AAClB,cAAA,MAAM,EAAE;AADU,aADL,CAAf;AAID;;AACD,iBAAA,CAAA;AAAA;AAAA,YAAO,IAAI,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACN,IADM,CAAA,EACF;AACP,YAAA,OAAO,EAAA;AADA,WADE,CAAA,CAAX,CAAA;;OAbgC,CAAA;AADF,KAAA;AAkB/B,GApBD;AAqBD;;AAxBD,OAAA,CAAA,2BAAA,GAAA,2BAAA;AA0Ba,OAAA,CAAA,kCAAA,GAA0D;AACrE,EAAA,IAAI,EAAE,OAD+D;AAErE,EAAA,IAAI,EAAE,CAAC,mBAAD,EAAsB,eAAtB,CAF+D;AAGrE,EAAA,IAAI,EAAE;AAH+D,CAA1D;;AAMA,OAAA,CAAA,0BAAA,GAA6B,UACxC,OADwC,EACb;AACH,SAAC;AACzB,IAAA,YAAY,EAAE,UAAA,WAAA,EAAW;AACvB,MAAA,WAAW,CAAC,GAAZ,CACE,2BAA2B,CAAC,OAAD,CAD7B,EAEE,OAAA,CAAA,kCAFF;AAID;AANwB,GAAD;AAOxB,CATW","sourcesContent":["import {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  MetadataBearer,\n  Pluggable\n} from \"@aws-sdk/types\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\n\ninterface PreviouslyResolved {\n  runtime: string;\n}\n\nexport function addExpectContinueMiddleware(\n  options: PreviouslyResolved\n): BuildMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: BuildHandler<any, Output>\n  ): BuildHandler<any, Output> => async (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    let { request } = args;\n    if (\n      HttpRequest.isInstance(request) &&\n      request.body &&\n      options.runtime === \"node\"\n    ) {\n      request.headers = {\n        ...request.headers,\n        Expect: \"100-continue\"\n      };\n    }\n    return next({\n      ...args,\n      request\n    });\n  };\n}\n\nexport const addExpectContinueMiddlewareOptions: BuildHandlerOptions = {\n  step: \"build\",\n  tags: [\"SET_EXPECT_HEADER\", \"EXPECT_HEADER\"],\n  name: \"addExpectContinueMiddleware\"\n};\n\nexport const getAddExpectContinuePlugin = (\n  options: PreviouslyResolved\n): Pluggable<any, any> => ({\n  applyToStack: clientStack => {\n    clientStack.add(\n      addExpectContinueMiddleware(options),\n      addExpectContinueMiddlewareOptions\n    );\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}