{"ast":null,"code":"import { __assign, __values } from \"tslib\";\nimport { cloneRequest } from \"./cloneRequest\";\n/**\n * @internal\n */\n\nexport function moveHeadersToQuery(request, options) {\n  var e_1, _a;\n\n  var _b;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _c = typeof request.clone === \"function\" ? request.clone() : cloneRequest(request),\n      headers = _c.headers,\n      _d = _c.query,\n      query = _d === void 0 ? {} : _d;\n\n  try {\n    for (var _e = __values(Object.keys(headers)), _f = _e.next(); !_f.done; _f = _e.next()) {\n      var name = _f.value;\n      var lname = name.toLowerCase();\n\n      if (lname.substr(0, 6) === \"x-amz-\" && !((_b = options.unhoistableHeaders) === null || _b === void 0 ? void 0 : _b.has(lname))) {\n        query[name] = headers[name];\n        delete headers[name];\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_f && !_f.done && (_a = _e.return)) _a.call(_e);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return __assign(__assign({}, request), {\n    headers: headers,\n    query: query\n  });\n}","map":{"version":3,"sources":["../../src/moveHeadersToQuery.ts"],"names":[],"mappings":";AAEA,SAAS,YAAT,QAA6B,gBAA7B;AAEA;;AAEG;;AACH,OAAM,SAAU,kBAAV,CACJ,OADI,EAEJ,OAFI,EAE8C;;;;;AAAlD,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAAkD;;AAE5C,MAAA,EAAA,GACJ,OAAQ,OAAe,CAAC,KAAxB,KAAkC,UAAlC,GAAgD,OAAe,CAAC,KAAhB,EAAhD,GAA0E,YAAY,CAAC,OAAD,CADlF;AAAA,MAAE,OAAO,GAAA,EAAA,CAAA,OAAT;AAAA,MAAW,EAAA,GAAA,EAAA,CAAA,KAAX;AAAA,MAAW,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAA0B,EAA1C;;;AAEN,SAAmB,IAAA,EAAA,GAAA,QAAA,CAAA,MAAM,CAAC,IAAP,CAAY,OAAZ,CAAA,CAAA,EAAoB,EAAA,GAAA,EAAA,CAAA,IAAA,EAAvC,EAAuC,CAAA,EAAA,CAAA,IAAvC,EAAuC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAvC,EAAyC;AAApC,UAAM,IAAI,GAAA,EAAA,CAAA,KAAV;AACH,UAAM,KAAK,GAAG,IAAI,CAAC,WAAL,EAAd;;AACA,UAAI,KAAK,CAAC,MAAN,CAAa,CAAb,EAAgB,CAAhB,MAAuB,QAAvB,IAAmC,EAAA,CAAA,EAAA,GAAC,OAAO,CAAC,kBAAT,MAA2B,IAA3B,IAA2B,EAAA,KAAA,KAAA,CAA3B,GAA2B,KAAA,CAA3B,GAA2B,EAAA,CAAE,GAAF,CAAM,KAAN,CAA3B,CAAvC,EAAgF;AAC9E,QAAA,KAAK,CAAC,IAAD,CAAL,GAAc,OAAO,CAAC,IAAD,CAArB;AACA,eAAO,OAAO,CAAC,IAAD,CAAd;AACD;AACF;;;;;;;;;;;;;AAED,SAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,OADL,CAAA,EACY;AACV,IAAA,OAAO,EAAA,OADG;AAEV,IAAA,KAAK,EAAA;AAFK,GADZ,CAAA;AAKD","sourcesContent":["import { HttpRequest, QueryParameterBag } from \"@aws-sdk/types\";\n\nimport { cloneRequest } from \"./cloneRequest\";\n\n/**\n * @internal\n */\nexport function moveHeadersToQuery(\n  request: HttpRequest,\n  options: { unhoistableHeaders?: Set<string> } = {}\n): HttpRequest & { query: QueryParameterBag } {\n  const { headers, query = {} as QueryParameterBag } =\n    typeof (request as any).clone === \"function\" ? (request as any).clone() : cloneRequest(request);\n  for (const name of Object.keys(headers)) {\n    const lname = name.toLowerCase();\n    if (lname.substr(0, 6) === \"x-amz-\" && !options.unhoistableHeaders?.has(lname)) {\n      query[name] = headers[name];\n      delete headers[name];\n    }\n  }\n\n  return {\n    ...request,\n    headers,\n    query,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}