{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CompareFacesRequest, CompareFacesResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1CompareFacesCommand, serializeAws_json1_1CompareFacesCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Compares a face in the <i>source</i> input image with\n *       each of the 100 largest faces detected in the <i>target</i> input image.\n *     </p>\n *          <note>\n *             <p> If the source image contains multiple faces, the service detects the largest face\n *         and compares it with each face detected in the target image. </p>\n *          </note>\n *\n *\n *          <p>You pass the input and target images either as base64-encoded image bytes or as\n *       references to images in an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes isn't\n *       supported. The image must be formatted as a PNG or JPEG file. </p>\n *          <p>In response, the operation returns an array of face matches ordered by similarity score\n *       in descending order. For each face match, the response provides a bounding box of the face,\n *       facial landmarks, pose details (pitch, role, and yaw), quality (brightness and sharpness), and\n *       confidence value (indicating the level of confidence that the bounding box contains a face).\n *       The response also provides a similarity score, which indicates how closely the faces match. </p>\n *\n *          <note>\n *             <p>By default, only faces with a similarity score of greater than or equal to 80% are\n *         returned in the response. You can change this value by specifying the\n *           <code>SimilarityThreshold</code> parameter.</p>\n *          </note>\n *\n *          <p>\n *             <code>CompareFaces</code> also returns an array of faces that don't match the source image.\n *       For each face, it returns a bounding box, confidence value, landmarks, pose details, and quality.\n *     The response also returns information about the face in the source image, including the bounding box\n *       of the face and confidence value.</p>\n *\n *          <p>The <code>QualityFilter</code> input parameter allows you to filter out detected faces\n *       that don’t meet a required quality bar. The quality bar is based on a\n *       variety of common use cases.  Use <code>QualityFilter</code> to set the quality bar\n *       by specifying <code>LOW</code>, <code>MEDIUM</code>, or <code>HIGH</code>.\n *       If you do not want to filter detected faces, specify <code>NONE</code>. The default value is <code>NONE</code>. </p>\n *\n *          <p>If the image doesn't contain Exif metadata, <code>CompareFaces</code> returns orientation information for the\n *         source and target images. Use these values to display the images with the correct image orientation.</p>\n *          <p>If no faces are detected in the source or target images, <code>CompareFaces</code> returns an\n *     <code>InvalidParameterException</code> error. </p>\n *\n *\n *          <note>\n *             <p> This is a stateless API operation. That is, data returned by this operation doesn't persist.</p>\n *          </note>\n *\n *\n *          <p>For an example, see Comparing Faces in Images in the Amazon Rekognition Developer Guide.</p>\n *          <p>This operation requires permissions to perform the <code>rekognition:CompareFaces</code>\n *       action.</p>\n */\n\nvar CompareFacesCommand =\n/** @class */\nfunction (_super) {\n  __extends(CompareFacesCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function CompareFacesCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  CompareFacesCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"CompareFacesCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: CompareFacesRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: CompareFacesResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  CompareFacesCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1CompareFacesCommand(input, context);\n  };\n\n  CompareFacesCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1CompareFacesCommand(output, context);\n  };\n\n  return CompareFacesCommand;\n}($Command);\n\nexport { CompareFacesCommand };","map":{"version":3,"sources":["../../../commands/CompareFacesCommand.ts"],"names":[],"mappings":";AACA,SAAS,mBAAT,EAA8B,oBAA9B,QAA0D,oBAA1D;AACA,SACE,yCADF,EAEE,uCAFF,QAGO,0BAHP;AAIA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDG;;AACH,IAAA,mBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyC,EAAA,SAAA,CAAA,mBAAA,EAAA,MAAA,CAAA,CAAzC,CAKE;AACA;;;AAEA,WAAA,mBAAA,CAAqB,KAArB,EAAoD;AAApD,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAA+B,CAGlD;AACD;AAED;;AAEG;;;AACH,EAAA,mBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,mBAAnB;AACA,QAAM,WAAW,GAAG,qBAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,mBAAmB,CAAC,kBAJU;AAKvD,MAAA,wBAAwB,EAAE,oBAAoB,CAAC;AALQ,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GAzBD;;AA2BQ,EAAA,mBAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAAmD,OAAnD,EAA0E;AACxE,WAAO,uCAAuC,CAAC,KAAD,EAAQ,OAAR,CAA9C;AACD,GAFO;;AAIA,EAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,yCAAyC,CAAC,MAAD,EAAS,OAAT,CAAhD;AACD,GAFO;;AAMV,SAAA,mBAAA;AAAC,CAtDD,CAAyC,QAAzC,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { CompareFacesRequest, CompareFacesResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1CompareFacesCommand, serializeAws_json1_1CompareFacesCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Compares a face in the <i>source</i> input image with\n *       each of the 100 largest faces detected in the <i>target</i> input image.\n *     </p>\n *          <note>\n *             <p> If the source image contains multiple faces, the service detects the largest face\n *         and compares it with each face detected in the target image. </p>\n *          </note>\n *\n *\n *          <p>You pass the input and target images either as base64-encoded image bytes or as\n *       references to images in an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes isn't\n *       supported. The image must be formatted as a PNG or JPEG file. </p>\n *          <p>In response, the operation returns an array of face matches ordered by similarity score\n *       in descending order. For each face match, the response provides a bounding box of the face,\n *       facial landmarks, pose details (pitch, role, and yaw), quality (brightness and sharpness), and\n *       confidence value (indicating the level of confidence that the bounding box contains a face).\n *       The response also provides a similarity score, which indicates how closely the faces match. </p>\n *\n *          <note>\n *             <p>By default, only faces with a similarity score of greater than or equal to 80% are\n *         returned in the response. You can change this value by specifying the\n *           <code>SimilarityThreshold</code> parameter.</p>\n *          </note>\n *\n *          <p>\n *             <code>CompareFaces</code> also returns an array of faces that don't match the source image.\n *       For each face, it returns a bounding box, confidence value, landmarks, pose details, and quality.\n *     The response also returns information about the face in the source image, including the bounding box\n *       of the face and confidence value.</p>\n *\n *          <p>The <code>QualityFilter</code> input parameter allows you to filter out detected faces\n *       that don’t meet a required quality bar. The quality bar is based on a\n *       variety of common use cases.  Use <code>QualityFilter</code> to set the quality bar\n *       by specifying <code>LOW</code>, <code>MEDIUM</code>, or <code>HIGH</code>.\n *       If you do not want to filter detected faces, specify <code>NONE</code>. The default value is <code>NONE</code>. </p>\n *\n *          <p>If the image doesn't contain Exif metadata, <code>CompareFaces</code> returns orientation information for the\n *         source and target images. Use these values to display the images with the correct image orientation.</p>\n *          <p>If no faces are detected in the source or target images, <code>CompareFaces</code> returns an\n *     <code>InvalidParameterException</code> error. </p>\n *\n *\n *          <note>\n *             <p> This is a stateless API operation. That is, data returned by this operation doesn't persist.</p>\n *          </note>\n *\n *\n *          <p>For an example, see Comparing Faces in Images in the Amazon Rekognition Developer Guide.</p>\n *          <p>This operation requires permissions to perform the <code>rekognition:CompareFaces</code>\n *       action.</p>\n */\nvar CompareFacesCommand = /** @class */ (function (_super) {\n    __extends(CompareFacesCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function CompareFacesCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    CompareFacesCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"RekognitionClient\";\n        var commandName = \"CompareFacesCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: CompareFacesRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: CompareFacesResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    CompareFacesCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1CompareFacesCommand(input, context);\n    };\n    CompareFacesCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1CompareFacesCommand(output, context);\n    };\n    return CompareFacesCommand;\n}($Command));\nexport { CompareFacesCommand };\n//# sourceMappingURL=CompareFacesCommand.js.map"]},"metadata":{},"sourceType":"module"}