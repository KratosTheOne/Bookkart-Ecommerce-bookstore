{"ast":null,"code":"import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\n\nfunction openDB(name, version, {\n  blocked,\n  upgrade,\n  blocking,\n  terminated\n} = {}) {\n  const request = indexedDB.open(name, version);\n  const openPromise = wrap(request);\n\n  if (upgrade) {\n    request.addEventListener('upgradeneeded', event => {\n      upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n    });\n  }\n\n  if (blocked) request.addEventListener('blocked', () => blocked());\n  openPromise.then(db => {\n    if (terminated) db.addEventListener('close', () => terminated());\n    if (blocking) db.addEventListener('versionchange', () => blocking());\n  }).catch(() => {});\n  return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\n\n\nfunction deleteDB(name, {\n  blocked\n} = {}) {\n  const request = indexedDB.deleteDatabase(name);\n  if (blocked) request.addEventListener('blocked', () => blocked());\n  return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\n\nfunction getMethod(target, prop) {\n  if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === 'string')) {\n    return;\n  }\n\n  if (cachedMethods.get(prop)) return cachedMethods.get(prop);\n  const targetFuncName = prop.replace(/FromIndex$/, '');\n  const useIndex = prop !== targetFuncName;\n  const isWrite = writeMethods.includes(targetFuncName);\n\n  if ( // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n  !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))) {\n    return;\n  }\n\n  const method = async function (storeName, ...args) {\n    // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n    const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n    let target = tx.store;\n    if (useIndex) target = target.index(args.shift());\n    const returnVal = await target[targetFuncName](...args);\n    if (isWrite) await tx.done;\n    return returnVal;\n  };\n\n  cachedMethods.set(prop, method);\n  return method;\n}\n\nreplaceTraps(oldTraps => ({ ...oldTraps,\n  get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n  has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop)\n}));\nexport { deleteDB, openDB };","map":{"version":3,"sources":["C:/Users/Kaustubh Sinha/Desktop/bookkart/node_modules/idb/build/esm/index.js"],"names":["w","wrap","r","replaceTraps","u","unwrap","openDB","name","version","blocked","upgrade","blocking","terminated","request","indexedDB","open","openPromise","addEventListener","event","result","oldVersion","newVersion","transaction","then","db","catch","deleteDB","deleteDatabase","undefined","readMethods","writeMethods","cachedMethods","Map","getMethod","target","prop","IDBDatabase","get","targetFuncName","replace","useIndex","isWrite","includes","IDBIndex","IDBObjectStore","prototype","method","storeName","args","tx","store","index","shift","returnVal","done","set","oldTraps","receiver","has"],"mappings":"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","sourcesContent":["import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        const returnVal = await target[targetFuncName](...args);\n        if (isWrite)\n            await tx.done;\n        return returnVal;\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n"]},"metadata":{},"sourceType":"module"}