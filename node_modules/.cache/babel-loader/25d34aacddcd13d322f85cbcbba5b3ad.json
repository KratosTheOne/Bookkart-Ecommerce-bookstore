{"ast":null,"code":"/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Buffer } from 'buffer';\nimport CryptoJS from 'crypto-js/core';\nimport 'crypto-js/lib-typedarrays'; // necessary for crypto js\n\nimport SHA256 from 'crypto-js/sha256';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport WordArray from './utils/WordArray';\n/**\n * Returns a Buffer with a sequence of random nBytes\n *\n * @param {number} nBytes\n * @returns {Buffer} fixed-length sequence of random bytes\n */\n\nfunction randomBytes(nBytes) {\n  return Buffer.from(new WordArray().random(nBytes).toString(), 'hex');\n}\n\nimport BigInteger from './BigInteger';\n/**\n * Tests if a hex string has it most significant bit set (case-insensitive regex)\n */\n\nvar HEX_MSB_REGEX = /^[89a-f]/i;\nvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\nvar newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n/** @class */\n\nvar AuthenticationHelper = /*#__PURE__*/function () {\n  /**\n   * Constructs a new AuthenticationHelper object\n   * @param {string} PoolName Cognito user pool name.\n   */\n  function AuthenticationHelper(PoolName) {\n    this.N = new BigInteger(initN, 16);\n    this.g = new BigInteger('2', 16);\n    this.k = new BigInteger(this.hexHash(\"\" + this.padHex(this.N) + this.padHex(this.g)), 16);\n    this.smallAValue = this.generateRandomSmallA();\n    this.getLargeAValue(function () {});\n    this.infoBits = Buffer.from('Caldera Derived Key', 'utf8');\n    this.poolName = PoolName;\n  }\n  /**\n   * @returns {BigInteger} small A, a random number\n   */\n\n\n  var _proto = AuthenticationHelper.prototype;\n\n  _proto.getSmallAValue = function getSmallAValue() {\n    return this.smallAValue;\n  }\n  /**\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   */\n  ;\n\n  _proto.getLargeAValue = function getLargeAValue(callback) {\n    var _this = this;\n\n    if (this.largeAValue) {\n      callback(null, this.largeAValue);\n    } else {\n      this.calculateA(this.smallAValue, function (err, largeAValue) {\n        if (err) {\n          callback(err, null);\n        }\n\n        _this.largeAValue = largeAValue;\n        callback(null, _this.largeAValue);\n      });\n    }\n  }\n  /**\n   * helper function to generate a random big integer\n   * @returns {BigInteger} a random value.\n   * @private\n   */\n  ;\n\n  _proto.generateRandomSmallA = function generateRandomSmallA() {\n    // This will be interpreted as a postive 128-bit integer\n    var hexRandom = randomBytes(128).toString('hex');\n    var randomBigInt = new BigInteger(hexRandom, 16); // There is no need to do randomBigInt.mod(this.N - 1) as N (3072-bit) is > 128 bytes (1024-bit)\n\n    return randomBigInt;\n  }\n  /**\n   * helper function to generate a random string\n   * @returns {string} a random value.\n   * @private\n   */\n  ;\n\n  _proto.generateRandomString = function generateRandomString() {\n    return randomBytes(40).toString('base64');\n  }\n  /**\n   * @returns {string} Generated random value included in password hash.\n   */\n  ;\n\n  _proto.getRandomPassword = function getRandomPassword() {\n    return this.randomPassword;\n  }\n  /**\n   * @returns {string} Generated random value included in devices hash.\n   */\n  ;\n\n  _proto.getSaltDevices = function getSaltDevices() {\n    return this.SaltToHashDevices;\n  }\n  /**\n   * @returns {string} Value used to verify devices.\n   */\n  ;\n\n  _proto.getVerifierDevices = function getVerifierDevices() {\n    return this.verifierDevices;\n  }\n  /**\n   * Generate salts and compute verifier.\n   * @param {string} deviceGroupKey Devices to generate verifier for.\n   * @param {string} username User to generate verifier for.\n   * @param {nodeCallback<null>} callback Called with (err, null)\n   * @returns {void}\n   */\n  ;\n\n  _proto.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {\n    var _this2 = this;\n\n    this.randomPassword = this.generateRandomString();\n    var combinedString = \"\" + deviceGroupKey + username + \":\" + this.randomPassword;\n    var hashedString = this.hash(combinedString);\n    var hexRandom = randomBytes(16).toString('hex'); // The random hex will be unambiguously represented as a postive integer\n\n    this.SaltToHashDevices = this.padHex(new BigInteger(hexRandom, 16));\n    this.g.modPow(new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function (err, verifierDevicesNotPadded) {\n      if (err) {\n        callback(err, null);\n      }\n\n      _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);\n      callback(null, null);\n    });\n  }\n  /**\n   * Calculate the client's public value A = g^a%N\n   * with the generated random number a\n   * @param {BigInteger} a Randomly generated small A.\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   * @private\n   */\n  ;\n\n  _proto.calculateA = function calculateA(a, callback) {\n    var _this3 = this;\n\n    this.g.modPow(a, this.N, function (err, A) {\n      if (err) {\n        callback(err, null);\n      }\n\n      if (A.mod(_this3.N).equals(BigInteger.ZERO)) {\n        callback(new Error('Illegal paramater. A mod N cannot be 0.'), null);\n      }\n\n      callback(null, A);\n    });\n  }\n  /**\n   * Calculate the client's value U which is the hash of A and B\n   * @param {BigInteger} A Large A value.\n   * @param {BigInteger} B Server B value.\n   * @returns {BigInteger} Computed U value.\n   * @private\n   */\n  ;\n\n  _proto.calculateU = function calculateU(A, B) {\n    this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));\n    var finalU = new BigInteger(this.UHexHash, 16);\n    return finalU;\n  }\n  /**\n   * Calculate a hash from a bitArray\n   * @param {Buffer} buf Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n  ;\n\n  _proto.hash = function hash(buf) {\n    var str = buf instanceof Buffer ? CryptoJS.lib.WordArray.create(buf) : buf;\n    var hashHex = SHA256(str).toString();\n    return new Array(64 - hashHex.length).join('0') + hashHex;\n  }\n  /**\n   * Calculate a hash from a hex string\n   * @param {String} hexStr Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n  ;\n\n  _proto.hexHash = function hexHash(hexStr) {\n    return this.hash(Buffer.from(hexStr, 'hex'));\n  }\n  /**\n   * Standard hkdf algorithm\n   * @param {Buffer} ikm Input key material.\n   * @param {Buffer} salt Salt value.\n   * @returns {Buffer} Strong key material.\n   * @private\n   */\n  ;\n\n  _proto.computehkdf = function computehkdf(ikm, salt) {\n    var infoBitsWordArray = CryptoJS.lib.WordArray.create(Buffer.concat([this.infoBits, Buffer.from(String.fromCharCode(1), 'utf8')]));\n    var ikmWordArray = ikm instanceof Buffer ? CryptoJS.lib.WordArray.create(ikm) : ikm;\n    var saltWordArray = salt instanceof Buffer ? CryptoJS.lib.WordArray.create(salt) : salt;\n    var prk = HmacSHA256(ikmWordArray, saltWordArray);\n    var hmac = HmacSHA256(infoBitsWordArray, prk);\n    return Buffer.from(hmac.toString(), 'hex').slice(0, 16);\n  }\n  /**\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\n   * @param {String} username Username.\n   * @param {String} password Password.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {BigInteger} salt Generated salt.\n   * @param {nodeCallback<Buffer>} callback Called with (err, hkdfValue)\n   * @returns {void}\n   */\n  ;\n\n  _proto.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {\n    var _this4 = this;\n\n    if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {\n      throw new Error('B cannot be zero.');\n    }\n\n    this.UValue = this.calculateU(this.largeAValue, serverBValue);\n\n    if (this.UValue.equals(BigInteger.ZERO)) {\n      throw new Error('U cannot be zero.');\n    }\n\n    var usernamePassword = \"\" + this.poolName + username + \":\" + password;\n    var usernamePasswordHash = this.hash(usernamePassword);\n    var xValue = new BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);\n    this.calculateS(xValue, serverBValue, function (err, sValue) {\n      if (err) {\n        callback(err, null);\n      }\n\n      var hkdf = _this4.computehkdf(Buffer.from(_this4.padHex(sValue), 'hex'), Buffer.from(_this4.padHex(_this4.UValue), 'hex'));\n\n      callback(null, hkdf);\n    });\n  }\n  /**\n   * Calculates the S value used in getPasswordAuthenticationKey\n   * @param {BigInteger} xValue Salted password hash value.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.calculateS = function calculateS(xValue, serverBValue, callback) {\n    var _this5 = this;\n\n    this.g.modPow(xValue, this.N, function (err, gModPowXN) {\n      if (err) {\n        callback(err, null);\n      }\n\n      var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));\n      intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function (err2, result) {\n        if (err2) {\n          callback(err2, null);\n        }\n\n        callback(null, result.mod(_this5.N));\n      });\n    });\n  }\n  /**\n   * Return constant newPasswordRequiredChallengeUserAttributePrefix\n   * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\n   */\n  ;\n\n  _proto.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {\n    return newPasswordRequiredChallengeUserAttributePrefix;\n  }\n  /**\n   * Returns an unambiguous, even-length hex string of the two's complement encoding of an integer.\n   *\n   * It is compatible with the hex encoding of Java's BigInteger's toByteArray(), wich returns a\n   * byte array containing the two's-complement representation of a BigInteger. The array contains\n   * the minimum number of bytes required to represent the BigInteger, including at least one sign bit.\n   *\n   * Examples showing how ambiguity is avoided by left padding with:\n   * \t\"00\" (for positive values where the most-significant-bit is set)\n   *  \"FF\" (for negative values where the most-significant-bit is set)\n   *\n   * padHex(bigInteger.fromInt(-236))  === \"FF14\"\n   * padHex(bigInteger.fromInt(20))    === \"14\"\n   *\n   * padHex(bigInteger.fromInt(-200))  === \"FF38\"\n   * padHex(bigInteger.fromInt(56))    === \"38\"\n   *\n   * padHex(bigInteger.fromInt(-20))   === \"EC\"\n   * padHex(bigInteger.fromInt(236))   === \"00EC\"\n   *\n   * padHex(bigInteger.fromInt(-56))   === \"C8\"\n   * padHex(bigInteger.fromInt(200))   === \"00C8\"\n   *\n   * @param {BigInteger} bigInt Number to encode.\n   * @returns {String} even-length hex string of the two's complement encoding.\n   */\n  ;\n\n  _proto.padHex = function padHex(bigInt) {\n    if (!(bigInt instanceof BigInteger)) {\n      throw new Error('Not a BigInteger');\n    }\n\n    var isNegative = bigInt.compareTo(BigInteger.ZERO) < 0;\n    /* Get a hex string for abs(bigInt) */\n\n    var hexStr = bigInt.abs().toString(16);\n    /* Pad hex to even length if needed */\n\n    hexStr = hexStr.length % 2 !== 0 ? \"0\" + hexStr : hexStr;\n    /* Prepend \"00\" if the most significant bit is set */\n\n    hexStr = HEX_MSB_REGEX.test(hexStr) ? \"00\" + hexStr : hexStr;\n\n    if (isNegative) {\n      /* Flip the bits of the representation */\n      var invertedNibbles = hexStr.split('').map(function (x) {\n        var invertedNibble = ~parseInt(x, 16) & 0xf;\n        return '0123456789ABCDEF'.charAt(invertedNibble);\n      }).join('');\n      /* After flipping the bits, add one to get the 2's complement representation */\n\n      var flippedBitsBI = new BigInteger(invertedNibbles, 16).add(BigInteger.ONE);\n      hexStr = flippedBitsBI.toString(16);\n      /*\n      For hex strings starting with 'FF8', 'FF' can be dropped, e.g. 0xFFFF80=0xFF80=0x80=-128\n      \t\tAny sequence of '1' bits on the left can always be substituted with a single '1' bit\n      without changing the represented value.\n      \t\tThis only happens in the case when the input is 80...00\n      */\n\n      if (hexStr.toUpperCase().startsWith('FF8')) {\n        hexStr = hexStr.substring(2);\n      }\n    }\n\n    return hexStr;\n  };\n\n  return AuthenticationHelper;\n}();\n\nexport { AuthenticationHelper as default };","map":{"version":3,"sources":["C:/Users/Kaustubh Sinha/Desktop/bookkart/node_modules/@aws-amplify/pubsub/node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js"],"names":["Buffer","CryptoJS","SHA256","HmacSHA256","WordArray","randomBytes","nBytes","from","random","toString","BigInteger","HEX_MSB_REGEX","initN","newPasswordRequiredChallengeUserAttributePrefix","AuthenticationHelper","PoolName","N","g","k","hexHash","padHex","smallAValue","generateRandomSmallA","getLargeAValue","infoBits","poolName","_proto","prototype","getSmallAValue","callback","_this","largeAValue","calculateA","err","hexRandom","randomBigInt","generateRandomString","getRandomPassword","randomPassword","getSaltDevices","SaltToHashDevices","getVerifierDevices","verifierDevices","generateHashDevice","deviceGroupKey","username","_this2","combinedString","hashedString","hash","modPow","verifierDevicesNotPadded","a","_this3","A","mod","equals","ZERO","Error","calculateU","B","UHexHash","finalU","buf","str","lib","create","hashHex","Array","length","join","hexStr","computehkdf","ikm","salt","infoBitsWordArray","concat","String","fromCharCode","ikmWordArray","saltWordArray","prk","hmac","slice","getPasswordAuthenticationKey","password","serverBValue","_this4","UValue","usernamePassword","usernamePasswordHash","xValue","calculateS","sValue","hkdf","_this5","gModPowXN","intValue2","subtract","multiply","add","err2","result","getNewPasswordRequiredChallengeUserAttributePrefix","bigInt","isNegative","compareTo","abs","test","invertedNibbles","split","map","x","invertedNibble","parseInt","charAt","flippedBitsBI","ONE","toUpperCase","startsWith","substring","default"],"mappings":"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","sourcesContent":["/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Buffer } from 'buffer';\nimport CryptoJS from 'crypto-js/core';\nimport 'crypto-js/lib-typedarrays'; // necessary for crypto js\n\nimport SHA256 from 'crypto-js/sha256';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport WordArray from './utils/WordArray';\n/**\n * Returns a Buffer with a sequence of random nBytes\n *\n * @param {number} nBytes\n * @returns {Buffer} fixed-length sequence of random bytes\n */\n\nfunction randomBytes(nBytes) {\n  return Buffer.from(new WordArray().random(nBytes).toString(), 'hex');\n}\n\nimport BigInteger from './BigInteger';\n/**\n * Tests if a hex string has it most significant bit set (case-insensitive regex)\n */\n\nvar HEX_MSB_REGEX = /^[89a-f]/i;\nvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\nvar newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n/** @class */\n\nvar AuthenticationHelper = /*#__PURE__*/function () {\n  /**\n   * Constructs a new AuthenticationHelper object\n   * @param {string} PoolName Cognito user pool name.\n   */\n  function AuthenticationHelper(PoolName) {\n    this.N = new BigInteger(initN, 16);\n    this.g = new BigInteger('2', 16);\n    this.k = new BigInteger(this.hexHash(\"\" + this.padHex(this.N) + this.padHex(this.g)), 16);\n    this.smallAValue = this.generateRandomSmallA();\n    this.getLargeAValue(function () {});\n    this.infoBits = Buffer.from('Caldera Derived Key', 'utf8');\n    this.poolName = PoolName;\n  }\n  /**\n   * @returns {BigInteger} small A, a random number\n   */\n\n\n  var _proto = AuthenticationHelper.prototype;\n\n  _proto.getSmallAValue = function getSmallAValue() {\n    return this.smallAValue;\n  }\n  /**\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   */\n  ;\n\n  _proto.getLargeAValue = function getLargeAValue(callback) {\n    var _this = this;\n\n    if (this.largeAValue) {\n      callback(null, this.largeAValue);\n    } else {\n      this.calculateA(this.smallAValue, function (err, largeAValue) {\n        if (err) {\n          callback(err, null);\n        }\n\n        _this.largeAValue = largeAValue;\n        callback(null, _this.largeAValue);\n      });\n    }\n  }\n  /**\n   * helper function to generate a random big integer\n   * @returns {BigInteger} a random value.\n   * @private\n   */\n  ;\n\n  _proto.generateRandomSmallA = function generateRandomSmallA() {\n    // This will be interpreted as a postive 128-bit integer\n    var hexRandom = randomBytes(128).toString('hex');\n    var randomBigInt = new BigInteger(hexRandom, 16); // There is no need to do randomBigInt.mod(this.N - 1) as N (3072-bit) is > 128 bytes (1024-bit)\n\n    return randomBigInt;\n  }\n  /**\n   * helper function to generate a random string\n   * @returns {string} a random value.\n   * @private\n   */\n  ;\n\n  _proto.generateRandomString = function generateRandomString() {\n    return randomBytes(40).toString('base64');\n  }\n  /**\n   * @returns {string} Generated random value included in password hash.\n   */\n  ;\n\n  _proto.getRandomPassword = function getRandomPassword() {\n    return this.randomPassword;\n  }\n  /**\n   * @returns {string} Generated random value included in devices hash.\n   */\n  ;\n\n  _proto.getSaltDevices = function getSaltDevices() {\n    return this.SaltToHashDevices;\n  }\n  /**\n   * @returns {string} Value used to verify devices.\n   */\n  ;\n\n  _proto.getVerifierDevices = function getVerifierDevices() {\n    return this.verifierDevices;\n  }\n  /**\n   * Generate salts and compute verifier.\n   * @param {string} deviceGroupKey Devices to generate verifier for.\n   * @param {string} username User to generate verifier for.\n   * @param {nodeCallback<null>} callback Called with (err, null)\n   * @returns {void}\n   */\n  ;\n\n  _proto.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {\n    var _this2 = this;\n\n    this.randomPassword = this.generateRandomString();\n    var combinedString = \"\" + deviceGroupKey + username + \":\" + this.randomPassword;\n    var hashedString = this.hash(combinedString);\n    var hexRandom = randomBytes(16).toString('hex'); // The random hex will be unambiguously represented as a postive integer\n\n    this.SaltToHashDevices = this.padHex(new BigInteger(hexRandom, 16));\n    this.g.modPow(new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function (err, verifierDevicesNotPadded) {\n      if (err) {\n        callback(err, null);\n      }\n\n      _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);\n      callback(null, null);\n    });\n  }\n  /**\n   * Calculate the client's public value A = g^a%N\n   * with the generated random number a\n   * @param {BigInteger} a Randomly generated small A.\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   * @private\n   */\n  ;\n\n  _proto.calculateA = function calculateA(a, callback) {\n    var _this3 = this;\n\n    this.g.modPow(a, this.N, function (err, A) {\n      if (err) {\n        callback(err, null);\n      }\n\n      if (A.mod(_this3.N).equals(BigInteger.ZERO)) {\n        callback(new Error('Illegal paramater. A mod N cannot be 0.'), null);\n      }\n\n      callback(null, A);\n    });\n  }\n  /**\n   * Calculate the client's value U which is the hash of A and B\n   * @param {BigInteger} A Large A value.\n   * @param {BigInteger} B Server B value.\n   * @returns {BigInteger} Computed U value.\n   * @private\n   */\n  ;\n\n  _proto.calculateU = function calculateU(A, B) {\n    this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));\n    var finalU = new BigInteger(this.UHexHash, 16);\n    return finalU;\n  }\n  /**\n   * Calculate a hash from a bitArray\n   * @param {Buffer} buf Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n  ;\n\n  _proto.hash = function hash(buf) {\n    var str = buf instanceof Buffer ? CryptoJS.lib.WordArray.create(buf) : buf;\n    var hashHex = SHA256(str).toString();\n    return new Array(64 - hashHex.length).join('0') + hashHex;\n  }\n  /**\n   * Calculate a hash from a hex string\n   * @param {String} hexStr Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n  ;\n\n  _proto.hexHash = function hexHash(hexStr) {\n    return this.hash(Buffer.from(hexStr, 'hex'));\n  }\n  /**\n   * Standard hkdf algorithm\n   * @param {Buffer} ikm Input key material.\n   * @param {Buffer} salt Salt value.\n   * @returns {Buffer} Strong key material.\n   * @private\n   */\n  ;\n\n  _proto.computehkdf = function computehkdf(ikm, salt) {\n    var infoBitsWordArray = CryptoJS.lib.WordArray.create(Buffer.concat([this.infoBits, Buffer.from(String.fromCharCode(1), 'utf8')]));\n    var ikmWordArray = ikm instanceof Buffer ? CryptoJS.lib.WordArray.create(ikm) : ikm;\n    var saltWordArray = salt instanceof Buffer ? CryptoJS.lib.WordArray.create(salt) : salt;\n    var prk = HmacSHA256(ikmWordArray, saltWordArray);\n    var hmac = HmacSHA256(infoBitsWordArray, prk);\n    return Buffer.from(hmac.toString(), 'hex').slice(0, 16);\n  }\n  /**\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\n   * @param {String} username Username.\n   * @param {String} password Password.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {BigInteger} salt Generated salt.\n   * @param {nodeCallback<Buffer>} callback Called with (err, hkdfValue)\n   * @returns {void}\n   */\n  ;\n\n  _proto.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {\n    var _this4 = this;\n\n    if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {\n      throw new Error('B cannot be zero.');\n    }\n\n    this.UValue = this.calculateU(this.largeAValue, serverBValue);\n\n    if (this.UValue.equals(BigInteger.ZERO)) {\n      throw new Error('U cannot be zero.');\n    }\n\n    var usernamePassword = \"\" + this.poolName + username + \":\" + password;\n    var usernamePasswordHash = this.hash(usernamePassword);\n    var xValue = new BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);\n    this.calculateS(xValue, serverBValue, function (err, sValue) {\n      if (err) {\n        callback(err, null);\n      }\n\n      var hkdf = _this4.computehkdf(Buffer.from(_this4.padHex(sValue), 'hex'), Buffer.from(_this4.padHex(_this4.UValue), 'hex'));\n\n      callback(null, hkdf);\n    });\n  }\n  /**\n   * Calculates the S value used in getPasswordAuthenticationKey\n   * @param {BigInteger} xValue Salted password hash value.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.calculateS = function calculateS(xValue, serverBValue, callback) {\n    var _this5 = this;\n\n    this.g.modPow(xValue, this.N, function (err, gModPowXN) {\n      if (err) {\n        callback(err, null);\n      }\n\n      var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));\n      intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function (err2, result) {\n        if (err2) {\n          callback(err2, null);\n        }\n\n        callback(null, result.mod(_this5.N));\n      });\n    });\n  }\n  /**\n   * Return constant newPasswordRequiredChallengeUserAttributePrefix\n   * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\n   */\n  ;\n\n  _proto.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {\n    return newPasswordRequiredChallengeUserAttributePrefix;\n  }\n  /**\n   * Returns an unambiguous, even-length hex string of the two's complement encoding of an integer.\n   *\n   * It is compatible with the hex encoding of Java's BigInteger's toByteArray(), wich returns a\n   * byte array containing the two's-complement representation of a BigInteger. The array contains\n   * the minimum number of bytes required to represent the BigInteger, including at least one sign bit.\n   *\n   * Examples showing how ambiguity is avoided by left padding with:\n   * \t\"00\" (for positive values where the most-significant-bit is set)\n   *  \"FF\" (for negative values where the most-significant-bit is set)\n   *\n   * padHex(bigInteger.fromInt(-236))  === \"FF14\"\n   * padHex(bigInteger.fromInt(20))    === \"14\"\n   *\n   * padHex(bigInteger.fromInt(-200))  === \"FF38\"\n   * padHex(bigInteger.fromInt(56))    === \"38\"\n   *\n   * padHex(bigInteger.fromInt(-20))   === \"EC\"\n   * padHex(bigInteger.fromInt(236))   === \"00EC\"\n   *\n   * padHex(bigInteger.fromInt(-56))   === \"C8\"\n   * padHex(bigInteger.fromInt(200))   === \"00C8\"\n   *\n   * @param {BigInteger} bigInt Number to encode.\n   * @returns {String} even-length hex string of the two's complement encoding.\n   */\n  ;\n\n  _proto.padHex = function padHex(bigInt) {\n    if (!(bigInt instanceof BigInteger)) {\n      throw new Error('Not a BigInteger');\n    }\n\n    var isNegative = bigInt.compareTo(BigInteger.ZERO) < 0;\n    /* Get a hex string for abs(bigInt) */\n\n    var hexStr = bigInt.abs().toString(16);\n    /* Pad hex to even length if needed */\n\n    hexStr = hexStr.length % 2 !== 0 ? \"0\" + hexStr : hexStr;\n    /* Prepend \"00\" if the most significant bit is set */\n\n    hexStr = HEX_MSB_REGEX.test(hexStr) ? \"00\" + hexStr : hexStr;\n\n    if (isNegative) {\n      /* Flip the bits of the representation */\n      var invertedNibbles = hexStr.split('').map(function (x) {\n        var invertedNibble = ~parseInt(x, 16) & 0xf;\n        return '0123456789ABCDEF'.charAt(invertedNibble);\n      }).join('');\n      /* After flipping the bits, add one to get the 2's complement representation */\n\n      var flippedBitsBI = new BigInteger(invertedNibbles, 16).add(BigInteger.ONE);\n      hexStr = flippedBitsBI.toString(16);\n      /*\n      For hex strings starting with 'FF8', 'FF' can be dropped, e.g. 0xFFFF80=0xFF80=0x80=-128\n      \t\tAny sequence of '1' bits on the left can always be substituted with a single '1' bit\n      without changing the represented value.\n      \t\tThis only happens in the case when the input is 80...00\n      */\n\n      if (hexStr.toUpperCase().startsWith('FF8')) {\n        hexStr = hexStr.substring(2);\n      }\n    }\n\n    return hexStr;\n  };\n\n  return AuthenticationHelper;\n}();\n\nexport { AuthenticationHelper as default };"]},"metadata":{},"sourceType":"module"}