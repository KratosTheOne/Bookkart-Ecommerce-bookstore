{"ast":null,"code":"import { EventStreamMarshaller as EventMarshaller } from \"@aws-sdk/eventstream-marshaller\";\nimport { EventStreamMarshaller as UniversalEventStreamMarshaller } from \"@aws-sdk/eventstream-serde-universal\";\nimport { iterableToReadableStream, readableStreamtoIterable } from \"./utils\";\n/**\n * Utility class used to serialize and deserialize event streams in\n * browsers and ReactNative.\n *\n * In browsers where ReadableStream API is available:\n * * deserialize from ReadableStream to an async iterable of output structure\n * * serialize from async iterable of input structure to ReadableStream\n * In ReactNative where only async iterable API is available:\n * * deserialize from async iterable of binaries to async iterable of output structure\n * * serialize from async iterable of input structure to async iterable of binaries\n *\n * We use ReadableStream API in browsers because of the consistency with other\n * streaming operations, where ReadableStream API is used to denote streaming data.\n * Whereas in ReactNative, ReadableStream API is not available, we use async iterable\n * for streaming data although it has lower throughput.\n */\n\nvar EventStreamMarshaller =\n/** @class */\nfunction () {\n  function EventStreamMarshaller(_a) {\n    var utf8Encoder = _a.utf8Encoder,\n        utf8Decoder = _a.utf8Decoder;\n    this.eventMarshaller = new EventMarshaller(utf8Encoder, utf8Decoder);\n    this.universalMarshaller = new UniversalEventStreamMarshaller({\n      utf8Decoder: utf8Decoder,\n      utf8Encoder: utf8Encoder\n    });\n  }\n\n  EventStreamMarshaller.prototype.deserialize = function (body, deserializer) {\n    var bodyIterable = isReadableStream(body) ? readableStreamtoIterable(body) : body;\n    return this.universalMarshaller.deserialize(bodyIterable, deserializer);\n  };\n  /**\n   * Generate a stream that serialize events into stream of binary chunks;\n   *\n   * Caveat is that streaming request payload doesn't work on browser with native\n   * xhr or fetch handler currently because they don't support upload streaming.\n   * reference:\n   * * https://bugs.chromium.org/p/chromium/issues/detail?id=688906\n   * * https://bugzilla.mozilla.org/show_bug.cgi?id=1387483\n   *\n   */\n\n\n  EventStreamMarshaller.prototype.serialize = function (input, serializer) {\n    var serialziedIterable = this.universalMarshaller.serialize(input, serializer);\n    return typeof ReadableStream === \"function\" ? iterableToReadableStream(serialziedIterable) : serialziedIterable;\n  };\n\n  return EventStreamMarshaller;\n}();\n\nexport { EventStreamMarshaller };\n\nvar isReadableStream = function (body) {\n  return typeof ReadableStream === \"function\" && body instanceof ReadableStream;\n};","map":{"version":3,"sources":["../../src/EventStreamMarshaller.ts"],"names":[],"mappings":"AAAA,SAAS,qBAAqB,IAAI,eAAlC,QAAyD,iCAAzD;AACA,SAAS,qBAAqB,IAAI,8BAAlC,QAAwE,sCAAxE;AAGA,SAAS,wBAAT,EAAmC,wBAAnC,QAAmE,SAAnE;AASA;;;;;;;;;;;;;;;AAeG;;AACH,IAAA,qBAAA;AAAA;AAAA,YAAA;AAGE,WAAA,qBAAA,CAAY,EAAZ,EAAsE;QAAxD,WAAW,GAAA,EAAA,CAAA,W;QAAE,WAAW,GAAA,EAAA,CAAA,W;AACpC,SAAK,eAAL,GAAuB,IAAI,eAAJ,CAAoB,WAApB,EAAiC,WAAjC,CAAvB;AACA,SAAK,mBAAL,GAA2B,IAAI,8BAAJ,CAAmC;AAC5D,MAAA,WAAW,EAAA,WADiD;AAE5D,MAAA,WAAW,EAAA;AAFiD,KAAnC,CAA3B;AAID;;AAED,EAAA,qBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UACE,IADF,EAEE,YAFF,EAEmE;AAEjE,QAAM,YAAY,GAAG,gBAAgB,CAAC,IAAD,CAAhB,GAAyB,wBAAwB,CAAC,IAAD,CAAjD,GAA0D,IAA/E;AACA,WAAO,KAAK,mBAAL,CAAyB,WAAzB,CAAqC,YAArC,EAAmD,YAAnD,CAAP;AACD,GAND;AAQA;;;;;;;;;AASG;;;AACH,EAAA,qBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAa,KAAb,EAAsC,UAAtC,EAAuE;AACrE,QAAM,kBAAkB,GAAG,KAAK,mBAAL,CAAyB,SAAzB,CAAmC,KAAnC,EAA0C,UAA1C,CAA3B;AACA,WAAO,OAAO,cAAP,KAA0B,UAA1B,GAAuC,wBAAwB,CAAC,kBAAD,CAA/D,GAAsF,kBAA7F;AACD,GAHD;;AAIF,SAAA,qBAAA;AAAC,CAjCD,EAAA;;;;AAmCA,IAAM,gBAAgB,GAAG,UAAC,IAAD,EAAU;AACjC,SAAA,OAAO,cAAP,KAA0B,UAA1B,IAAwC,IAAI,YAAY,cAAxD;AAAsE,CADxE","sourcesContent":["import { EventStreamMarshaller as EventMarshaller } from \"@aws-sdk/eventstream-marshaller\";\nimport { EventStreamMarshaller as UniversalEventStreamMarshaller } from \"@aws-sdk/eventstream-serde-universal\";\nimport { Decoder, Encoder, EventStreamMarshaller as IEventStreamMarshaller, Message } from \"@aws-sdk/types\";\n\nimport { iterableToReadableStream, readableStreamtoIterable } from \"./utils\";\n\nexport interface EventStreamMarshaller extends IEventStreamMarshaller {}\n\nexport interface EventStreamMarshallerOptions {\n  utf8Encoder: Encoder;\n  utf8Decoder: Decoder;\n}\n\n/**\n * Utility class used to serialize and deserialize event streams in\n * browsers and ReactNative.\n *\n * In browsers where ReadableStream API is available:\n * * deserialize from ReadableStream to an async iterable of output structure\n * * serialize from async iterable of input structure to ReadableStream\n * In ReactNative where only async iterable API is available:\n * * deserialize from async iterable of binaries to async iterable of output structure\n * * serialize from async iterable of input structure to async iterable of binaries\n *\n * We use ReadableStream API in browsers because of the consistency with other\n * streaming operations, where ReadableStream API is used to denote streaming data.\n * Whereas in ReactNative, ReadableStream API is not available, we use async iterable\n * for streaming data although it has lower throughput.\n */\nexport class EventStreamMarshaller {\n  private readonly eventMarshaller: EventMarshaller;\n  private readonly universalMarshaller: UniversalEventStreamMarshaller;\n  constructor({ utf8Encoder, utf8Decoder }: EventStreamMarshallerOptions) {\n    this.eventMarshaller = new EventMarshaller(utf8Encoder, utf8Decoder);\n    this.universalMarshaller = new UniversalEventStreamMarshaller({\n      utf8Decoder,\n      utf8Encoder,\n    });\n  }\n\n  deserialize<T>(\n    body: ReadableStream<Uint8Array> | AsyncIterable<Uint8Array>,\n    deserializer: (input: { [event: string]: Message }) => Promise<T>\n  ): AsyncIterable<T> {\n    const bodyIterable = isReadableStream(body) ? readableStreamtoIterable(body) : body;\n    return this.universalMarshaller.deserialize(bodyIterable, deserializer);\n  }\n\n  /**\n   * Generate a stream that serialize events into stream of binary chunks;\n   *\n   * Caveat is that streaming request payload doesn't work on browser with native\n   * xhr or fetch handler currently because they don't support upload streaming.\n   * reference:\n   * * https://bugs.chromium.org/p/chromium/issues/detail?id=688906\n   * * https://bugzilla.mozilla.org/show_bug.cgi?id=1387483\n   *\n   */\n  serialize<T>(input: AsyncIterable<T>, serializer: (event: T) => Message): ReadableStream | AsyncIterable<Uint8Array> {\n    const serialziedIterable = this.universalMarshaller.serialize(input, serializer);\n    return typeof ReadableStream === \"function\" ? iterableToReadableStream(serialziedIterable) : serialziedIterable;\n  }\n}\n\nconst isReadableStream = (body: any): body is ReadableStream =>\n  typeof ReadableStream === \"function\" && body instanceof ReadableStream;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}