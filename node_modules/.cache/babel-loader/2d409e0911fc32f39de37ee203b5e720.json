{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { MergeShardsInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1MergeShardsCommand, serializeAws_json1_1MergeShardsCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Merges two adjacent shards in a Kinesis data stream and combines them into a single\n *             shard to reduce the stream's capacity to ingest and transport data. Two shards are\n *             considered adjacent if the union of the hash key ranges for the two shards form a\n *             contiguous set with no gaps. For example, if you have two shards, one with a hash key\n *             range of 276...381 and the other with a hash key range of 382...454, then you could\n *             merge these two shards into a single shard that would have a hash key range of\n *             276...454. After the merge, the single child shard receives data for all hash key values\n *             covered by the two parent shards.</p>\n *         <p>\n *             <code>MergeShards</code> is called when there is a need to reduce the overall capacity\n *             of a stream because of excess capacity that is not being used. You must specify the\n *             shard to be merged and the adjacent shard for a stream. For more information about\n *             merging shards, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-merge.html\">Merge Two\n *                 Shards</a> in the <i>Amazon Kinesis Data Streams Developer\n *                 Guide</i>.</p>\n *         <p>If the stream is in the <code>ACTIVE</code> state, you can call\n *                 <code>MergeShards</code>. If a stream is in the <code>CREATING</code>,\n *                 <code>UPDATING</code>, or <code>DELETING</code> state, <code>MergeShards</code>\n *             returns a <code>ResourceInUseException</code>. If the specified stream does not exist,\n *                 <code>MergeShards</code> returns a <code>ResourceNotFoundException</code>. </p>\n *         <p>You can use <a>DescribeStream</a> to check the state of the stream,\n *             which is returned in <code>StreamStatus</code>.</p>\n *         <p>\n *             <code>MergeShards</code> is an asynchronous operation. Upon receiving a\n *                 <code>MergeShards</code> request, Amazon Kinesis Data Streams immediately returns a\n *             response and sets the <code>StreamStatus</code> to <code>UPDATING</code>. After the\n *             operation is completed, Kinesis Data Streams sets the <code>StreamStatus</code> to\n *                 <code>ACTIVE</code>. Read and write operations continue to work while the stream is\n *             in the <code>UPDATING</code> state. </p>\n *         <p>You use <a>DescribeStream</a> to determine the shard IDs that are\n *             specified in the <code>MergeShards</code> request. </p>\n *         <p>If you try to operate on too many streams in parallel using <a>CreateStream</a>, <a>DeleteStream</a>, <code>MergeShards</code>,\n *             or <a>SplitShard</a>, you receive a <code>LimitExceededException</code>. </p>\n *         <p>\n *             <code>MergeShards</code> has a limit of five transactions per second per\n *             account.</p>\n */\n\nvar MergeShardsCommand =\n/** @class */\nfunction (_super) {\n  __extends(MergeShardsCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function MergeShardsCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  MergeShardsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"MergeShardsCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: MergeShardsInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  MergeShardsCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1MergeShardsCommand(input, context);\n  };\n\n  MergeShardsCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1MergeShardsCommand(output, context);\n  };\n\n  return MergeShardsCommand;\n}($Command);\n\nexport { MergeShardsCommand };","map":{"version":3,"sources":["../../../commands/MergeShardsCommand.ts"],"names":[],"mappings":";AACA,SAAS,gBAAT,QAAiC,oBAAjC;AACA,SACE,wCADF,EAEE,sCAFF,QAGO,0BAHP;AAIA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCG;;AACH,IAAA,kBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwC,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA,CAAxC,CAKE;AACA;;;AAEA,WAAA,kBAAA,CAAqB,KAArB,EAAmD;AAAnD,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAA8B,CAGjD;AACD;AAED;;AAEG;;;AACH,EAAA,kBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,eAAnB;AACA,QAAM,WAAW,GAAG,oBAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,gBAAgB,CAAC,kBAJa;AAKvD,MAAA,wBAAwB,EAAE,UAAC,MAAD,EAAY;AAAK,eAAA,MAAA;AAAM;AALM,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GAzBD;;AA2BQ,EAAA,kBAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAAkD,OAAlD,EAAyE;AACvE,WAAO,sCAAsC,CAAC,KAAD,EAAQ,OAAR,CAA7C;AACD,GAFO;;AAIA,EAAA,kBAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,wCAAwC,CAAC,MAAD,EAAS,OAAT,CAA/C;AACD,GAFO;;AAMV,SAAA,kBAAA;AAAC,CAtDD,CAAwC,QAAxC,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { MergeShardsInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1MergeShardsCommand, serializeAws_json1_1MergeShardsCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Merges two adjacent shards in a Kinesis data stream and combines them into a single\n *             shard to reduce the stream's capacity to ingest and transport data. Two shards are\n *             considered adjacent if the union of the hash key ranges for the two shards form a\n *             contiguous set with no gaps. For example, if you have two shards, one with a hash key\n *             range of 276...381 and the other with a hash key range of 382...454, then you could\n *             merge these two shards into a single shard that would have a hash key range of\n *             276...454. After the merge, the single child shard receives data for all hash key values\n *             covered by the two parent shards.</p>\n *         <p>\n *             <code>MergeShards</code> is called when there is a need to reduce the overall capacity\n *             of a stream because of excess capacity that is not being used. You must specify the\n *             shard to be merged and the adjacent shard for a stream. For more information about\n *             merging shards, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-merge.html\">Merge Two\n *                 Shards</a> in the <i>Amazon Kinesis Data Streams Developer\n *                 Guide</i>.</p>\n *         <p>If the stream is in the <code>ACTIVE</code> state, you can call\n *                 <code>MergeShards</code>. If a stream is in the <code>CREATING</code>,\n *                 <code>UPDATING</code>, or <code>DELETING</code> state, <code>MergeShards</code>\n *             returns a <code>ResourceInUseException</code>. If the specified stream does not exist,\n *                 <code>MergeShards</code> returns a <code>ResourceNotFoundException</code>. </p>\n *         <p>You can use <a>DescribeStream</a> to check the state of the stream,\n *             which is returned in <code>StreamStatus</code>.</p>\n *         <p>\n *             <code>MergeShards</code> is an asynchronous operation. Upon receiving a\n *                 <code>MergeShards</code> request, Amazon Kinesis Data Streams immediately returns a\n *             response and sets the <code>StreamStatus</code> to <code>UPDATING</code>. After the\n *             operation is completed, Kinesis Data Streams sets the <code>StreamStatus</code> to\n *                 <code>ACTIVE</code>. Read and write operations continue to work while the stream is\n *             in the <code>UPDATING</code> state. </p>\n *         <p>You use <a>DescribeStream</a> to determine the shard IDs that are\n *             specified in the <code>MergeShards</code> request. </p>\n *         <p>If you try to operate on too many streams in parallel using <a>CreateStream</a>, <a>DeleteStream</a>, <code>MergeShards</code>,\n *             or <a>SplitShard</a>, you receive a <code>LimitExceededException</code>. </p>\n *         <p>\n *             <code>MergeShards</code> has a limit of five transactions per second per\n *             account.</p>\n */\nvar MergeShardsCommand = /** @class */ (function (_super) {\n    __extends(MergeShardsCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function MergeShardsCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    MergeShardsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"KinesisClient\";\n        var commandName = \"MergeShardsCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: MergeShardsInput.filterSensitiveLog,\n            outputFilterSensitiveLog: function (output) { return output; },\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    MergeShardsCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1MergeShardsCommand(input, context);\n    };\n    MergeShardsCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1MergeShardsCommand(output, context);\n    };\n    return MergeShardsCommand;\n}($Command));\nexport { MergeShardsCommand };\n//# sourceMappingURL=MergeShardsCommand.js.map"]},"metadata":{},"sourceType":"module"}