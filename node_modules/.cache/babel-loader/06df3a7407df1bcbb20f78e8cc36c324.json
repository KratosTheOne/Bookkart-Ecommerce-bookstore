{"ast":null,"code":"import { __asyncGenerator, __await, __generator } from \"tslib\";\nexport function getChunkedStream(source) {\n  var _a;\n\n  var currentMessageTotalLength = 0;\n  var currentMessagePendingLength = 0;\n  var currentMessage = null;\n  var messageLengthBuffer = null;\n\n  var allocateMessage = function (size) {\n    if (typeof size !== \"number\") {\n      throw new Error(\"Attempted to allocate an event message where size was not a number: \" + size);\n    }\n\n    currentMessageTotalLength = size;\n    currentMessagePendingLength = 4;\n    currentMessage = new Uint8Array(size);\n    var currentMessageView = new DataView(currentMessage.buffer);\n    currentMessageView.setUint32(0, size, false); //set big-endian Uint32 to 0~3 bytes\n  };\n\n  var iterator = function () {\n    return __asyncGenerator(this, arguments, function () {\n      var sourceIterator, _a, value, done, chunkLength, currentOffset, bytesRemaining, numBytesForTotal, numBytesToWrite;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            sourceIterator = source[Symbol.asyncIterator]();\n            _b.label = 1;\n\n          case 1:\n            if (!true) return [3\n            /*break*/\n            , 16];\n            return [4\n            /*yield*/\n            , __await(sourceIterator.next())];\n\n          case 2:\n            _a = _b.sent(), value = _a.value, done = _a.done;\n            if (!done) return [3\n            /*break*/\n            , 10];\n            if (!!currentMessageTotalLength) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , __await(void 0)];\n\n          case 3:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 4:\n            if (!(currentMessageTotalLength === currentMessagePendingLength)) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , __await(currentMessage)];\n\n          case 5:\n            return [4\n            /*yield*/\n            , _b.sent()];\n\n          case 6:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            throw new Error(\"Truncated event message received.\");\n\n          case 8:\n            return [4\n            /*yield*/\n            , __await(void 0)];\n\n          case 9:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 10:\n            chunkLength = value.length;\n            currentOffset = 0;\n            _b.label = 11;\n\n          case 11:\n            if (!(currentOffset < chunkLength)) return [3\n            /*break*/\n            , 15]; // create new message if necessary\n\n            if (!currentMessage) {\n              bytesRemaining = chunkLength - currentOffset; // prevent edge case where total length spans 2 chunks\n\n              if (!messageLengthBuffer) {\n                messageLengthBuffer = new Uint8Array(4);\n              }\n\n              numBytesForTotal = Math.min(4 - currentMessagePendingLength, // remaining bytes to fill the messageLengthBuffer\n              bytesRemaining // bytes left in chunk\n              );\n              messageLengthBuffer.set( // @ts-ignore error TS2532: Object is possibly 'undefined' for value\n              value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);\n              currentMessagePendingLength += numBytesForTotal;\n              currentOffset += numBytesForTotal;\n\n              if (currentMessagePendingLength < 4) {\n                // not enough information to create the current message\n                return [3\n                /*break*/\n                , 15];\n              }\n\n              allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));\n              messageLengthBuffer = null;\n            }\n\n            numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, // number of bytes left to complete message\n            chunkLength - currentOffset // number of bytes left in the original chunk\n            );\n            currentMessage.set( // @ts-ignore error TS2532: Object is possibly 'undefined' for value\n            value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);\n            currentMessagePendingLength += numBytesToWrite;\n            currentOffset += numBytesToWrite;\n            if (!(currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength)) return [3\n            /*break*/\n            , 14];\n            return [4\n            /*yield*/\n            , __await(currentMessage)];\n\n          case 12:\n            // push out the message\n            return [4\n            /*yield*/\n            , _b.sent()];\n\n          case 13:\n            // push out the message\n            _b.sent(); // cleanup\n\n\n            currentMessage = null;\n            currentMessageTotalLength = 0;\n            currentMessagePendingLength = 0;\n            _b.label = 14;\n\n          case 14:\n            return [3\n            /*break*/\n            , 11];\n\n          case 15:\n            return [3\n            /*break*/\n            , 1];\n\n          case 16:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return _a = {}, _a[Symbol.asyncIterator] = iterator, _a;\n}","map":{"version":3,"sources":["../../src/getChunkedStream.ts"],"names":[],"mappings":"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","sourcesContent":["export function getChunkedStream(source: AsyncIterable<Uint8Array>): AsyncIterable<Uint8Array> {\n  let currentMessageTotalLength = 0;\n  let currentMessagePendingLength = 0;\n  let currentMessage: Uint8Array | null = null;\n  let messageLengthBuffer: Uint8Array | null = null;\n  const allocateMessage = (size: number) => {\n    if (typeof size !== \"number\") {\n      throw new Error(\"Attempted to allocate an event message where size was not a number: \" + size);\n    }\n    currentMessageTotalLength = size;\n    currentMessagePendingLength = 4;\n    currentMessage = new Uint8Array(size);\n    const currentMessageView = new DataView(currentMessage.buffer);\n    currentMessageView.setUint32(0, size, false); //set big-endian Uint32 to 0~3 bytes\n  };\n\n  const iterator = async function* () {\n    const sourceIterator = source[Symbol.asyncIterator]();\n    while (true) {\n      const { value, done } = await sourceIterator.next();\n      if (done) {\n        if (!currentMessageTotalLength) {\n          return;\n        } else if (currentMessageTotalLength === currentMessagePendingLength) {\n          yield currentMessage as Uint8Array;\n        } else {\n          throw new Error(\"Truncated event message received.\");\n        }\n        return;\n      }\n\n      const chunkLength = value.length;\n      let currentOffset = 0;\n\n      while (currentOffset < chunkLength) {\n        // create new message if necessary\n        if (!currentMessage) {\n          // working on a new message, determine total length\n          const bytesRemaining = chunkLength - currentOffset;\n          // prevent edge case where total length spans 2 chunks\n          if (!messageLengthBuffer) {\n            messageLengthBuffer = new Uint8Array(4);\n          }\n          const numBytesForTotal = Math.min(\n            4 - currentMessagePendingLength, // remaining bytes to fill the messageLengthBuffer\n            bytesRemaining // bytes left in chunk\n          );\n\n          messageLengthBuffer.set(\n            // @ts-ignore error TS2532: Object is possibly 'undefined' for value\n            value.slice(currentOffset, currentOffset + numBytesForTotal),\n            currentMessagePendingLength\n          );\n\n          currentMessagePendingLength += numBytesForTotal;\n          currentOffset += numBytesForTotal;\n\n          if (currentMessagePendingLength < 4) {\n            // not enough information to create the current message\n            break;\n          }\n          allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));\n          messageLengthBuffer = null;\n        }\n\n        // write data into current message\n        const numBytesToWrite = Math.min(\n          currentMessageTotalLength - currentMessagePendingLength, // number of bytes left to complete message\n          chunkLength - currentOffset // number of bytes left in the original chunk\n        );\n        currentMessage!.set(\n          // @ts-ignore error TS2532: Object is possibly 'undefined' for value\n          value.slice(currentOffset, currentOffset + numBytesToWrite),\n          currentMessagePendingLength\n        );\n        currentMessagePendingLength += numBytesToWrite;\n        currentOffset += numBytesToWrite;\n\n        // check if a message is ready to be pushed\n        if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {\n          // push out the message\n          yield currentMessage as Uint8Array;\n          // cleanup\n          currentMessage = null;\n          currentMessageTotalLength = 0;\n          currentMessagePendingLength = 0;\n        }\n      }\n    }\n  };\n\n  return {\n    [Symbol.asyncIterator]: iterator,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}