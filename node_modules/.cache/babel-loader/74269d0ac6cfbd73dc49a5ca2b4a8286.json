{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { GetIdCommand } from \"@aws-sdk/client-cognito-identity\";\n/**\n * Retrieves or generates a unique identifier using Amazon Cognito's `GetId`\n * operation, then generates temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from `GetId` are cached internally, but results from\n * `GetCredentialsForIdentity` are not.\n */\n\nexport function fromCognitoIdentityPool(_a) {\n  var _this = this;\n\n  var accountId = _a.accountId,\n      _b = _a.cache,\n      cache = _b === void 0 ? localStorage() : _b,\n      client = _a.client,\n      customRoleArn = _a.customRoleArn,\n      identityPoolId = _a.identityPoolId,\n      logins = _a.logins,\n      _c = _a.userIdentifier,\n      userIdentifier = _c === void 0 ? !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined : _c;\n  var cacheKey = userIdentifier ? \"aws:cognito-identity-credentials:\" + identityPoolId + \":\" + userIdentifier : undefined;\n\n  var provider = function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var identityId, _a, _b, IdentityId, _c, _d, _e, _f, _g;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _a = cacheKey;\n            if (!_a) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , cache.getItem(cacheKey)];\n\n          case 1:\n            _a = _h.sent();\n            _h.label = 2;\n\n          case 2:\n            identityId = _a;\n            if (!!identityId) return [3\n            /*break*/\n            , 7];\n            _d = (_c = client).send;\n            _e = GetIdCommand.bind;\n            _f = {\n              AccountId: accountId,\n              IdentityPoolId: identityPoolId\n            };\n            if (!logins) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , resolveLogins(logins)];\n\n          case 3:\n            _g = _h.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            _g = undefined;\n            _h.label = 5;\n\n          case 5:\n            return [4\n            /*yield*/\n            , _d.apply(_c, [new (_e.apply(GetIdCommand, [void 0, (_f.Logins = _g, _f)]))()])];\n\n          case 6:\n            _b = _h.sent().IdentityId, IdentityId = _b === void 0 ? throwOnMissingId() : _b;\n            identityId = IdentityId;\n\n            if (cacheKey) {\n              Promise.resolve(cache.setItem(cacheKey, identityId)).catch(function () {});\n            }\n\n            _h.label = 7;\n\n          case 7:\n            provider = fromCognitoIdentity({\n              client: client,\n              customRoleArn: customRoleArn,\n              logins: logins,\n              identityId: identityId\n            });\n            return [2\n            /*return*/\n            , provider()];\n        }\n      });\n    });\n  };\n\n  return function () {\n    return provider().catch(function (err) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          if (cacheKey) {\n            Promise.resolve(cache.removeItem(cacheKey)).catch(function () {});\n          }\n\n          throw err;\n        });\n      });\n    });\n  };\n}\n\nfunction throwOnMissingId() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no identity ID\");\n}","map":{"version":3,"sources":["../../src/fromCognitoIdentityPool.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { GetIdCommand } from \"@aws-sdk/client-cognito-identity\";\n/**\n * Retrieves or generates a unique identifier using Amazon Cognito's `GetId`\n * operation, then generates temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from `GetId` are cached internally, but results from\n * `GetCredentialsForIdentity` are not.\n */\nexport function fromCognitoIdentityPool(_a) {\n    var _this = this;\n    var accountId = _a.accountId, _b = _a.cache, cache = _b === void 0 ? localStorage() : _b, client = _a.client, customRoleArn = _a.customRoleArn, identityPoolId = _a.identityPoolId, logins = _a.logins, _c = _a.userIdentifier, userIdentifier = _c === void 0 ? !logins || Object.keys(logins).length === 0\n        ? \"ANONYMOUS\"\n        : undefined : _c;\n    var cacheKey = userIdentifier\n        ? \"aws:cognito-identity-credentials:\" + identityPoolId + \":\" + userIdentifier\n        : undefined;\n    var provider = function () { return __awaiter(_this, void 0, void 0, function () {\n        var identityId, _a, _b, IdentityId, _c, _d, _e, _f, _g;\n        return __generator(this, function (_h) {\n            switch (_h.label) {\n                case 0:\n                    _a = cacheKey;\n                    if (!_a) return [3 /*break*/, 2];\n                    return [4 /*yield*/, cache.getItem(cacheKey)];\n                case 1:\n                    _a = (_h.sent());\n                    _h.label = 2;\n                case 2:\n                    identityId = _a;\n                    if (!!identityId) return [3 /*break*/, 7];\n                    _d = (_c = client).send;\n                    _e = GetIdCommand.bind;\n                    _f = {\n                        AccountId: accountId,\n                        IdentityPoolId: identityPoolId\n                    };\n                    if (!logins) return [3 /*break*/, 4];\n                    return [4 /*yield*/, resolveLogins(logins)];\n                case 3:\n                    _g = _h.sent();\n                    return [3 /*break*/, 5];\n                case 4:\n                    _g = undefined;\n                    _h.label = 5;\n                case 5: return [4 /*yield*/, _d.apply(_c, [new (_e.apply(GetIdCommand, [void 0, (_f.Logins = _g,\n                                _f)]))()])];\n                case 6:\n                    _b = (_h.sent()).IdentityId, IdentityId = _b === void 0 ? throwOnMissingId() : _b;\n                    identityId = IdentityId;\n                    if (cacheKey) {\n                        Promise.resolve(cache.setItem(cacheKey, identityId)).catch(function () { });\n                    }\n                    _h.label = 7;\n                case 7:\n                    provider = fromCognitoIdentity({\n                        client: client,\n                        customRoleArn: customRoleArn,\n                        logins: logins,\n                        identityId: identityId\n                    });\n                    return [2 /*return*/, provider()];\n            }\n        });\n    }); };\n    return function () {\n        return provider().catch(function (err) { return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (cacheKey) {\n                    Promise.resolve(cache.removeItem(cacheKey)).catch(function () { });\n                }\n                throw err;\n            });\n        }); });\n    };\n}\nfunction throwOnMissingId() {\n    throw new ProviderError(\"Response from Amazon Cognito contained no identity ID\");\n}\n//# sourceMappingURL=fromCognitoIdentityPool.js.map"]},"metadata":{},"sourceType":"module"}