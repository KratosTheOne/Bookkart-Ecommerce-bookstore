{"ast":null,"code":"import { __assign, __values } from \"tslib\";\nimport { cloneRequest } from \"./cloneRequest\";\n/**\n * @internal\n */\n\nexport function moveHeadersToQuery(request) {\n  var e_1, _a;\n\n  var _b = typeof request.clone === \"function\" ? request.clone() : cloneRequest(request),\n      headers = _b.headers,\n      _c = _b.query,\n      query = _c === void 0 ? {} : _c;\n\n  try {\n    for (var _d = __values(Object.keys(headers)), _e = _d.next(); !_e.done; _e = _d.next()) {\n      var name = _e.value;\n      var lname = name.toLowerCase();\n\n      if (lname.substr(0, 6) === \"x-amz-\") {\n        query[name] = headers[name];\n        delete headers[name];\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return __assign(__assign({}, request), {\n    headers: headers,\n    query: query\n  });\n}","map":{"version":3,"sources":["../../src/moveHeadersToQuery.ts"],"names":[],"mappings":";AAEA,SAAS,YAAT,QAA6B,gBAA7B;AAEA;;AAEG;;AACH,OAAM,SAAU,kBAAV,CAA6B,OAA7B,EAAiD;;;AAC/C,MAAA,EAAA,GACJ,OAAQ,OAAe,CAAC,KAAxB,KAAkC,UAAlC,GAAgD,OAAe,CAAC,KAAhB,EAAhD,GAA0E,YAAY,CAAC,OAAD,CADlF;AAAA,MAAE,OAAO,GAAA,EAAA,CAAA,OAAT;AAAA,MAAW,EAAA,GAAA,EAAA,CAAA,KAAX;AAAA,MAAW,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAA0B,EAA1C;;;AAEN,SAAmB,IAAA,EAAA,GAAA,QAAA,CAAA,MAAM,CAAC,IAAP,CAAY,OAAZ,CAAA,CAAA,EAAoB,EAAA,GAAA,EAAA,CAAA,IAAA,EAAvC,EAAuC,CAAA,EAAA,CAAA,IAAvC,EAAuC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAvC,EAAyC;AAApC,UAAM,IAAI,GAAA,EAAA,CAAA,KAAV;AACH,UAAM,KAAK,GAAG,IAAI,CAAC,WAAL,EAAd;;AACA,UAAI,KAAK,CAAC,MAAN,CAAa,CAAb,EAAgB,CAAhB,MAAuB,QAA3B,EAAqC;AACnC,QAAA,KAAK,CAAC,IAAD,CAAL,GAAc,OAAO,CAAC,IAAD,CAArB;AACA,eAAO,OAAO,CAAC,IAAD,CAAd;AACD;AACF;;;;;;;;;;;;;AAED,SAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,OADL,CAAA,EACY;AACV,IAAA,OAAO,EAAA,OADG;AAEV,IAAA,KAAK,EAAA;AAFK,GADZ,CAAA;AAKD","sourcesContent":["import { HttpRequest, QueryParameterBag } from \"@aws-sdk/types\";\n\nimport { cloneRequest } from \"./cloneRequest\";\n\n/**\n * @internal\n */\nexport function moveHeadersToQuery(request: HttpRequest): HttpRequest & { query: QueryParameterBag } {\n  const { headers, query = {} as QueryParameterBag } =\n    typeof (request as any).clone === \"function\" ? (request as any).clone() : cloneRequest(request);\n  for (const name of Object.keys(headers)) {\n    const lname = name.toLowerCase();\n    if (lname.substr(0, 6) === \"x-amz-\") {\n      query[name] = headers[name];\n      delete headers[name];\n    }\n  }\n\n  return {\n    ...request,\n    headers,\n    query,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}