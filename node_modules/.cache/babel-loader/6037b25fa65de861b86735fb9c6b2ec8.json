{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar protocol_http_1 = require(\"@aws-sdk/protocol-http\");\n\nvar isClockSkewed = function (newServerTime, systemClockOffset) {\n  return Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 300000;\n};\n\nvar getSkewCorrectedDate = function (systemClockOffset) {\n  return new Date(Date.now() + systemClockOffset);\n};\n\nfunction awsAuthMiddleware(options) {\n  return function (next) {\n    return function (args) {\n      return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var signer, _a, output, _b, _c, _d, headers, dateHeader, serverTime;\n\n        return tslib_1.__generator(this, function (_e) {\n          switch (_e.label) {\n            case 0:\n              if (!protocol_http_1.HttpRequest.isInstance(args.request)) return [2\n              /*return*/\n              , next(args)];\n              if (!(typeof options.signer === \"function\")) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , options.signer()];\n\n            case 1:\n              _a = _e.sent();\n              return [3\n              /*break*/\n              , 3];\n\n            case 2:\n              _a = options.signer;\n              _e.label = 3;\n\n            case 3:\n              signer = _a;\n              _b = next;\n              _c = [tslib_1.__assign({}, args)];\n              _d = {};\n              return [4\n              /*yield*/\n              , signer.sign(args.request, {\n                signingDate: new Date(Date.now() + options.systemClockOffset)\n              })];\n\n            case 4:\n              return [4\n              /*yield*/\n              , _b.apply(void 0, [tslib_1.__assign.apply(void 0, _c.concat([(_d.request = _e.sent(), _d)]))])];\n\n            case 5:\n              output = _e.sent();\n              headers = output.response.headers;\n              dateHeader = headers && (headers.date || headers.Date);\n\n              if (dateHeader) {\n                serverTime = Date.parse(dateHeader);\n\n                if (isClockSkewed(serverTime, options.systemClockOffset)) {\n                  options.systemClockOffset = serverTime - Date.now();\n                }\n              }\n\n              return [2\n              /*return*/\n              , output];\n          }\n        });\n      });\n    };\n  };\n}\n\nexports.awsAuthMiddleware = awsAuthMiddleware;\nexports.awsAuthMiddlewareOptions = {\n  name: \"awsAuthMiddleware\",\n  step: \"finalizeRequest\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\"\n};\n\nexports.getAwsAuthPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.addRelativeTo(awsAuthMiddleware(options), exports.awsAuthMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../src/middleware.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  FinalizeHandler,\n  FinalizeHandlerArguments,\n  FinalizeRequestMiddleware,\n  FinalizeHandlerOutput,\n  Pluggable,\n  RelativeLocation,\n  FinalizeRequestHandlerOptions\n} from \"@aws-sdk/types\";\nimport { AwsAuthResolvedConfig } from \"./configurations\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\n\nconst isClockSkewed = (newServerTime: number, systemClockOffset: number) =>\n  Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >=\n  300000;\n\nconst getSkewCorrectedDate = (systemClockOffset: number) =>\n  new Date(Date.now() + systemClockOffset);\n\nexport function awsAuthMiddleware<Input extends object, Output extends object>(\n  options: AwsAuthResolvedConfig\n): FinalizeRequestMiddleware<Input, Output> {\n  return (\n    next: FinalizeHandler<Input, Output>\n  ): FinalizeHandler<Input, Output> =>\n    async function (\n      args: FinalizeHandlerArguments<Input>\n    ): Promise<FinalizeHandlerOutput<Output>> {\n      if (!HttpRequest.isInstance(args.request)) return next(args);\n      const signer =\n        typeof options.signer === \"function\"\n          ? await options.signer()\n          : options.signer;\n      const output = await next({\n        ...args,\n        request: await signer.sign(args.request, {\n          signingDate: new Date(Date.now() + options.systemClockOffset)\n        })\n      });\n\n      const { headers } = output.response as any;\n      const dateHeader = headers && (headers.date || headers.Date);\n      if (dateHeader) {\n        const serverTime = Date.parse(dateHeader);\n        if (isClockSkewed(serverTime, options.systemClockOffset)) {\n          options.systemClockOffset = serverTime - Date.now();\n        }\n      }\n\n      return output;\n    };\n}\n\nexport const awsAuthMiddlewareOptions: FinalizeRequestHandlerOptions &\n  RelativeLocation<any, any> = {\n  name: \"awsAuthMiddleware\",\n  step: \"finalizeRequest\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\"\n};\n\nexport const getAwsAuthPlugin = (\n  options: AwsAuthResolvedConfig\n): Pluggable<any, any> => ({\n  applyToStack: clientStack => {\n    clientStack.addRelativeTo(\n      awsAuthMiddleware(options),\n      awsAuthMiddlewareOptions\n    );\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}