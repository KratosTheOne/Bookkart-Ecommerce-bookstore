{"ast":null,"code":"import { __assign, __awaiter, __generator, __values } from \"tslib\";\nimport { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nexport function applyMd5BodyChecksumMiddleware(options) {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var request, body, headers, digest, hash, _a, _b, _c, _d, _e;\n\n        var _f, _g;\n\n        return __generator(this, function (_h) {\n          switch (_h.label) {\n            case 0:\n              request = args.request;\n              if (!HttpRequest.isInstance(request)) return [3\n              /*break*/\n              , 2];\n              body = request.body, headers = request.headers;\n              if (!!hasHeader(\"Content-MD5\", headers)) return [3\n              /*break*/\n              , 2];\n              digest = void 0;\n\n              if (body === undefined || typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {\n                hash = new options.md5();\n                hash.update(body || \"\");\n                digest = hash.digest();\n              } else {\n                digest = options.streamHasher(options.md5, body);\n              }\n\n              _a = [__assign({}, request)];\n              _f = {};\n              _b = [__assign({}, headers)];\n              _g = {};\n              _c = \"Content-MD5\";\n              _e = (_d = options).base64Encoder;\n              return [4\n              /*yield*/\n              , digest];\n\n            case 1:\n              request = __assign.apply(void 0, _a.concat([(_f.headers = __assign.apply(void 0, _b.concat([(_g[_c] = _e.apply(_d, [_h.sent()]), _g)])), _f)]));\n              _h.label = 2;\n\n            case 2:\n              return [2\n              /*return*/\n              , next(__assign(__assign({}, args), {\n                request: request\n              }))];\n          }\n        });\n      });\n    };\n  };\n}\nexport var applyMd5BodyChecksumMiddlewareOptions = {\n  name: \"applyMd5BodyChecksumMiddleware\",\n  step: \"build\",\n  tags: [\"SET_CONTENT_MD5\", \"BODY_CHECKSUM\"],\n  override: true\n};\nexport var getApplyMd5BodyChecksumPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(applyMd5BodyChecksumMiddleware(config), applyMd5BodyChecksumMiddlewareOptions);\n    }\n  };\n};\n\nfunction hasHeader(soughtHeader, headers) {\n  var e_1, _a;\n\n  soughtHeader = soughtHeader.toLowerCase();\n\n  try {\n    for (var _b = __values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var headerName = _c.value;\n\n      if (soughtHeader === headerName.toLowerCase()) {\n        return true;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["../../src/applyMd5BodyChecksumMiddleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  HeaderBag,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nimport { Md5BodyChecksumResolvedConfig } from \"./md5Configuration\";\n\nexport function applyMd5BodyChecksumMiddleware(options: Md5BodyChecksumResolvedConfig): BuildMiddleware<any, any> {\n  return <Output extends MetadataBearer>(next: BuildHandler<any, Output>): BuildHandler<any, Output> => async (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    let { request } = args;\n    if (HttpRequest.isInstance(request)) {\n      const { body, headers } = request;\n      if (!hasHeader(\"Content-MD5\", headers)) {\n        let digest: Promise<Uint8Array>;\n        if (body === undefined || typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {\n          const hash = new options.md5();\n          hash.update(body || \"\");\n          digest = hash.digest();\n        } else {\n          digest = options.streamHasher(options.md5, body);\n        }\n\n        request = {\n          ...request,\n          headers: {\n            ...headers,\n            \"Content-MD5\": options.base64Encoder(await digest),\n          },\n        };\n      }\n    }\n    return next({\n      ...args,\n      request,\n    });\n  };\n}\n\nexport const applyMd5BodyChecksumMiddlewareOptions: BuildHandlerOptions = {\n  name: \"applyMd5BodyChecksumMiddleware\",\n  step: \"build\",\n  tags: [\"SET_CONTENT_MD5\", \"BODY_CHECKSUM\"],\n  override: true,\n};\n\nexport const getApplyMd5BodyChecksumPlugin = (config: Md5BodyChecksumResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(applyMd5BodyChecksumMiddleware(config), applyMd5BodyChecksumMiddlewareOptions);\n  },\n});\n\nfunction hasHeader(soughtHeader: string, headers: HeaderBag): boolean {\n  soughtHeader = soughtHeader.toLowerCase();\n  for (const headerName of Object.keys(headers)) {\n    if (soughtHeader === headerName.toLowerCase()) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}