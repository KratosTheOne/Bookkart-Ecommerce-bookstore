{"ast":null,"code":"import { __awaiter, __generator, __rest } from \"tslib\";\nexport var loggerMiddleware = function () {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              clientName = context.clientName, commandName = context.commandName, inputFilterSensitiveLog = context.inputFilterSensitiveLog, logger = context.logger, outputFilterSensitiveLog = context.outputFilterSensitiveLog;\n              return [4\n              /*yield*/\n              , next(args)];\n\n            case 1:\n              response = _b.sent();\n\n              if (!logger) {\n                return [2\n                /*return*/\n                , response];\n              }\n\n              if (typeof logger.info === \"function\") {\n                _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = __rest(_a, [\"$metadata\"]);\n                logger.info({\n                  clientName: clientName,\n                  commandName: commandName,\n                  input: inputFilterSensitiveLog(args.input),\n                  output: outputFilterSensitiveLog(outputWithoutMetadata),\n                  metadata: $metadata\n                });\n              }\n\n              return [2\n              /*return*/\n              , response];\n          }\n        });\n      });\n    };\n  };\n};\nexport var loggerMiddlewareOptions = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"initialize\",\n  override: true\n}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport var getLoggerPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/loggerMiddleware.ts"],"names":[],"mappings":";AAYA,OAAO,IAAM,gBAAgB,GAAG,YAAA;AAAM,SAAA,UACpC,IADoC,EAEpC,OAFoC,EAEJ;AACG,WAAA,UACnC,IADmC,EACE;AAAA,aAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;AAE7B,cAAA,UAAU,GAA6E,OAAO,CAApF,UAAV,EAAY,WAAW,GAAgE,OAAO,CAAvE,WAAvB,EAAyB,uBAAuB,GAAuC,OAAO,CAA9C,uBAAhD,EAAkD,MAAM,GAA+B,OAAO,CAAtC,MAAxD,EAA0D,wBAAwB,GAAK,OAAO,CAAZ,wBAAlF;AAES,qBAAA,CAAA;AAAA;AAAA,gBAAM,IAAI,CAAC,IAAD,CAAV,CAAA;;;AAAX,cAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;;AAEN,kBAAI,CAAC,MAAL,EAAa;AACX,uBAAA,CAAA;AAAA;AAAA,kBAAO,QAAP,CAAA;AACD;;AAED,kBAAI,OAAO,MAAM,CAAC,IAAd,KAAuB,UAA3B,EAAuC;AAC/B,gBAAA,EAAA,GAA0C,QAAQ,CAAC,MAAnD,EAAE,SAAS,GAAA,EAAA,CAAA,SAAX,EAAgB,qBAAqB,GAAA,MAAA,CAAA,EAAA,EAArC,CAAA,WAAA,CAAqC,CAArC;AACN,gBAAA,MAAM,CAAC,IAAP,CAAY;AACV,kBAAA,UAAU,EAAA,UADA;AAEV,kBAAA,WAAW,EAAA,WAFD;AAGV,kBAAA,KAAK,EAAE,uBAAuB,CAAC,IAAI,CAAC,KAAN,CAHpB;AAIV,kBAAA,MAAM,EAAE,wBAAwB,CAAC,qBAAD,CAJtB;AAKV,kBAAA,QAAQ,EAAE;AALA,iBAAZ;AAOD;;AAED,qBAAA,CAAA;AAAA;AAAA,gBAAO,QAAP,CAAA;;;OArBqC,CAAA;AADF,KAAA;AAHC,GAAA;AA0BrC,CA1BM;AA4BP,OAAO,IAAM,uBAAuB,GAAgD;AAClF,EAAA,IAAI,EAAE,kBAD4E;AAElF,EAAA,IAAI,EAAE,CAAC,QAAD,CAF4E;AAGlF,EAAA,IAAI,EAAE,YAH4E;AAIlF,EAAA,QAAQ,EAAE;AAJwE,CAA7E,C,CAOP;;AACA,OAAO,IAAM,eAAe,GAAG,UAAC,OAAD,EAAa;AAA0B,SAAC;AACrE,IAAA,YAAY,EAAE,UAAC,WAAD,EAAY;AACxB,MAAA,WAAW,CAAC,GAAZ,CAAgB,gBAAgB,EAAhC,EAAoC,uBAApC;AACD;AAHoE,GAAD;AAIpE,CAJK","sourcesContent":["import { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport {\n  AbsoluteLocation,\n  HandlerExecutionContext,\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nexport const loggerMiddleware = () => <Output extends MetadataBearer = MetadataBearer>(\n  next: InitializeHandler<any, Output>,\n  context: HandlerExecutionContext\n): InitializeHandler<any, Output> => async (\n  args: InitializeHandlerArguments<any>\n): Promise<InitializeHandlerOutput<Output>> => {\n  const { clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog } = context;\n\n  const response = await next(args);\n\n  if (!logger) {\n    return response;\n  }\n\n  if (typeof logger.info === \"function\") {\n    const { $metadata, ...outputWithoutMetadata } = response.output;\n    logger.info({\n      clientName,\n      commandName,\n      input: inputFilterSensitiveLog(args.input),\n      output: outputFilterSensitiveLog(outputWithoutMetadata),\n      metadata: $metadata,\n    });\n  }\n\n  return response;\n};\n\nexport const loggerMiddlewareOptions: InitializeHandlerOptions & AbsoluteLocation = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"initialize\",\n  override: true,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const getLoggerPlugin = (options: any): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}