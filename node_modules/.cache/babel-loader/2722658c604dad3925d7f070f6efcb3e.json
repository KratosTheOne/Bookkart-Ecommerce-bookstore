{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nexport var resolveEndpointsConfig = function resolveEndpointsConfig(input) {\n  var _a;\n\n  return __assign(__assign({}, input), {\n    tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,\n    endpoint: input.endpoint ? normalizeEndpoint(input) : function () {\n      return getEndPointFromRegion(input);\n    },\n    isCustomEndpoint: input.endpoint ? true : false\n  });\n};\n\nvar normalizeEndpoint = function normalizeEndpoint(input) {\n  var endpoint = input.endpoint,\n      urlParser = input.urlParser;\n\n  if (typeof endpoint === \"string\") {\n    var promisified_1 = Promise.resolve(urlParser(endpoint));\n    return function () {\n      return promisified_1;\n    };\n  } else if (typeof endpoint === \"object\") {\n    var promisified_2 = Promise.resolve(endpoint);\n    return function () {\n      return promisified_2;\n    };\n  }\n\n  return endpoint;\n};\n\nvar getEndPointFromRegion = function getEndPointFromRegion(input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, tls, region, dnsHostRegex, hostname;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = input.tls, tls = _a === void 0 ? true : _a;\n          return [4\n          /*yield*/\n          , input.region()];\n\n        case 1:\n          region = _c.sent();\n          dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n\n          if (!dnsHostRegex.test(region)) {\n            throw new Error(\"Invalid region in client config\");\n          }\n\n          return [4\n          /*yield*/\n          , input.regionInfoProvider(region)];\n\n        case 2:\n          hostname = ((_b = _c.sent()) !== null && _b !== void 0 ? _b : {}).hostname;\n\n          if (!hostname) {\n            throw new Error(\"Cannot resolve hostname from client config\");\n          }\n\n          return [2\n          /*return*/\n          , input.urlParser((tls ? \"https:\" : \"http:\") + \"//\" + hostname)];\n      }\n    });\n  });\n};","map":{"version":3,"sources":["../../src/EndpointsConfig.ts"],"names":[],"mappings":";AAyBA,OAAO,IAAM,sBAAsB,GAAG,SAAzB,sBAAyB,CACpC,KADoC,EACgB;;;AACpB,SAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAC7B,KAD6B,CAAA,EACxB;AACR,IAAA,GAAG,EAAA,CAAA,EAAA,GAAE,KAAK,CAAC,GAAR,MAAW,IAAX,IAAW,EAAA,KAAA,KAAA,CAAX,GAAW,EAAX,GAAe,IADV;AAER,IAAA,QAAQ,EAAE,KAAK,CAAC,QAAN,GAAiB,iBAAiB,CAAC,KAAD,CAAlC,GAA4C,YAAA;AAAM,aAAA,qBAAqB,CAArB,KAAqB,CAArB;AAA4B,KAFhF;AAGR,IAAA,gBAAgB,EAAE,KAAK,CAAC,QAAN,GAAiB,IAAjB,GAAwB;AAHlC,GADwB,CAAA;AAKhC,CAPK;;AASP,IAAM,iBAAiB,GAAG,SAApB,iBAAoB,CAAC,KAAD,EAAiD;AACjE,MAAA,QAAQ,GAAgB,KAAK,CAArB,QAAR;AAAA,MAAU,SAAS,GAAK,KAAK,CAAV,SAAnB;;AACR,MAAI,OAAO,QAAP,KAAoB,QAAxB,EAAkC;AAChC,QAAM,aAAW,GAAG,OAAO,CAAC,OAAR,CAAgB,SAAS,CAAC,QAAD,CAAzB,CAApB;AACA,WAAO,YAAA;AAAM,aAAA,aAAA;AAAW,KAAxB;AACD,GAHD,MAGO,IAAI,OAAO,QAAP,KAAoB,QAAxB,EAAkC;AACvC,QAAM,aAAW,GAAG,OAAO,CAAC,OAAR,CAAgB,QAAhB,CAApB;AACA,WAAO,YAAA;AAAM,aAAA,aAAA;AAAW,KAAxB;AACD;;AACD,SAAO,QAAP;AACD,CAVD;;AAYA,IAAM,qBAAqB,GAAG,SAAxB,qBAAwB,CAAO,KAAP,EAAuD;AAAA,SAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;;AAC3E,UAAA,EAAA,GAAe,KAAK,CAAV,GAAV,EAAA,GAAG,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,EAAV;AACO,iBAAA,CAAA;AAAA;AAAA,YAAM,KAAK,CAAC,MAAN,EAAN,CAAA;;;AAAT,UAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AAEA,UAAA,YAAY,GAAG,IAAI,MAAJ,CAAW,0DAAX,CAAf;;AACN,cAAI,CAAC,YAAY,CAAC,IAAb,CAAkB,MAAlB,CAAL,EAAgC;AAC9B,kBAAM,IAAI,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAEqB,iBAAA,CAAA;AAAA;AAAA,YAAM,KAAK,CAAC,kBAAN,CAAyB,MAAzB,CAAN,CAAA;;;AAAd,UAAA,QAAQ,GAAA,CAAA,CAAA,EAAA,GAAM,EAAA,CAAA,IAAA,EAAN,MAA6C,IAA7C,IAA6C,EAAA,KAAA,KAAA,CAA7C,GAA6C,EAA7C,GAAiD,EAAjD,EAAA,QAAR;;AACR,cAAI,CAAC,QAAL,EAAe;AACb,kBAAM,IAAI,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAED,iBAAA,CAAA;AAAA;AAAA,YAAO,KAAK,CAAC,SAAN,CAAgB,CAAG,GAAG,GAAG,QAAH,GAAc,OAApB,IAA2B,IAA3B,GAAgC,QAAhD,CAAP,CAAA;;;GAdmF,CAAA;AAepF,CAfD","sourcesContent":["import { Endpoint, Provider, RegionInfoProvider, UrlParser } from \"@aws-sdk/types\";\n\nexport interface EndpointsInputConfig {\n  /**\n   * The fully qualified endpoint of the webservice. This is only required when using a custom endpoint (for example, when using a local version of S3).\n   */\n  endpoint?: string | Endpoint | Provider<Endpoint>;\n\n  /**\n   * Whether TLS is enabled for requests.\n   */\n  tls?: boolean;\n}\n\ninterface PreviouslyResolved {\n  regionInfoProvider: RegionInfoProvider;\n  urlParser: UrlParser;\n  region: Provider<string>;\n}\n\nexport interface EndpointsResolvedConfig extends Required<EndpointsInputConfig> {\n  endpoint: Provider<Endpoint>;\n  isCustomEndpoint: boolean;\n}\n\nexport const resolveEndpointsConfig = <T>(\n  input: T & EndpointsInputConfig & PreviouslyResolved\n): T & EndpointsResolvedConfig => ({\n  ...input,\n  tls: input.tls ?? true,\n  endpoint: input.endpoint ? normalizeEndpoint(input) : () => getEndPointFromRegion(input),\n  isCustomEndpoint: input.endpoint ? true : false,\n});\n\nconst normalizeEndpoint = (input: EndpointsInputConfig & PreviouslyResolved): Provider<Endpoint> => {\n  const { endpoint, urlParser } = input;\n  if (typeof endpoint === \"string\") {\n    const promisified = Promise.resolve(urlParser(endpoint));\n    return () => promisified;\n  } else if (typeof endpoint === \"object\") {\n    const promisified = Promise.resolve(endpoint);\n    return () => promisified;\n  }\n  return endpoint!;\n};\n\nconst getEndPointFromRegion = async (input: EndpointsInputConfig & PreviouslyResolved) => {\n  const { tls = true } = input;\n  const region = await input.region();\n\n  const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n  if (!dnsHostRegex.test(region)) {\n    throw new Error(\"Invalid region in client config\");\n  }\n\n  const { hostname } = (await input.regionInfoProvider(region)) ?? {};\n  if (!hostname) {\n    throw new Error(\"Cannot resolve hostname from client config\");\n  }\n\n  return input.urlParser(`${tls ? \"https:\" : \"http:\"}//${hostname}`);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}