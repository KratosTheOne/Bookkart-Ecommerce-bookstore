{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { browserOrNode, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ModelPredicateCreator } from '../predicates';\nimport { OpType } from '../types';\nimport { exhaustiveCheck, getNow, SYNC } from '../util';\nimport DataStoreConnectivity from './datastoreConnectivity';\nimport { ModelMerger } from './merger';\nimport { MutationEventOutbox } from './outbox';\nimport { MutationProcessor } from './processors/mutation';\nimport { CONTROL_MSG, SubscriptionProcessor } from './processors/subscription';\nimport { SyncProcessor } from './processors/sync';\nimport { createMutationInstanceFromModelOperation, predicateToGraphQLCondition } from './utils';\nvar isNode = browserOrNode().isNode;\nvar logger = new Logger('DataStore');\nvar ownSymbol = Symbol('sync');\nexport var ControlMessage;\n\n(function (ControlMessage) {\n  ControlMessage[\"SYNC_ENGINE_STORAGE_SUBSCRIBED\"] = \"storageSubscribed\";\n  ControlMessage[\"SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED\"] = \"subscriptionsEstablished\";\n  ControlMessage[\"SYNC_ENGINE_SYNC_QUERIES_STARTED\"] = \"syncQueriesStarted\";\n  ControlMessage[\"SYNC_ENGINE_SYNC_QUERIES_READY\"] = \"syncQueriesReady\";\n  ControlMessage[\"SYNC_ENGINE_MODEL_SYNCED\"] = \"modelSynced\";\n  ControlMessage[\"SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED\"] = \"outboxMutationEnqueued\";\n  ControlMessage[\"SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED\"] = \"outboxMutationProcessed\";\n  ControlMessage[\"SYNC_ENGINE_OUTBOX_STATUS\"] = \"outboxStatus\";\n  ControlMessage[\"SYNC_ENGINE_NETWORK_STATUS\"] = \"networkStatus\";\n  ControlMessage[\"SYNC_ENGINE_READY\"] = \"ready\";\n})(ControlMessage || (ControlMessage = {}));\n\nvar SyncEngine =\n/** @class */\nfunction () {\n  function SyncEngine(schema, namespaceResolver, modelClasses, userModelClasses, storage, modelInstanceCreator, maxRecordsToSync, syncPageSize, conflictHandler, errorHandler, syncPredicates, amplifyConfig, authModeStrategy) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n\n    this.schema = schema;\n    this.namespaceResolver = namespaceResolver;\n    this.modelClasses = modelClasses;\n    this.userModelClasses = userModelClasses;\n    this.storage = storage;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.maxRecordsToSync = maxRecordsToSync;\n    this.syncPageSize = syncPageSize;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.online = false;\n    var MutationEvent = this.modelClasses['MutationEvent'];\n    this.outbox = new MutationEventOutbox(this.schema, MutationEvent, modelInstanceCreator, ownSymbol);\n    this.modelMerger = new ModelMerger(this.outbox, ownSymbol);\n    this.syncQueriesProcessor = new SyncProcessor(this.schema, this.maxRecordsToSync, this.syncPageSize, this.syncPredicates, this.amplifyConfig, this.authModeStrategy);\n    this.subscriptionsProcessor = new SubscriptionProcessor(this.schema, this.syncPredicates, this.amplifyConfig, this.authModeStrategy);\n    this.mutationsProcessor = new MutationProcessor(this.schema, this.storage, this.userModelClasses, this.outbox, this.modelInstanceCreator, MutationEvent, this.amplifyConfig, this.authModeStrategy, conflictHandler, errorHandler);\n    this.datastoreConnectivity = new DataStoreConnectivity();\n  }\n\n  SyncEngine.prototype.start = function (params) {\n    var _this = this;\n\n    return new Observable(function (observer) {\n      logger.log('starting sync engine...');\n      var subscriptions = [];\n\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var err_1, startPromise, hasMutationsInOutbox;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                _a.trys.push([0, 2,, 3]);\n\n                return [4\n                /*yield*/\n                , this.setupModels(params)];\n\n              case 1:\n                _a.sent();\n\n                return [3\n                /*break*/\n                , 3];\n\n              case 2:\n                err_1 = _a.sent();\n                observer.error(err_1);\n                return [2\n                /*return*/\n                ];\n\n              case 3:\n                startPromise = new Promise(function (resolve) {\n                  _this.datastoreConnectivity.status().subscribe(function (_a) {\n                    var online = _a.online;\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var ctlSubsObservable_1, dataSubsObservable, err_2, error_1;\n\n                      var _b;\n\n                      var _this = this;\n\n                      return __generator(this, function (_c) {\n                        switch (_c.label) {\n                          case 0:\n                            if (!(online && !this.online)) return [3\n                            /*break*/\n                            , 10];\n                            this.online = online;\n                            observer.next({\n                              type: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,\n                              data: {\n                                active: this.online\n                              }\n                            });\n                            dataSubsObservable = void 0;\n                            if (!isNode) return [3\n                            /*break*/\n                            , 1];\n                            logger.warn('Realtime disabled when in a server-side environment');\n                            return [3\n                            /*break*/\n                            , 6];\n\n                          case 1:\n                            //#region GraphQL Subscriptions\n                            _b = __read(this.subscriptionsProcessor.start(), 2), // const ctlObservable: Observable<CONTROL_MSG>\n                            ctlSubsObservable_1 = _b[0], // const dataObservable: Observable<[TransformerMutationType, SchemaModel, Readonly<{\n                            // id: string;\n                            // } & Record<string, any>>]>\n                            dataSubsObservable = _b[1];\n                            _c.label = 2;\n\n                          case 2:\n                            _c.trys.push([2, 4,, 5]);\n\n                            return [4\n                            /*yield*/\n                            , new Promise(function (resolve, reject) {\n                              var ctlSubsSubscription = ctlSubsObservable_1.subscribe({\n                                next: function (msg) {\n                                  if (msg === CONTROL_MSG.CONNECTED) {\n                                    resolve();\n                                  }\n                                },\n                                error: function (err) {\n                                  reject(err);\n\n                                  var handleDisconnect = _this.disconnectionHandler();\n\n                                  handleDisconnect(err);\n                                }\n                              });\n                              subscriptions.push(ctlSubsSubscription);\n                            })];\n\n                          case 3:\n                            _c.sent();\n\n                            return [3\n                            /*break*/\n                            , 5];\n\n                          case 4:\n                            err_2 = _c.sent();\n                            observer.error(err_2);\n                            return [2\n                            /*return*/\n                            ];\n\n                          case 5:\n                            logger.log('Realtime ready');\n                            observer.next({\n                              type: ControlMessage.SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED\n                            });\n                            _c.label = 6;\n\n                          case 6:\n                            _c.trys.push([6, 8,, 9]);\n\n                            return [4\n                            /*yield*/\n                            , new Promise(function (resolve, reject) {\n                              var syncQuerySubscription = _this.syncQueriesObservable().subscribe({\n                                next: function (message) {\n                                  var type = message.type;\n\n                                  if (type === ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY) {\n                                    resolve();\n                                  }\n\n                                  observer.next(message);\n                                },\n                                complete: function () {\n                                  resolve();\n                                },\n                                error: function (error) {\n                                  reject(error);\n                                }\n                              });\n\n                              if (syncQuerySubscription) {\n                                subscriptions.push(syncQuerySubscription);\n                              }\n                            })];\n\n                          case 7:\n                            _c.sent();\n\n                            return [3\n                            /*break*/\n                            , 9];\n\n                          case 8:\n                            error_1 = _c.sent();\n                            observer.error(error_1);\n                            return [2\n                            /*return*/\n                            ];\n\n                          case 9:\n                            //#endregion\n                            //#region process mutations\n                            subscriptions.push(this.mutationsProcessor.start().subscribe(function (_a) {\n                              var modelDefinition = _a.modelDefinition,\n                                  item = _a.model,\n                                  hasMore = _a.hasMore;\n                              var modelConstructor = _this.userModelClasses[modelDefinition.name];\n\n                              var model = _this.modelInstanceCreator(modelConstructor, item);\n\n                              _this.storage.runExclusive(function (storage) {\n                                return _this.modelMerger.merge(storage, model);\n                              });\n\n                              observer.next({\n                                type: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED,\n                                data: {\n                                  model: modelConstructor,\n                                  element: model\n                                }\n                              });\n                              observer.next({\n                                type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                                data: {\n                                  isEmpty: !hasMore\n                                }\n                              });\n                            })); //#endregion\n                            //#region Merge subscriptions buffer\n                            // TODO: extract to function\n\n                            if (!isNode) {\n                              subscriptions.push(dataSubsObservable.subscribe(function (_a) {\n                                var _b = __read(_a, 3),\n                                    _transformerMutationType = _b[0],\n                                    modelDefinition = _b[1],\n                                    item = _b[2];\n\n                                var modelConstructor = _this.userModelClasses[modelDefinition.name];\n\n                                var model = _this.modelInstanceCreator(modelConstructor, item);\n\n                                _this.storage.runExclusive(function (storage) {\n                                  return _this.modelMerger.merge(storage, model);\n                                });\n                              }));\n                            }\n\n                            return [3\n                            /*break*/\n                            , 11];\n\n                          case 10:\n                            if (!online) {\n                              this.online = online;\n                              observer.next({\n                                type: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,\n                                data: {\n                                  active: this.online\n                                }\n                              });\n                              subscriptions.forEach(function (sub) {\n                                return sub.unsubscribe();\n                              });\n                              subscriptions = [];\n                            }\n\n                            _c.label = 11;\n\n                          case 11:\n                            resolve();\n                            return [2\n                            /*return*/\n                            ];\n                        }\n                      });\n                    });\n                  });\n                });\n                this.storage.observe(null, null, ownSymbol).filter(function (_a) {\n                  var model = _a.model;\n\n                  var modelDefinition = _this.getModelDefinition(model);\n\n                  return modelDefinition.syncable === true;\n                }).subscribe({\n                  next: function (_a) {\n                    var opType = _a.opType,\n                        model = _a.model,\n                        element = _a.element,\n                        condition = _a.condition;\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var namespace, MutationEventConstructor, graphQLCondition, mutationEvent;\n                      return __generator(this, function (_b) {\n                        switch (_b.label) {\n                          case 0:\n                            namespace = this.schema.namespaces[this.namespaceResolver(model)];\n                            MutationEventConstructor = this.modelClasses['MutationEvent'];\n                            graphQLCondition = predicateToGraphQLCondition(condition);\n                            mutationEvent = createMutationInstanceFromModelOperation(namespace.relationships, this.getModelDefinition(model), opType, model, element, graphQLCondition, MutationEventConstructor, this.modelInstanceCreator);\n                            return [4\n                            /*yield*/\n                            , this.outbox.enqueue(this.storage, mutationEvent)];\n\n                          case 1:\n                            _b.sent();\n\n                            observer.next({\n                              type: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED,\n                              data: {\n                                model: model,\n                                element: element\n                              }\n                            });\n                            observer.next({\n                              type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                              data: {\n                                isEmpty: false\n                              }\n                            });\n                            return [4\n                            /*yield*/\n                            , startPromise];\n\n                          case 2:\n                            _b.sent();\n\n                            if (this.online) {\n                              this.mutationsProcessor.resume();\n                            }\n\n                            return [2\n                            /*return*/\n                            ];\n                        }\n                      });\n                    });\n                  }\n                });\n                observer.next({\n                  type: ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED\n                });\n                return [4\n                /*yield*/\n                , this.outbox.peek(this.storage)];\n\n              case 4:\n                hasMutationsInOutbox = _a.sent() === undefined;\n                observer.next({\n                  type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                  data: {\n                    isEmpty: hasMutationsInOutbox\n                  }\n                });\n                return [4\n                /*yield*/\n                , startPromise];\n\n              case 5:\n                _a.sent();\n\n                observer.next({\n                  type: ControlMessage.SYNC_ENGINE_READY\n                });\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        subscriptions.forEach(function (sub) {\n          return sub.unsubscribe();\n        });\n      };\n    });\n  };\n\n  SyncEngine.prototype.getModelsMetadataWithNextFullSync = function (currentTimeStamp) {\n    return __awaiter(this, void 0, void 0, function () {\n      var modelLastSync, _a;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = Map.bind;\n            return [4\n            /*yield*/\n            , this.getModelsMetadata()];\n\n          case 1:\n            modelLastSync = new (_a.apply(Map, [void 0, _b.sent().map(function (_a) {\n              var namespace = _a.namespace,\n                  model = _a.model,\n                  lastSync = _a.lastSync,\n                  lastFullSync = _a.lastFullSync,\n                  fullSyncInterval = _a.fullSyncInterval,\n                  lastSyncPredicate = _a.lastSyncPredicate;\n              var nextFullSync = lastFullSync + fullSyncInterval;\n              var syncFrom = !lastFullSync || nextFullSync < currentTimeStamp ? 0 // perform full sync if expired\n              : lastSync; // perform delta sync\n\n              return [_this.schema.namespaces[namespace].models[model], [namespace, syncFrom]];\n            })]))();\n            return [2\n            /*return*/\n            , modelLastSync];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.syncQueriesObservable = function () {\n    var _this = this;\n\n    if (!this.online) {\n      return Observable.of();\n    }\n\n    return new Observable(function (observer) {\n      var syncQueriesSubscription;\n      var waitTimeoutId;\n\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _loop_1, this_1;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                _loop_1 = function () {\n                  var count, modelLastSync, paginatingModels, newestFullSyncStartedAt, theInterval, start, duration, newestStartedAt, msNextFullSync;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        count = new WeakMap();\n                        return [4\n                        /*yield*/\n                        , this_1.getModelsMetadataWithNextFullSync(Date.now())];\n\n                      case 1:\n                        modelLastSync = _a.sent();\n                        paginatingModels = new Set(modelLastSync.keys());\n                        return [4\n                        /*yield*/\n                        , new Promise(function (resolve) {\n                          syncQueriesSubscription = _this.syncQueriesProcessor.start(modelLastSync).subscribe({\n                            next: function (_a) {\n                              var namespace = _a.namespace,\n                                  modelDefinition = _a.modelDefinition,\n                                  items = _a.items,\n                                  done = _a.done,\n                                  startedAt = _a.startedAt,\n                                  isFullSync = _a.isFullSync;\n                              return __awaiter(_this, void 0, void 0, function () {\n                                var modelConstructor, modelName, modelMetadata_1, lastFullSync, fullSyncInterval, counts;\n\n                                var _this = this;\n\n                                return __generator(this, function (_b) {\n                                  switch (_b.label) {\n                                    case 0:\n                                      modelConstructor = this.userModelClasses[modelDefinition.name];\n\n                                      if (!count.has(modelConstructor)) {\n                                        count.set(modelConstructor, {\n                                          new: 0,\n                                          updated: 0,\n                                          deleted: 0\n                                        });\n                                        start = getNow();\n                                        newestStartedAt = newestStartedAt === undefined ? startedAt : Math.max(newestStartedAt, startedAt);\n                                      }\n                                      /**\n                                       * If there are mutations in the outbox for a given id, those need to be\n                                       * merged individually. Otherwise, we can merge them in batches.\n                                       */\n\n\n                                      return [4\n                                      /*yield*/\n                                      , this.storage.runExclusive(function (storage) {\n                                        return __awaiter(_this, void 0, void 0, function () {\n                                          var idsInOutbox, oneByOne, page, opTypeCount, oneByOne_1, oneByOne_1_1, item, opType, e_1_1, _a, _b, _c, counts;\n\n                                          var e_1, _d;\n\n                                          return __generator(this, function (_e) {\n                                            switch (_e.label) {\n                                              case 0:\n                                                return [4\n                                                /*yield*/\n                                                , this.outbox.getModelIds(storage)];\n\n                                              case 1:\n                                                idsInOutbox = _e.sent();\n                                                oneByOne = [];\n                                                page = items.filter(function (item) {\n                                                  if (!idsInOutbox.has(item.id)) {\n                                                    return true;\n                                                  }\n\n                                                  oneByOne.push(item);\n                                                  return false;\n                                                });\n                                                opTypeCount = [];\n                                                _e.label = 2;\n\n                                              case 2:\n                                                _e.trys.push([2, 7, 8, 9]);\n\n                                                oneByOne_1 = __values(oneByOne), oneByOne_1_1 = oneByOne_1.next();\n                                                _e.label = 3;\n\n                                              case 3:\n                                                if (!!oneByOne_1_1.done) return [3\n                                                /*break*/\n                                                , 6];\n                                                item = oneByOne_1_1.value;\n                                                return [4\n                                                /*yield*/\n                                                , this.modelMerger.merge(storage, item)];\n\n                                              case 4:\n                                                opType = _e.sent();\n\n                                                if (opType !== undefined) {\n                                                  opTypeCount.push([item, opType]);\n                                                }\n\n                                                _e.label = 5;\n\n                                              case 5:\n                                                oneByOne_1_1 = oneByOne_1.next();\n                                                return [3\n                                                /*break*/\n                                                , 3];\n\n                                              case 6:\n                                                return [3\n                                                /*break*/\n                                                , 9];\n\n                                              case 7:\n                                                e_1_1 = _e.sent();\n                                                e_1 = {\n                                                  error: e_1_1\n                                                };\n                                                return [3\n                                                /*break*/\n                                                , 9];\n\n                                              case 8:\n                                                try {\n                                                  if (oneByOne_1_1 && !oneByOne_1_1.done && (_d = oneByOne_1.return)) _d.call(oneByOne_1);\n                                                } finally {\n                                                  if (e_1) throw e_1.error;\n                                                }\n\n                                                return [7\n                                                /*endfinally*/\n                                                ];\n\n                                              case 9:\n                                                _b = (_a = opTypeCount.push).apply;\n                                                _c = [opTypeCount];\n                                                return [4\n                                                /*yield*/\n                                                , this.modelMerger.mergePage(storage, modelConstructor, page)];\n\n                                              case 10:\n                                                _b.apply(_a, _c.concat([__spread.apply(void 0, [_e.sent()])]));\n\n                                                counts = count.get(modelConstructor);\n                                                opTypeCount.forEach(function (_a) {\n                                                  var _b = __read(_a, 2),\n                                                      opType = _b[1];\n\n                                                  switch (opType) {\n                                                    case OpType.INSERT:\n                                                      counts.new++;\n                                                      break;\n\n                                                    case OpType.UPDATE:\n                                                      counts.updated++;\n                                                      break;\n\n                                                    case OpType.DELETE:\n                                                      counts.deleted++;\n                                                      break;\n\n                                                    default:\n                                                      exhaustiveCheck(opType);\n                                                  }\n                                                });\n                                                return [2\n                                                /*return*/\n                                                ];\n                                            }\n                                          });\n                                        });\n                                      })];\n\n                                    case 1:\n                                      /**\n                                       * If there are mutations in the outbox for a given id, those need to be\n                                       * merged individually. Otherwise, we can merge them in batches.\n                                       */\n                                      _b.sent();\n\n                                      if (!done) return [3\n                                      /*break*/\n                                      , 4];\n                                      modelName = modelDefinition.name;\n                                      return [4\n                                      /*yield*/\n                                      , this.getModelMetadata(namespace, modelName)];\n\n                                    case 2:\n                                      modelMetadata_1 = _b.sent();\n                                      lastFullSync = modelMetadata_1.lastFullSync, fullSyncInterval = modelMetadata_1.fullSyncInterval;\n                                      theInterval = fullSyncInterval;\n                                      newestFullSyncStartedAt = newestFullSyncStartedAt === undefined ? lastFullSync : Math.max(newestFullSyncStartedAt, isFullSync ? startedAt : lastFullSync);\n                                      modelMetadata_1 = this.modelClasses.ModelMetadata.copyOf(modelMetadata_1, function (draft) {\n                                        draft.lastSync = startedAt;\n                                        draft.lastFullSync = isFullSync ? startedAt : modelMetadata_1.lastFullSync;\n                                      });\n                                      return [4\n                                      /*yield*/\n                                      , this.storage.save(modelMetadata_1, undefined, ownSymbol)];\n\n                                    case 3:\n                                      _b.sent();\n\n                                      counts = count.get(modelConstructor);\n                                      observer.next({\n                                        type: ControlMessage.SYNC_ENGINE_MODEL_SYNCED,\n                                        data: {\n                                          model: modelConstructor,\n                                          isFullSync: isFullSync,\n                                          isDeltaSync: !isFullSync,\n                                          counts: counts\n                                        }\n                                      });\n                                      paginatingModels.delete(modelDefinition);\n\n                                      if (paginatingModels.size === 0) {\n                                        duration = getNow() - start;\n                                        resolve();\n                                        observer.next({\n                                          type: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY\n                                        });\n                                        syncQueriesSubscription.unsubscribe();\n                                      }\n\n                                      _b.label = 4;\n\n                                    case 4:\n                                      return [2\n                                      /*return*/\n                                      ];\n                                  }\n                                });\n                              });\n                            },\n                            error: function (error) {\n                              observer.error(error);\n                            }\n                          });\n                          observer.next({\n                            type: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_STARTED,\n                            data: {\n                              models: Array.from(paginatingModels).map(function (_a) {\n                                var name = _a.name;\n                                return name;\n                              })\n                            }\n                          });\n                        })];\n\n                      case 2:\n                        _a.sent();\n\n                        msNextFullSync = newestFullSyncStartedAt + theInterval - (newestStartedAt + duration);\n                        logger.debug(\"Next fullSync in \" + msNextFullSync / 1000 + \" seconds. (\" + new Date(Date.now() + msNextFullSync) + \")\");\n                        return [4\n                        /*yield*/\n                        , new Promise(function (res) {\n                          waitTimeoutId = setTimeout(res, msNextFullSync);\n                        })];\n\n                      case 3:\n                        _a.sent();\n\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                };\n\n                this_1 = this;\n                _a.label = 1;\n\n              case 1:\n                if (!!observer.closed) return [3\n                /*break*/\n                , 3];\n                return [5\n                /*yield**/\n                , _loop_1()];\n\n              case 2:\n                _a.sent();\n\n                return [3\n                /*break*/\n                , 1];\n\n              case 3:\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        if (syncQueriesSubscription) {\n          syncQueriesSubscription.unsubscribe();\n        }\n\n        if (waitTimeoutId) {\n          clearTimeout(waitTimeoutId);\n        }\n      };\n    });\n  };\n\n  SyncEngine.prototype.disconnectionHandler = function () {\n    var _this = this;\n\n    return function (msg) {\n      // This implementation is tied to AWSAppSyncRealTimeProvider 'Connection closed', 'Timeout disconnect' msg\n      if (PUBSUB_CONTROL_MSG.CONNECTION_CLOSED === msg || PUBSUB_CONTROL_MSG.TIMEOUT_DISCONNECT === msg) {\n        _this.datastoreConnectivity.socketDisconnected();\n      }\n    };\n  };\n\n  SyncEngine.prototype.unsubscribeConnectivity = function () {\n    this.datastoreConnectivity.unsubscribe();\n  };\n\n  SyncEngine.prototype.setupModels = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fullSyncInterval, ModelMetadata, models, savedModel, promises, result, _a, _b, modelMetadata, modelName, e_2_1;\n\n      var e_2, _c;\n\n      var _this = this;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            fullSyncInterval = params.fullSyncInterval;\n            ModelMetadata = this.modelClasses.ModelMetadata;\n            models = [];\n            Object.values(this.schema.namespaces).forEach(function (namespace) {\n              Object.values(namespace.models).filter(function (_a) {\n                var syncable = _a.syncable;\n                return syncable;\n              }).forEach(function (model) {\n                models.push([namespace.name, model]);\n              });\n            });\n            promises = models.map(function (_a) {\n              var _b = __read(_a, 2),\n                  namespace = _b[0],\n                  model = _b[1];\n\n              return __awaiter(_this, void 0, void 0, function () {\n                var modelMetadata, syncPredicate, lastSyncPredicate, prevSyncPredicate, syncPredicateUpdated_1;\n\n                var _c, _d, _e, _f;\n\n                return __generator(this, function (_g) {\n                  switch (_g.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this.getModelMetadata(namespace, model.name)];\n\n                    case 1:\n                      modelMetadata = _g.sent();\n                      syncPredicate = ModelPredicateCreator.getPredicates(this.syncPredicates.get(model), false);\n                      lastSyncPredicate = syncPredicate ? JSON.stringify(syncPredicate) : null;\n                      if (!(modelMetadata === undefined)) return [3\n                      /*break*/\n                      , 3];\n                      return [4\n                      /*yield*/\n                      , this.storage.save(this.modelInstanceCreator(ModelMetadata, {\n                        model: model.name,\n                        namespace: namespace,\n                        lastSync: null,\n                        fullSyncInterval: fullSyncInterval,\n                        lastFullSync: null,\n                        lastSyncPredicate: lastSyncPredicate\n                      }), undefined, ownSymbol)];\n\n                    case 2:\n                      _c = __read.apply(void 0, [_g.sent(), 1]), _d = __read(_c[0], 1), savedModel = _d[0];\n                      return [3\n                      /*break*/\n                      , 5];\n\n                    case 3:\n                      prevSyncPredicate = modelMetadata.lastSyncPredicate ? modelMetadata.lastSyncPredicate : null;\n                      syncPredicateUpdated_1 = prevSyncPredicate !== lastSyncPredicate;\n                      return [4\n                      /*yield*/\n                      , this.storage.save(this.modelClasses.ModelMetadata.copyOf(modelMetadata, function (draft) {\n                        draft.fullSyncInterval = fullSyncInterval; // perform a base sync if the syncPredicate changed in between calls to DataStore.start\n                        // ensures that the local store contains all the data specified by the syncExpression\n\n                        if (syncPredicateUpdated_1) {\n                          draft.lastSync = null;\n                          draft.lastFullSync = null;\n                          draft.lastSyncPredicate = lastSyncPredicate;\n                        }\n                      }))];\n\n                    case 4:\n                      _e = __read.apply(void 0, [_g.sent(), 1]), _f = __read(_e[0], 1), savedModel = _f[0];\n                      _g.label = 5;\n\n                    case 5:\n                      return [2\n                      /*return*/\n                      , savedModel];\n                  }\n                });\n              });\n            });\n            result = {};\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 2:\n            _a = __values.apply(void 0, [_d.sent()]), _b = _a.next();\n            _d.label = 3;\n\n          case 3:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            modelMetadata = _b.value;\n            modelName = modelMetadata.model;\n            result[modelName] = modelMetadata;\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 3];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_2_1 = _d.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.getModelsMetadata = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var ModelMetadata, modelsMetadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ModelMetadata = this.modelClasses.ModelMetadata;\n            return [4\n            /*yield*/\n            , this.storage.query(ModelMetadata)];\n\n          case 1:\n            modelsMetadata = _a.sent();\n            return [2\n            /*return*/\n            , modelsMetadata];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.getModelMetadata = function (namespace, model) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ModelMetadata, predicate, _a, modelMetadata;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            ModelMetadata = this.modelClasses.ModelMetadata;\n            predicate = ModelPredicateCreator.createFromExisting(this.schema.namespaces[SYNC].models[ModelMetadata.name], function (c) {\n              return c.namespace('eq', namespace).model('eq', model);\n            });\n            return [4\n            /*yield*/\n            , this.storage.query(ModelMetadata, predicate, {\n              page: 0,\n              limit: 1\n            })];\n\n          case 1:\n            _a = __read.apply(void 0, [_b.sent(), 1]), modelMetadata = _a[0];\n            return [2\n            /*return*/\n            , modelMetadata];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.getModelDefinition = function (modelConstructor) {\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var modelDefinition = this.schema.namespaces[namespaceName].models[modelConstructor.name];\n    return modelDefinition;\n  };\n\n  SyncEngine.getNamespace = function () {\n    var namespace = {\n      name: SYNC,\n      relationships: {},\n      enums: {\n        OperationType: {\n          name: 'OperationType',\n          values: ['CREATE', 'UPDATE', 'DELETE']\n        }\n      },\n      nonModels: {},\n      models: {\n        MutationEvent: {\n          name: 'MutationEvent',\n          pluralName: 'MutationEvents',\n          syncable: false,\n          fields: {\n            id: {\n              name: 'id',\n              type: 'ID',\n              isRequired: true,\n              isArray: false\n            },\n            model: {\n              name: 'model',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            data: {\n              name: 'data',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            modelId: {\n              name: 'modelId',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            operation: {\n              name: 'operation',\n              type: {\n                enum: 'Operationtype'\n              },\n              isArray: false,\n              isRequired: true\n            },\n            condition: {\n              name: 'condition',\n              type: 'String',\n              isArray: false,\n              isRequired: true\n            }\n          }\n        },\n        ModelMetadata: {\n          name: 'ModelMetadata',\n          pluralName: 'ModelsMetadata',\n          syncable: false,\n          fields: {\n            id: {\n              name: 'id',\n              type: 'ID',\n              isRequired: true,\n              isArray: false\n            },\n            namespace: {\n              name: 'namespace',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            model: {\n              name: 'model',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            lastSync: {\n              name: 'lastSync',\n              type: 'Int',\n              isRequired: false,\n              isArray: false\n            },\n            lastFullSync: {\n              name: 'lastFullSync',\n              type: 'Int',\n              isRequired: false,\n              isArray: false\n            },\n            fullSyncInterval: {\n              name: 'fullSyncInterval',\n              type: 'Int',\n              isRequired: true,\n              isArray: false\n            }\n          }\n        }\n      }\n    };\n    return namespace;\n  };\n\n  return SyncEngine;\n}();\n\nexport { SyncEngine };","map":{"version":3,"sources":["../../src/sync/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport { browserOrNode, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ModelPredicateCreator } from '../predicates';\nimport { OpType, } from '../types';\nimport { exhaustiveCheck, getNow, SYNC } from '../util';\nimport DataStoreConnectivity from './datastoreConnectivity';\nimport { ModelMerger } from './merger';\nimport { MutationEventOutbox } from './outbox';\nimport { MutationProcessor } from './processors/mutation';\nimport { CONTROL_MSG, SubscriptionProcessor } from './processors/subscription';\nimport { SyncProcessor } from './processors/sync';\nimport { createMutationInstanceFromModelOperation, predicateToGraphQLCondition, } from './utils';\nvar isNode = browserOrNode().isNode;\nvar logger = new Logger('DataStore');\nvar ownSymbol = Symbol('sync');\nexport var ControlMessage;\n(function (ControlMessage) {\n    ControlMessage[\"SYNC_ENGINE_STORAGE_SUBSCRIBED\"] = \"storageSubscribed\";\n    ControlMessage[\"SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED\"] = \"subscriptionsEstablished\";\n    ControlMessage[\"SYNC_ENGINE_SYNC_QUERIES_STARTED\"] = \"syncQueriesStarted\";\n    ControlMessage[\"SYNC_ENGINE_SYNC_QUERIES_READY\"] = \"syncQueriesReady\";\n    ControlMessage[\"SYNC_ENGINE_MODEL_SYNCED\"] = \"modelSynced\";\n    ControlMessage[\"SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED\"] = \"outboxMutationEnqueued\";\n    ControlMessage[\"SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED\"] = \"outboxMutationProcessed\";\n    ControlMessage[\"SYNC_ENGINE_OUTBOX_STATUS\"] = \"outboxStatus\";\n    ControlMessage[\"SYNC_ENGINE_NETWORK_STATUS\"] = \"networkStatus\";\n    ControlMessage[\"SYNC_ENGINE_READY\"] = \"ready\";\n})(ControlMessage || (ControlMessage = {}));\nvar SyncEngine = /** @class */ (function () {\n    function SyncEngine(schema, namespaceResolver, modelClasses, userModelClasses, storage, modelInstanceCreator, maxRecordsToSync, syncPageSize, conflictHandler, errorHandler, syncPredicates, amplifyConfig, authModeStrategy) {\n        if (amplifyConfig === void 0) { amplifyConfig = {}; }\n        this.schema = schema;\n        this.namespaceResolver = namespaceResolver;\n        this.modelClasses = modelClasses;\n        this.userModelClasses = userModelClasses;\n        this.storage = storage;\n        this.modelInstanceCreator = modelInstanceCreator;\n        this.maxRecordsToSync = maxRecordsToSync;\n        this.syncPageSize = syncPageSize;\n        this.syncPredicates = syncPredicates;\n        this.amplifyConfig = amplifyConfig;\n        this.authModeStrategy = authModeStrategy;\n        this.online = false;\n        var MutationEvent = this.modelClasses['MutationEvent'];\n        this.outbox = new MutationEventOutbox(this.schema, MutationEvent, modelInstanceCreator, ownSymbol);\n        this.modelMerger = new ModelMerger(this.outbox, ownSymbol);\n        this.syncQueriesProcessor = new SyncProcessor(this.schema, this.maxRecordsToSync, this.syncPageSize, this.syncPredicates, this.amplifyConfig, this.authModeStrategy);\n        this.subscriptionsProcessor = new SubscriptionProcessor(this.schema, this.syncPredicates, this.amplifyConfig, this.authModeStrategy);\n        this.mutationsProcessor = new MutationProcessor(this.schema, this.storage, this.userModelClasses, this.outbox, this.modelInstanceCreator, MutationEvent, this.amplifyConfig, this.authModeStrategy, conflictHandler, errorHandler);\n        this.datastoreConnectivity = new DataStoreConnectivity();\n    }\n    SyncEngine.prototype.start = function (params) {\n        var _this = this;\n        return new Observable(function (observer) {\n            logger.log('starting sync engine...');\n            var subscriptions = [];\n            (function () { return __awaiter(_this, void 0, void 0, function () {\n                var err_1, startPromise, hasMutationsInOutbox;\n                var _this = this;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            _a.trys.push([0, 2, , 3]);\n                            return [4 /*yield*/, this.setupModels(params)];\n                        case 1:\n                            _a.sent();\n                            return [3 /*break*/, 3];\n                        case 2:\n                            err_1 = _a.sent();\n                            observer.error(err_1);\n                            return [2 /*return*/];\n                        case 3:\n                            startPromise = new Promise(function (resolve) {\n                                _this.datastoreConnectivity.status().subscribe(function (_a) {\n                                    var online = _a.online;\n                                    return __awaiter(_this, void 0, void 0, function () {\n                                        var ctlSubsObservable_1, dataSubsObservable, err_2, error_1;\n                                        var _b;\n                                        var _this = this;\n                                        return __generator(this, function (_c) {\n                                            switch (_c.label) {\n                                                case 0:\n                                                    if (!(online && !this.online)) return [3 /*break*/, 10];\n                                                    this.online = online;\n                                                    observer.next({\n                                                        type: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,\n                                                        data: {\n                                                            active: this.online,\n                                                        },\n                                                    });\n                                                    dataSubsObservable = void 0;\n                                                    if (!isNode) return [3 /*break*/, 1];\n                                                    logger.warn('Realtime disabled when in a server-side environment');\n                                                    return [3 /*break*/, 6];\n                                                case 1:\n                                                    //#region GraphQL Subscriptions\n                                                    _b = __read(this.subscriptionsProcessor.start(), 2), \n                                                    // const ctlObservable: Observable<CONTROL_MSG>\n                                                    ctlSubsObservable_1 = _b[0], \n                                                    // const dataObservable: Observable<[TransformerMutationType, SchemaModel, Readonly<{\n                                                    // id: string;\n                                                    // } & Record<string, any>>]>\n                                                    dataSubsObservable = _b[1];\n                                                    _c.label = 2;\n                                                case 2:\n                                                    _c.trys.push([2, 4, , 5]);\n                                                    return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                                            var ctlSubsSubscription = ctlSubsObservable_1.subscribe({\n                                                                next: function (msg) {\n                                                                    if (msg === CONTROL_MSG.CONNECTED) {\n                                                                        resolve();\n                                                                    }\n                                                                },\n                                                                error: function (err) {\n                                                                    reject(err);\n                                                                    var handleDisconnect = _this.disconnectionHandler();\n                                                                    handleDisconnect(err);\n                                                                },\n                                                            });\n                                                            subscriptions.push(ctlSubsSubscription);\n                                                        })];\n                                                case 3:\n                                                    _c.sent();\n                                                    return [3 /*break*/, 5];\n                                                case 4:\n                                                    err_2 = _c.sent();\n                                                    observer.error(err_2);\n                                                    return [2 /*return*/];\n                                                case 5:\n                                                    logger.log('Realtime ready');\n                                                    observer.next({\n                                                        type: ControlMessage.SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED,\n                                                    });\n                                                    _c.label = 6;\n                                                case 6:\n                                                    _c.trys.push([6, 8, , 9]);\n                                                    return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                                            var syncQuerySubscription = _this.syncQueriesObservable().subscribe({\n                                                                next: function (message) {\n                                                                    var type = message.type;\n                                                                    if (type === ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY) {\n                                                                        resolve();\n                                                                    }\n                                                                    observer.next(message);\n                                                                },\n                                                                complete: function () {\n                                                                    resolve();\n                                                                },\n                                                                error: function (error) {\n                                                                    reject(error);\n                                                                },\n                                                            });\n                                                            if (syncQuerySubscription) {\n                                                                subscriptions.push(syncQuerySubscription);\n                                                            }\n                                                        })];\n                                                case 7:\n                                                    _c.sent();\n                                                    return [3 /*break*/, 9];\n                                                case 8:\n                                                    error_1 = _c.sent();\n                                                    observer.error(error_1);\n                                                    return [2 /*return*/];\n                                                case 9:\n                                                    //#endregion\n                                                    //#region process mutations\n                                                    subscriptions.push(this.mutationsProcessor\n                                                        .start()\n                                                        .subscribe(function (_a) {\n                                                        var modelDefinition = _a.modelDefinition, item = _a.model, hasMore = _a.hasMore;\n                                                        var modelConstructor = _this.userModelClasses[modelDefinition.name];\n                                                        var model = _this.modelInstanceCreator(modelConstructor, item);\n                                                        _this.storage.runExclusive(function (storage) {\n                                                            return _this.modelMerger.merge(storage, model);\n                                                        });\n                                                        observer.next({\n                                                            type: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED,\n                                                            data: {\n                                                                model: modelConstructor,\n                                                                element: model,\n                                                            },\n                                                        });\n                                                        observer.next({\n                                                            type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                                                            data: {\n                                                                isEmpty: !hasMore,\n                                                            },\n                                                        });\n                                                    }));\n                                                    //#endregion\n                                                    //#region Merge subscriptions buffer\n                                                    // TODO: extract to function\n                                                    if (!isNode) {\n                                                        subscriptions.push(dataSubsObservable.subscribe(function (_a) {\n                                                            var _b = __read(_a, 3), _transformerMutationType = _b[0], modelDefinition = _b[1], item = _b[2];\n                                                            var modelConstructor = _this.userModelClasses[modelDefinition.name];\n                                                            var model = _this.modelInstanceCreator(modelConstructor, item);\n                                                            _this.storage.runExclusive(function (storage) {\n                                                                return _this.modelMerger.merge(storage, model);\n                                                            });\n                                                        }));\n                                                    }\n                                                    return [3 /*break*/, 11];\n                                                case 10:\n                                                    if (!online) {\n                                                        this.online = online;\n                                                        observer.next({\n                                                            type: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,\n                                                            data: {\n                                                                active: this.online,\n                                                            },\n                                                        });\n                                                        subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n                                                        subscriptions = [];\n                                                    }\n                                                    _c.label = 11;\n                                                case 11:\n                                                    resolve();\n                                                    return [2 /*return*/];\n                                            }\n                                        });\n                                    });\n                                });\n                            });\n                            this.storage\n                                .observe(null, null, ownSymbol)\n                                .filter(function (_a) {\n                                var model = _a.model;\n                                var modelDefinition = _this.getModelDefinition(model);\n                                return modelDefinition.syncable === true;\n                            })\n                                .subscribe({\n                                next: function (_a) {\n                                    var opType = _a.opType, model = _a.model, element = _a.element, condition = _a.condition;\n                                    return __awaiter(_this, void 0, void 0, function () {\n                                        var namespace, MutationEventConstructor, graphQLCondition, mutationEvent;\n                                        return __generator(this, function (_b) {\n                                            switch (_b.label) {\n                                                case 0:\n                                                    namespace = this.schema.namespaces[this.namespaceResolver(model)];\n                                                    MutationEventConstructor = this.modelClasses['MutationEvent'];\n                                                    graphQLCondition = predicateToGraphQLCondition(condition);\n                                                    mutationEvent = createMutationInstanceFromModelOperation(namespace.relationships, this.getModelDefinition(model), opType, model, element, graphQLCondition, MutationEventConstructor, this.modelInstanceCreator);\n                                                    return [4 /*yield*/, this.outbox.enqueue(this.storage, mutationEvent)];\n                                                case 1:\n                                                    _b.sent();\n                                                    observer.next({\n                                                        type: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED,\n                                                        data: {\n                                                            model: model,\n                                                            element: element,\n                                                        },\n                                                    });\n                                                    observer.next({\n                                                        type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                                                        data: {\n                                                            isEmpty: false,\n                                                        },\n                                                    });\n                                                    return [4 /*yield*/, startPromise];\n                                                case 2:\n                                                    _b.sent();\n                                                    if (this.online) {\n                                                        this.mutationsProcessor.resume();\n                                                    }\n                                                    return [2 /*return*/];\n                                            }\n                                        });\n                                    });\n                                },\n                            });\n                            observer.next({\n                                type: ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED,\n                            });\n                            return [4 /*yield*/, this.outbox.peek(this.storage)];\n                        case 4:\n                            hasMutationsInOutbox = (_a.sent()) === undefined;\n                            observer.next({\n                                type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                                data: {\n                                    isEmpty: hasMutationsInOutbox,\n                                },\n                            });\n                            return [4 /*yield*/, startPromise];\n                        case 5:\n                            _a.sent();\n                            observer.next({\n                                type: ControlMessage.SYNC_ENGINE_READY,\n                            });\n                            return [2 /*return*/];\n                    }\n                });\n            }); })();\n            return function () {\n                subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n            };\n        });\n    };\n    SyncEngine.prototype.getModelsMetadataWithNextFullSync = function (currentTimeStamp) {\n        return __awaiter(this, void 0, void 0, function () {\n            var modelLastSync, _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = Map.bind;\n                        return [4 /*yield*/, this.getModelsMetadata()];\n                    case 1:\n                        modelLastSync = new (_a.apply(Map, [void 0, (_b.sent()).map(function (_a) {\n                                var namespace = _a.namespace, model = _a.model, lastSync = _a.lastSync, lastFullSync = _a.lastFullSync, fullSyncInterval = _a.fullSyncInterval, lastSyncPredicate = _a.lastSyncPredicate;\n                                var nextFullSync = lastFullSync + fullSyncInterval;\n                                var syncFrom = !lastFullSync || nextFullSync < currentTimeStamp\n                                    ? 0 // perform full sync if expired\n                                    : lastSync; // perform delta sync\n                                return [\n                                    _this.schema.namespaces[namespace].models[model],\n                                    [namespace, syncFrom],\n                                ];\n                            })]))();\n                        return [2 /*return*/, modelLastSync];\n                }\n            });\n        });\n    };\n    SyncEngine.prototype.syncQueriesObservable = function () {\n        var _this = this;\n        if (!this.online) {\n            return Observable.of();\n        }\n        return new Observable(function (observer) {\n            var syncQueriesSubscription;\n            var waitTimeoutId;\n            (function () { return __awaiter(_this, void 0, void 0, function () {\n                var _loop_1, this_1;\n                var _this = this;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            _loop_1 = function () {\n                                var count, modelLastSync, paginatingModels, newestFullSyncStartedAt, theInterval, start, duration, newestStartedAt, msNextFullSync;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            count = new WeakMap();\n                                            return [4 /*yield*/, this_1.getModelsMetadataWithNextFullSync(Date.now())];\n                                        case 1:\n                                            modelLastSync = _a.sent();\n                                            paginatingModels = new Set(modelLastSync.keys());\n                                            return [4 /*yield*/, new Promise(function (resolve) {\n                                                    syncQueriesSubscription = _this.syncQueriesProcessor\n                                                        .start(modelLastSync)\n                                                        .subscribe({\n                                                        next: function (_a) {\n                                                            var namespace = _a.namespace, modelDefinition = _a.modelDefinition, items = _a.items, done = _a.done, startedAt = _a.startedAt, isFullSync = _a.isFullSync;\n                                                            return __awaiter(_this, void 0, void 0, function () {\n                                                                var modelConstructor, modelName, modelMetadata_1, lastFullSync, fullSyncInterval, counts;\n                                                                var _this = this;\n                                                                return __generator(this, function (_b) {\n                                                                    switch (_b.label) {\n                                                                        case 0:\n                                                                            modelConstructor = this.userModelClasses[modelDefinition.name];\n                                                                            if (!count.has(modelConstructor)) {\n                                                                                count.set(modelConstructor, {\n                                                                                    new: 0,\n                                                                                    updated: 0,\n                                                                                    deleted: 0,\n                                                                                });\n                                                                                start = getNow();\n                                                                                newestStartedAt =\n                                                                                    newestStartedAt === undefined\n                                                                                        ? startedAt\n                                                                                        : Math.max(newestStartedAt, startedAt);\n                                                                            }\n                                                                            /**\n                                                                             * If there are mutations in the outbox for a given id, those need to be\n                                                                             * merged individually. Otherwise, we can merge them in batches.\n                                                                             */\n                                                                            return [4 /*yield*/, this.storage.runExclusive(function (storage) { return __awaiter(_this, void 0, void 0, function () {\n                                                                                    var idsInOutbox, oneByOne, page, opTypeCount, oneByOne_1, oneByOne_1_1, item, opType, e_1_1, _a, _b, _c, counts;\n                                                                                    var e_1, _d;\n                                                                                    return __generator(this, function (_e) {\n                                                                                        switch (_e.label) {\n                                                                                            case 0: return [4 /*yield*/, this.outbox.getModelIds(storage)];\n                                                                                            case 1:\n                                                                                                idsInOutbox = _e.sent();\n                                                                                                oneByOne = [];\n                                                                                                page = items.filter(function (item) {\n                                                                                                    if (!idsInOutbox.has(item.id)) {\n                                                                                                        return true;\n                                                                                                    }\n                                                                                                    oneByOne.push(item);\n                                                                                                    return false;\n                                                                                                });\n                                                                                                opTypeCount = [];\n                                                                                                _e.label = 2;\n                                                                                            case 2:\n                                                                                                _e.trys.push([2, 7, 8, 9]);\n                                                                                                oneByOne_1 = __values(oneByOne), oneByOne_1_1 = oneByOne_1.next();\n                                                                                                _e.label = 3;\n                                                                                            case 3:\n                                                                                                if (!!oneByOne_1_1.done) return [3 /*break*/, 6];\n                                                                                                item = oneByOne_1_1.value;\n                                                                                                return [4 /*yield*/, this.modelMerger.merge(storage, item)];\n                                                                                            case 4:\n                                                                                                opType = _e.sent();\n                                                                                                if (opType !== undefined) {\n                                                                                                    opTypeCount.push([item, opType]);\n                                                                                                }\n                                                                                                _e.label = 5;\n                                                                                            case 5:\n                                                                                                oneByOne_1_1 = oneByOne_1.next();\n                                                                                                return [3 /*break*/, 3];\n                                                                                            case 6: return [3 /*break*/, 9];\n                                                                                            case 7:\n                                                                                                e_1_1 = _e.sent();\n                                                                                                e_1 = { error: e_1_1 };\n                                                                                                return [3 /*break*/, 9];\n                                                                                            case 8:\n                                                                                                try {\n                                                                                                    if (oneByOne_1_1 && !oneByOne_1_1.done && (_d = oneByOne_1.return)) _d.call(oneByOne_1);\n                                                                                                }\n                                                                                                finally { if (e_1) throw e_1.error; }\n                                                                                                return [7 /*endfinally*/];\n                                                                                            case 9:\n                                                                                                _b = (_a = opTypeCount.push).apply;\n                                                                                                _c = [opTypeCount];\n                                                                                                return [4 /*yield*/, this.modelMerger.mergePage(storage, modelConstructor, page)];\n                                                                                            case 10:\n                                                                                                _b.apply(_a, _c.concat([__spread.apply(void 0, [(_e.sent())])]));\n                                                                                                counts = count.get(modelConstructor);\n                                                                                                opTypeCount.forEach(function (_a) {\n                                                                                                    var _b = __read(_a, 2), opType = _b[1];\n                                                                                                    switch (opType) {\n                                                                                                        case OpType.INSERT:\n                                                                                                            counts.new++;\n                                                                                                            break;\n                                                                                                        case OpType.UPDATE:\n                                                                                                            counts.updated++;\n                                                                                                            break;\n                                                                                                        case OpType.DELETE:\n                                                                                                            counts.deleted++;\n                                                                                                            break;\n                                                                                                        default:\n                                                                                                            exhaustiveCheck(opType);\n                                                                                                    }\n                                                                                                });\n                                                                                                return [2 /*return*/];\n                                                                                        }\n                                                                                    });\n                                                                                }); })];\n                                                                        case 1:\n                                                                            /**\n                                                                             * If there are mutations in the outbox for a given id, those need to be\n                                                                             * merged individually. Otherwise, we can merge them in batches.\n                                                                             */\n                                                                            _b.sent();\n                                                                            if (!done) return [3 /*break*/, 4];\n                                                                            modelName = modelDefinition.name;\n                                                                            return [4 /*yield*/, this.getModelMetadata(namespace, modelName)];\n                                                                        case 2:\n                                                                            modelMetadata_1 = _b.sent();\n                                                                            lastFullSync = modelMetadata_1.lastFullSync, fullSyncInterval = modelMetadata_1.fullSyncInterval;\n                                                                            theInterval = fullSyncInterval;\n                                                                            newestFullSyncStartedAt =\n                                                                                newestFullSyncStartedAt === undefined\n                                                                                    ? lastFullSync\n                                                                                    : Math.max(newestFullSyncStartedAt, isFullSync ? startedAt : lastFullSync);\n                                                                            modelMetadata_1 = this.modelClasses\n                                                                                .ModelMetadata.copyOf(modelMetadata_1, function (draft) {\n                                                                                draft.lastSync = startedAt;\n                                                                                draft.lastFullSync = isFullSync\n                                                                                    ? startedAt\n                                                                                    : modelMetadata_1.lastFullSync;\n                                                                            });\n                                                                            return [4 /*yield*/, this.storage.save(modelMetadata_1, undefined, ownSymbol)];\n                                                                        case 3:\n                                                                            _b.sent();\n                                                                            counts = count.get(modelConstructor);\n                                                                            observer.next({\n                                                                                type: ControlMessage.SYNC_ENGINE_MODEL_SYNCED,\n                                                                                data: {\n                                                                                    model: modelConstructor,\n                                                                                    isFullSync: isFullSync,\n                                                                                    isDeltaSync: !isFullSync,\n                                                                                    counts: counts,\n                                                                                },\n                                                                            });\n                                                                            paginatingModels.delete(modelDefinition);\n                                                                            if (paginatingModels.size === 0) {\n                                                                                duration = getNow() - start;\n                                                                                resolve();\n                                                                                observer.next({\n                                                                                    type: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY,\n                                                                                });\n                                                                                syncQueriesSubscription.unsubscribe();\n                                                                            }\n                                                                            _b.label = 4;\n                                                                        case 4: return [2 /*return*/];\n                                                                    }\n                                                                });\n                                                            });\n                                                        },\n                                                        error: function (error) {\n                                                            observer.error(error);\n                                                        },\n                                                    });\n                                                    observer.next({\n                                                        type: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_STARTED,\n                                                        data: {\n                                                            models: Array.from(paginatingModels).map(function (_a) {\n                                                                var name = _a.name;\n                                                                return name;\n                                                            }),\n                                                        },\n                                                    });\n                                                })];\n                                        case 2:\n                                            _a.sent();\n                                            msNextFullSync = newestFullSyncStartedAt +\n                                                theInterval -\n                                                (newestStartedAt + duration);\n                                            logger.debug(\"Next fullSync in \" + msNextFullSync / 1000 + \" seconds. (\" + new Date(Date.now() + msNextFullSync) + \")\");\n                                            return [4 /*yield*/, new Promise(function (res) {\n                                                    waitTimeoutId = setTimeout(res, msNextFullSync);\n                                                })];\n                                        case 3:\n                                            _a.sent();\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            };\n                            this_1 = this;\n                            _a.label = 1;\n                        case 1:\n                            if (!!observer.closed) return [3 /*break*/, 3];\n                            return [5 /*yield**/, _loop_1()];\n                        case 2:\n                            _a.sent();\n                            return [3 /*break*/, 1];\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            }); })();\n            return function () {\n                if (syncQueriesSubscription) {\n                    syncQueriesSubscription.unsubscribe();\n                }\n                if (waitTimeoutId) {\n                    clearTimeout(waitTimeoutId);\n                }\n            };\n        });\n    };\n    SyncEngine.prototype.disconnectionHandler = function () {\n        var _this = this;\n        return function (msg) {\n            // This implementation is tied to AWSAppSyncRealTimeProvider 'Connection closed', 'Timeout disconnect' msg\n            if (PUBSUB_CONTROL_MSG.CONNECTION_CLOSED === msg ||\n                PUBSUB_CONTROL_MSG.TIMEOUT_DISCONNECT === msg) {\n                _this.datastoreConnectivity.socketDisconnected();\n            }\n        };\n    };\n    SyncEngine.prototype.unsubscribeConnectivity = function () {\n        this.datastoreConnectivity.unsubscribe();\n    };\n    SyncEngine.prototype.setupModels = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fullSyncInterval, ModelMetadata, models, savedModel, promises, result, _a, _b, modelMetadata, modelName, e_2_1;\n            var e_2, _c;\n            var _this = this;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        fullSyncInterval = params.fullSyncInterval;\n                        ModelMetadata = this.modelClasses\n                            .ModelMetadata;\n                        models = [];\n                        Object.values(this.schema.namespaces).forEach(function (namespace) {\n                            Object.values(namespace.models)\n                                .filter(function (_a) {\n                                var syncable = _a.syncable;\n                                return syncable;\n                            })\n                                .forEach(function (model) {\n                                models.push([namespace.name, model]);\n                            });\n                        });\n                        promises = models.map(function (_a) {\n                            var _b = __read(_a, 2), namespace = _b[0], model = _b[1];\n                            return __awaiter(_this, void 0, void 0, function () {\n                                var modelMetadata, syncPredicate, lastSyncPredicate, prevSyncPredicate, syncPredicateUpdated_1;\n                                var _c, _d, _e, _f;\n                                return __generator(this, function (_g) {\n                                    switch (_g.label) {\n                                        case 0: return [4 /*yield*/, this.getModelMetadata(namespace, model.name)];\n                                        case 1:\n                                            modelMetadata = _g.sent();\n                                            syncPredicate = ModelPredicateCreator.getPredicates(this.syncPredicates.get(model), false);\n                                            lastSyncPredicate = syncPredicate\n                                                ? JSON.stringify(syncPredicate)\n                                                : null;\n                                            if (!(modelMetadata === undefined)) return [3 /*break*/, 3];\n                                            return [4 /*yield*/, this.storage.save(this.modelInstanceCreator(ModelMetadata, {\n                                                    model: model.name,\n                                                    namespace: namespace,\n                                                    lastSync: null,\n                                                    fullSyncInterval: fullSyncInterval,\n                                                    lastFullSync: null,\n                                                    lastSyncPredicate: lastSyncPredicate,\n                                                }), undefined, ownSymbol)];\n                                        case 2:\n                                            _c = __read.apply(void 0, [_g.sent(), 1]), _d = __read(_c[0], 1), savedModel = _d[0];\n                                            return [3 /*break*/, 5];\n                                        case 3:\n                                            prevSyncPredicate = modelMetadata.lastSyncPredicate\n                                                ? modelMetadata.lastSyncPredicate\n                                                : null;\n                                            syncPredicateUpdated_1 = prevSyncPredicate !== lastSyncPredicate;\n                                            return [4 /*yield*/, this.storage.save(this.modelClasses.ModelMetadata.copyOf(modelMetadata, function (draft) {\n                                                    draft.fullSyncInterval = fullSyncInterval;\n                                                    // perform a base sync if the syncPredicate changed in between calls to DataStore.start\n                                                    // ensures that the local store contains all the data specified by the syncExpression\n                                                    if (syncPredicateUpdated_1) {\n                                                        draft.lastSync = null;\n                                                        draft.lastFullSync = null;\n                                                        draft.lastSyncPredicate = lastSyncPredicate;\n                                                    }\n                                                }))];\n                                        case 4:\n                                            _e = __read.apply(void 0, [_g.sent(), 1]), _f = __read(_e[0], 1), savedModel = _f[0];\n                                            _g.label = 5;\n                                        case 5: return [2 /*return*/, savedModel];\n                                    }\n                                });\n                            });\n                        });\n                        result = {};\n                        _d.label = 1;\n                    case 1:\n                        _d.trys.push([1, 6, 7, 8]);\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 2:\n                        _a = __values.apply(void 0, [_d.sent()]), _b = _a.next();\n                        _d.label = 3;\n                    case 3:\n                        if (!!_b.done) return [3 /*break*/, 5];\n                        modelMetadata = _b.value;\n                        modelName = modelMetadata.model;\n                        result[modelName] = modelMetadata;\n                        _d.label = 4;\n                    case 4:\n                        _b = _a.next();\n                        return [3 /*break*/, 3];\n                    case 5: return [3 /*break*/, 8];\n                    case 6:\n                        e_2_1 = _d.sent();\n                        e_2 = { error: e_2_1 };\n                        return [3 /*break*/, 8];\n                    case 7:\n                        try {\n                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n                        }\n                        finally { if (e_2) throw e_2.error; }\n                        return [7 /*endfinally*/];\n                    case 8: return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    SyncEngine.prototype.getModelsMetadata = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var ModelMetadata, modelsMetadata;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        ModelMetadata = this.modelClasses\n                            .ModelMetadata;\n                        return [4 /*yield*/, this.storage.query(ModelMetadata)];\n                    case 1:\n                        modelsMetadata = _a.sent();\n                        return [2 /*return*/, modelsMetadata];\n                }\n            });\n        });\n    };\n    SyncEngine.prototype.getModelMetadata = function (namespace, model) {\n        return __awaiter(this, void 0, void 0, function () {\n            var ModelMetadata, predicate, _a, modelMetadata;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        ModelMetadata = this.modelClasses\n                            .ModelMetadata;\n                        predicate = ModelPredicateCreator.createFromExisting(this.schema.namespaces[SYNC].models[ModelMetadata.name], function (c) { return c.namespace('eq', namespace).model('eq', model); });\n                        return [4 /*yield*/, this.storage.query(ModelMetadata, predicate, {\n                                page: 0,\n                                limit: 1,\n                            })];\n                    case 1:\n                        _a = __read.apply(void 0, [_b.sent(), 1]), modelMetadata = _a[0];\n                        return [2 /*return*/, modelMetadata];\n                }\n            });\n        });\n    };\n    SyncEngine.prototype.getModelDefinition = function (modelConstructor) {\n        var namespaceName = this.namespaceResolver(modelConstructor);\n        var modelDefinition = this.schema.namespaces[namespaceName].models[modelConstructor.name];\n        return modelDefinition;\n    };\n    SyncEngine.getNamespace = function () {\n        var namespace = {\n            name: SYNC,\n            relationships: {},\n            enums: {\n                OperationType: {\n                    name: 'OperationType',\n                    values: ['CREATE', 'UPDATE', 'DELETE'],\n                },\n            },\n            nonModels: {},\n            models: {\n                MutationEvent: {\n                    name: 'MutationEvent',\n                    pluralName: 'MutationEvents',\n                    syncable: false,\n                    fields: {\n                        id: {\n                            name: 'id',\n                            type: 'ID',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        model: {\n                            name: 'model',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        data: {\n                            name: 'data',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        modelId: {\n                            name: 'modelId',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        operation: {\n                            name: 'operation',\n                            type: {\n                                enum: 'Operationtype',\n                            },\n                            isArray: false,\n                            isRequired: true,\n                        },\n                        condition: {\n                            name: 'condition',\n                            type: 'String',\n                            isArray: false,\n                            isRequired: true,\n                        },\n                    },\n                },\n                ModelMetadata: {\n                    name: 'ModelMetadata',\n                    pluralName: 'ModelsMetadata',\n                    syncable: false,\n                    fields: {\n                        id: {\n                            name: 'id',\n                            type: 'ID',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        namespace: {\n                            name: 'namespace',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        model: {\n                            name: 'model',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        lastSync: {\n                            name: 'lastSync',\n                            type: 'Int',\n                            isRequired: false,\n                            isArray: false,\n                        },\n                        lastFullSync: {\n                            name: 'lastFullSync',\n                            type: 'Int',\n                            isRequired: false,\n                            isArray: false,\n                        },\n                        fullSyncInterval: {\n                            name: 'fullSyncInterval',\n                            type: 'Int',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                    },\n                },\n            },\n        };\n        return namespace;\n    };\n    return SyncEngine;\n}());\nexport { SyncEngine };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}