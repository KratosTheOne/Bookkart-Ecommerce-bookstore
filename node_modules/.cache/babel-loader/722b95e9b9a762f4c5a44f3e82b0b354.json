{"ast":null,"code":"'use strict';\n\nconst util = require('./util');\n\nconst convertToJson = function (node, options) {\n  const jObj = {}; //when no child node or attr is present\n\n  if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {\n    return util.isExist(node.val) ? node.val : '';\n  } else {\n    //otherwise create a textnode if node has some text\n    if (util.isExist(node.val)) {\n      if (!(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n        if (options.arrayMode === \"strict\") {\n          jObj[options.textNodeName] = [node.val];\n        } else {\n          jObj[options.textNodeName] = node.val;\n        }\n      }\n    }\n  }\n\n  util.merge(jObj, node.attrsMap, options.arrayMode);\n  const keys = Object.keys(node.child);\n\n  for (let index = 0; index < keys.length; index++) {\n    var tagname = keys[index];\n\n    if (node.child[tagname] && node.child[tagname].length > 1) {\n      jObj[tagname] = [];\n\n      for (var tag in node.child[tagname]) {\n        jObj[tagname].push(convertToJson(node.child[tagname][tag], options));\n      }\n    } else {\n      if (options.arrayMode === true) {\n        const result = convertToJson(node.child[tagname][0], options);\n        if (typeof result === 'object') jObj[tagname] = [result];else jObj[tagname] = result;\n      } else if (options.arrayMode === \"strict\") {\n        jObj[tagname] = [convertToJson(node.child[tagname][0], options)];\n      } else {\n        jObj[tagname] = convertToJson(node.child[tagname][0], options);\n      }\n    }\n  } //add value\n\n\n  return jObj;\n};\n\nexports.convertToJson = convertToJson;","map":{"version":3,"sources":["C:/Users/Kaustubh Sinha/Desktop/bookkart/node_modules/fast-xml-parser/src/node2json.js"],"names":["util","require","convertToJson","node","options","jObj","child","isEmptyObject","attrsMap","isExist","val","cdataPositionChar","arrayMode","textNodeName","merge","keys","Object","index","length","tagname","tag","push","result","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst util = require('./util');\n\nconst convertToJson = function(node, options) {\n  const jObj = {};\n\n  //when no child node or attr is present\n  if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {\n    return util.isExist(node.val) ? node.val : '';\n  } else {\n    //otherwise create a textnode if node has some text\n    if (util.isExist(node.val)) {\n      if (!(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n        if(options.arrayMode === \"strict\"){\n          jObj[options.textNodeName] = [ node.val ];\n        }else{\n          jObj[options.textNodeName] = node.val;\n        }\n      }\n    }\n  }\n\n  util.merge(jObj, node.attrsMap, options.arrayMode);\n\n  const keys = Object.keys(node.child);\n  for (let index = 0; index < keys.length; index++) {\n    var tagname = keys[index];\n    if (node.child[tagname] && node.child[tagname].length > 1) {\n      jObj[tagname] = [];\n      for (var tag in node.child[tagname]) {\n        jObj[tagname].push(convertToJson(node.child[tagname][tag], options));\n      }\n    } else {\n      if(options.arrayMode === true){\n        const result = convertToJson(node.child[tagname][0], options)\n        if(typeof result === 'object')\n          jObj[tagname] = [ result ];\n        else\n          jObj[tagname] = result;\n      }else if(options.arrayMode === \"strict\"){\n        jObj[tagname] = [convertToJson(node.child[tagname][0], options) ];\n      }else{\n        jObj[tagname] = convertToJson(node.child[tagname][0], options);\n      }\n    }\n  }\n\n  //add value\n  return jObj;\n};\n\nexports.convertToJson = convertToJson;\n"]},"metadata":{},"sourceType":"script"}