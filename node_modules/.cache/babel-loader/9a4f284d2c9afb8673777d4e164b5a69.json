{"ast":null,"code":"var STORE_NAME = \"IdentityIds\";\n\nvar IndexedDbStorage =\n/** @class */\nfunction () {\n  function IndexedDbStorage(dbName) {\n    if (dbName === void 0) {\n      dbName = \"aws:cognito-identity-ids\";\n    }\n\n    this.dbName = dbName;\n  }\n\n  IndexedDbStorage.prototype.getItem = function (key) {\n    return this.withObjectStore(\"readonly\", function (store) {\n      var req = store.get(key);\n      return new Promise(function (resolve) {\n        req.onerror = function () {\n          return resolve(null);\n        };\n\n        req.onsuccess = function () {\n          return resolve(req.result ? req.result.value : null);\n        };\n      });\n    }).catch(function () {\n      return null;\n    });\n  };\n\n  IndexedDbStorage.prototype.removeItem = function (key) {\n    return this.withObjectStore(\"readwrite\", function (store) {\n      var req = store.delete(key);\n      return new Promise(function (resolve, reject) {\n        req.onerror = function () {\n          return reject(req.error);\n        };\n\n        req.onsuccess = function () {\n          return resolve();\n        };\n      });\n    });\n  };\n\n  IndexedDbStorage.prototype.setItem = function (id, value) {\n    return this.withObjectStore(\"readwrite\", function (store) {\n      var req = store.put({\n        id: id,\n        value: value\n      });\n      return new Promise(function (resolve, reject) {\n        req.onerror = function () {\n          return reject(req.error);\n        };\n\n        req.onsuccess = function () {\n          return resolve();\n        };\n      });\n    });\n  };\n\n  IndexedDbStorage.prototype.getDb = function () {\n    var openDbRequest = self.indexedDB.open(this.dbName, 1);\n    return new Promise(function (resolve, reject) {\n      openDbRequest.onsuccess = function () {\n        resolve(openDbRequest.result);\n      };\n\n      openDbRequest.onerror = function () {\n        reject(openDbRequest.error);\n      };\n\n      openDbRequest.onblocked = function () {\n        reject(new Error(\"Unable to access DB\"));\n      };\n\n      openDbRequest.onupgradeneeded = function () {\n        var db = openDbRequest.result;\n\n        db.onerror = function () {\n          reject(new Error(\"Failed to create object store\"));\n        };\n\n        db.createObjectStore(STORE_NAME, {\n          keyPath: \"id\"\n        });\n      };\n    });\n  };\n\n  IndexedDbStorage.prototype.withObjectStore = function (mode, action) {\n    return this.getDb().then(function (db) {\n      var tx = db.transaction(STORE_NAME, mode);\n\n      tx.oncomplete = function () {\n        return db.close();\n      };\n\n      return new Promise(function (resolve, reject) {\n        tx.onerror = function () {\n          return reject(tx.error);\n        };\n\n        resolve(action(tx.objectStore(STORE_NAME)));\n      }).catch(function (err) {\n        db.close();\n        throw err;\n      });\n    });\n  };\n\n  return IndexedDbStorage;\n}();\n\nexport { IndexedDbStorage };","map":{"version":3,"sources":["../../src/IndexedDbStorage.ts"],"names":[],"mappings":"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","sourcesContent":["import { Storage } from \"./Storage\";\n\nconst STORE_NAME = \"IdentityIds\";\n\nexport class IndexedDbStorage implements Storage {\n  constructor(private readonly dbName: string = \"aws:cognito-identity-ids\") {}\n\n  getItem(key: string): Promise<string | null> {\n    return this.withObjectStore(\"readonly\", (store) => {\n      const req = store.get(key);\n\n      return new Promise<string | null>((resolve) => {\n        req.onerror = () => resolve(null);\n\n        req.onsuccess = () => resolve(req.result ? req.result.value : null);\n      });\n    }).catch(() => null);\n  }\n\n  removeItem(key: string): Promise<void> {\n    return this.withObjectStore(\"readwrite\", (store) => {\n      const req = store.delete(key);\n\n      return new Promise<void>((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n\n  setItem(id: string, value: string): Promise<void> {\n    return this.withObjectStore(\"readwrite\", (store) => {\n      const req = store.put({ id, value });\n\n      return new Promise<void>((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n\n  private getDb(): Promise<IDBDatabase> {\n    const openDbRequest = self.indexedDB.open(this.dbName, 1);\n    return new Promise((resolve, reject) => {\n      openDbRequest.onsuccess = () => {\n        resolve(openDbRequest.result);\n      };\n\n      openDbRequest.onerror = () => {\n        reject(openDbRequest.error);\n      };\n\n      openDbRequest.onblocked = () => {\n        reject(new Error(\"Unable to access DB\"));\n      };\n\n      openDbRequest.onupgradeneeded = () => {\n        const db = openDbRequest.result;\n        db.onerror = () => {\n          reject(new Error(\"Failed to create object store\"));\n        };\n\n        db.createObjectStore(STORE_NAME, { keyPath: \"id\" });\n      };\n    });\n  }\n\n  private withObjectStore<R>(mode: IDBTransactionMode, action: (store: IDBObjectStore) => Promise<R>): Promise<R> {\n    return this.getDb().then((db) => {\n      const tx = db.transaction(STORE_NAME, mode);\n      tx.oncomplete = () => db.close();\n\n      return new Promise<R>((resolve, reject) => {\n        tx.onerror = () => reject(tx.error);\n\n        resolve(action(tx.objectStore(STORE_NAME)));\n      }).catch((err) => {\n        db.close();\n        throw err;\n      });\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}