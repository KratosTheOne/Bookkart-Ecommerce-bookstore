{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar crc32_1 = require(\"@aws-crypto/crc32\"); // All prelude components are unsigned, 32-bit integers\n\n\nvar PRELUDE_MEMBER_LENGTH = 4; // The prelude consists of two components\n\nvar PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2; // Checksums are always CRC32 hashes.\n\nvar CHECKSUM_LENGTH = 4; // Messages must include a full prelude, a prelude checksum, and a message checksum\n\nvar MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\n/**\n * @internal\n */\n\nfunction splitMessage(_a) {\n  var byteLength = _a.byteLength,\n      byteOffset = _a.byteOffset,\n      buffer = _a.buffer;\n\n  if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n    throw new Error(\"Provided message too short to accommodate event stream message overhead\");\n  }\n\n  var view = new DataView(buffer, byteOffset, byteLength);\n  var messageLength = view.getUint32(0, false);\n\n  if (byteLength !== messageLength) {\n    throw new Error(\"Reported message length does not match received message length\");\n  }\n\n  var headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n  var expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n  var expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n  var checksummer = new crc32_1.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n\n  if (expectedPreludeChecksum !== checksummer.digest()) {\n    throw new Error(\"The prelude checksum specified in the message (\" + expectedPreludeChecksum + \") does not match the calculated CRC32 checksum (\" + checksummer.digest() + \")\");\n  }\n\n  checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));\n\n  if (expectedMessageChecksum !== checksummer.digest()) {\n    throw new Error(\"The message checksum (\" + checksummer.digest() + \") did not match the expected value of \" + expectedMessageChecksum);\n  }\n\n  return {\n    headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n    body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))\n  };\n}\n\nexports.splitMessage = splitMessage;","map":{"version":3,"sources":["../src/splitMessage.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,mBAAA,CAAA,C,CAEA;;;AACA,IAAM,qBAAqB,GAAG,CAA9B,C,CACA;;AACA,IAAM,cAAc,GAAG,qBAAqB,GAAG,CAA/C,C,CACA;;AACA,IAAM,eAAe,GAAG,CAAxB,C,CACA;;AACA,IAAM,sBAAsB,GAAG,cAAc,GAAG,eAAe,GAAG,CAAlE;AAUA;;;;AAGA,SAAgB,YAAhB,CAA6B,EAA7B,EAIkB;MAHhB,UAAA,GAAA,EAAA,CAAA,U;MACA,UAAA,GAAA,EAAA,CAAA,U;MACA,MAAA,GAAA,EAAA,CAAA,M;;AAEA,MAAI,UAAU,GAAG,sBAAjB,EAAyC;AACvC,UAAM,IAAI,KAAJ,CACJ,yEADI,CAAN;AAGD;;AAED,MAAM,IAAI,GAAG,IAAI,QAAJ,CAAa,MAAb,EAAqB,UAArB,EAAiC,UAAjC,CAAb;AAEA,MAAM,aAAa,GAAG,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,KAAlB,CAAtB;;AAEA,MAAI,UAAU,KAAK,aAAnB,EAAkC;AAChC,UAAM,IAAI,KAAJ,CACJ,gEADI,CAAN;AAGD;;AAED,MAAM,YAAY,GAAG,IAAI,CAAC,SAAL,CAAe,qBAAf,EAAsC,KAAtC,CAArB;AACA,MAAM,uBAAuB,GAAG,IAAI,CAAC,SAAL,CAAe,cAAf,EAA+B,KAA/B,CAAhC;AACA,MAAM,uBAAuB,GAAG,IAAI,CAAC,SAAL,CAC9B,UAAU,GAAG,eADiB,EAE9B,KAF8B,CAAhC;AAKA,MAAM,WAAW,GAAG,IAAI,OAAA,CAAA,KAAJ,GAAY,MAAZ,CAClB,IAAI,UAAJ,CAAe,MAAf,EAAuB,UAAvB,EAAmC,cAAnC,CADkB,CAApB;;AAGA,MAAI,uBAAuB,KAAK,WAAW,CAAC,MAAZ,EAAhC,EAAsD;AACpD,UAAM,IAAI,KAAJ,CACJ,oDAAkD,uBAAlD,GAAyE,kDAAzE,GAA4H,WAAW,CAAC,MAAZ,EAA5H,GAAgJ,GAD5I,CAAN;AAGD;;AAED,EAAA,WAAW,CAAC,MAAZ,CACE,IAAI,UAAJ,CACE,MADF,EAEE,UAAU,GAAG,cAFf,EAGE,UAAU,IAAI,cAAc,GAAG,eAArB,CAHZ,CADF;;AAOA,MAAI,uBAAuB,KAAK,WAAW,CAAC,MAAZ,EAAhC,EAAsD;AACpD,UAAM,IAAI,KAAJ,CACJ,2BAAyB,WAAW,CAAC,MAAZ,EAAzB,GAA6C,wCAA7C,GAAsF,uBADlF,CAAN;AAGD;;AAED,SAAO;AACL,IAAA,OAAO,EAAE,IAAI,QAAJ,CACP,MADO,EAEP,UAAU,GAAG,cAAb,GAA8B,eAFvB,EAGP,YAHO,CADJ;AAML,IAAA,IAAI,EAAE,IAAI,UAAJ,CACJ,MADI,EAEJ,UAAU,GAAG,cAAb,GAA8B,eAA9B,GAAgD,YAF5C,EAGJ,aAAa,GACX,YADF,IAEG,cAAc,GAAG,eAAjB,GAAmC,eAFtC,CAHI;AAND,GAAP;AAcD;;AAhED,OAAA,CAAA,YAAA,GAAA,YAAA","sourcesContent":["import { Crc32 } from \"@aws-crypto/crc32\";\n\n// All prelude components are unsigned, 32-bit integers\nconst PRELUDE_MEMBER_LENGTH = 4;\n// The prelude consists of two components\nconst PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\n// Checksums are always CRC32 hashes.\nconst CHECKSUM_LENGTH = 4;\n// Messages must include a full prelude, a prelude checksum, and a message checksum\nconst MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\n\n/**\n * @internal\n */\nexport interface MessageParts {\n  headers: DataView;\n  body: Uint8Array;\n}\n\n/**\n * @internal\n */\nexport function splitMessage({\n  byteLength,\n  byteOffset,\n  buffer\n}: ArrayBufferView): MessageParts {\n  if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n    throw new Error(\n      \"Provided message too short to accommodate event stream message overhead\"\n    );\n  }\n\n  const view = new DataView(buffer, byteOffset, byteLength);\n\n  const messageLength = view.getUint32(0, false);\n\n  if (byteLength !== messageLength) {\n    throw new Error(\n      \"Reported message length does not match received message length\"\n    );\n  }\n\n  const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n  const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n  const expectedMessageChecksum = view.getUint32(\n    byteLength - CHECKSUM_LENGTH,\n    false\n  );\n\n  const checksummer = new Crc32().update(\n    new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH)\n  );\n  if (expectedPreludeChecksum !== checksummer.digest()) {\n    throw new Error(\n      `The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`\n    );\n  }\n\n  checksummer.update(\n    new Uint8Array(\n      buffer,\n      byteOffset + PRELUDE_LENGTH,\n      byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)\n    )\n  );\n  if (expectedMessageChecksum !== checksummer.digest()) {\n    throw new Error(\n      `The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`\n    );\n  }\n\n  return {\n    headers: new DataView(\n      buffer,\n      byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH,\n      headerLength\n    ),\n    body: new Uint8Array(\n      buffer,\n      byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength,\n      messageLength -\n        headerLength -\n        (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH)\n    )\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}