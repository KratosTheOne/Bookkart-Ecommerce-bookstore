{"ast":null,"code":"import { __asyncGenerator, __await, __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { Comprehend } from \"../Comprehend\";\nimport { ComprehendClient } from \"../ComprehendClient\";\nimport { ListDocumentClassifiersCommand } from \"../commands/ListDocumentClassifiersCommand\";\n/**\n * @private\n */\n\nvar makePagedClientRequest = function (client, input) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , client.send.apply(client, __spread([new ListDocumentClassifiersCommand(input)], args))];\n\n        case 1:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n};\n/**\n * @private\n */\n\n\nvar makePagedRequest = function (client, input) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , client.listDocumentClassifiers.apply(client, __spread([input], args))];\n\n        case 1:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n};\n\nexport function paginateListDocumentClassifiers(config, input) {\n  var additionalArguments = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    additionalArguments[_i - 2] = arguments[_i];\n  }\n\n  return __asyncGenerator(this, arguments, function paginateListDocumentClassifiers_1() {\n    var token, hasNext, page;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          token = config.startingToken || undefined;\n          hasNext = true;\n          _a.label = 1;\n\n        case 1:\n          if (!hasNext) return [3\n          /*break*/\n          , 9];\n          input.NextToken = token;\n          input[\"MaxResults\"] = config.pageSize;\n          if (!(config.client instanceof Comprehend)) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , __await(makePagedRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n\n        case 2:\n          page = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 3:\n          if (!(config.client instanceof ComprehendClient)) return [3\n          /*break*/\n          , 5];\n          return [4\n          /*yield*/\n          , __await(makePagedClientRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n\n        case 4:\n          page = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          throw new Error(\"Invalid client, expected Comprehend | ComprehendClient\");\n\n        case 6:\n          return [4\n          /*yield*/\n          , __await(page)];\n\n        case 7:\n          return [4\n          /*yield*/\n          , _a.sent()];\n\n        case 8:\n          _a.sent();\n\n          token = page.NextToken;\n          hasNext = !!token;\n          return [3\n          /*break*/\n          , 1];\n\n        case 9:\n          return [4\n          /*yield*/\n          , __await(undefined)];\n\n        case 10:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}","map":{"version":3,"sources":["../../../pagination/ListDocumentClassifiersPaginator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __asyncGenerator, __await, __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { Comprehend } from \"../Comprehend\";\nimport { ComprehendClient } from \"../ComprehendClient\";\nimport { ListDocumentClassifiersCommand, } from \"../commands/ListDocumentClassifiersCommand\";\n/**\n * @private\n */\nvar makePagedClientRequest = function (client, input) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, client.send.apply(client, __spread([new ListDocumentClassifiersCommand(input)], args))];\n                case 1: \n                // @ts-ignore\n                return [2 /*return*/, _a.sent()];\n            }\n        });\n    });\n};\n/**\n * @private\n */\nvar makePagedRequest = function (client, input) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, client.listDocumentClassifiers.apply(client, __spread([input], args))];\n                case 1: \n                // @ts-ignore\n                return [2 /*return*/, _a.sent()];\n            }\n        });\n    });\n};\nexport function paginateListDocumentClassifiers(config, input) {\n    var additionalArguments = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        additionalArguments[_i - 2] = arguments[_i];\n    }\n    return __asyncGenerator(this, arguments, function paginateListDocumentClassifiers_1() {\n        var token, hasNext, page;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    token = config.startingToken || undefined;\n                    hasNext = true;\n                    _a.label = 1;\n                case 1:\n                    if (!hasNext) return [3 /*break*/, 9];\n                    input.NextToken = token;\n                    input[\"MaxResults\"] = config.pageSize;\n                    if (!(config.client instanceof Comprehend)) return [3 /*break*/, 3];\n                    return [4 /*yield*/, __await(makePagedRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n                case 2:\n                    page = _a.sent();\n                    return [3 /*break*/, 6];\n                case 3:\n                    if (!(config.client instanceof ComprehendClient)) return [3 /*break*/, 5];\n                    return [4 /*yield*/, __await(makePagedClientRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n                case 4:\n                    page = _a.sent();\n                    return [3 /*break*/, 6];\n                case 5: throw new Error(\"Invalid client, expected Comprehend | ComprehendClient\");\n                case 6: return [4 /*yield*/, __await(page)];\n                case 7: return [4 /*yield*/, _a.sent()];\n                case 8:\n                    _a.sent();\n                    token = page.NextToken;\n                    hasNext = !!token;\n                    return [3 /*break*/, 1];\n                case 9: return [4 /*yield*/, __await(undefined)];\n                case 10: \n                // @ts-ignore\n                return [2 /*return*/, _a.sent()];\n            }\n        });\n    });\n}\n//# sourceMappingURL=ListDocumentClassifiersPaginator.js.map"]},"metadata":{},"sourceType":"module"}