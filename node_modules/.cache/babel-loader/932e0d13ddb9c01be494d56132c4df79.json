{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DetectLabelsRequest, DetectLabelsResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1DetectLabelsCommand, serializeAws_json1_1DetectLabelsCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Detects instances of real-world entities within an image (JPEG or PNG)\n *        provided as input. This includes objects like flower, tree, and table; events like\n *        wedding, graduation, and birthday party; and concepts like landscape, evening, and nature.\n *      </p>\n *\n *          <p>For an example, see Analyzing Images Stored in an Amazon S3 Bucket in the Amazon Rekognition Developer Guide.</p>\n *          <note>\n *\n *             <p>\n *                <code>DetectLabels</code> does not support the detection of activities. However, activity detection\n *         is supported for label detection in videos. For more information, see StartLabelDetection in the Amazon Rekognition Developer Guide.</p>\n *          </note>\n *\n *          <p>You pass the input image as base64-encoded image bytes or as a reference to an image in\n *       an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes is not\n *       supported. The image must be either a PNG or JPEG formatted file. </p>\n *          <p> For each object, scene, and concept the API returns one or more labels. Each label\n *       provides the object name, and the level of confidence that the image contains the object. For\n *       example, suppose the input image has a lighthouse, the sea, and a rock. The response includes\n *       all three labels, one for each object. </p>\n *\n *          <p>\n *             <code>{Name: lighthouse, Confidence: 98.4629}</code>\n *          </p>\n *          <p>\n *             <code>{Name: rock,Confidence: 79.2097}</code>\n *          </p>\n *          <p>\n *             <code> {Name: sea,Confidence: 75.061}</code>\n *          </p>\n *          <p>In the preceding example, the operation returns one label for each of the three\n *       objects. The operation can also return multiple labels for the same object in the image. For\n *       example, if the input image shows a flower (for example, a tulip), the operation might return\n *       the following three labels. </p>\n *          <p>\n *             <code>{Name: flower,Confidence: 99.0562}</code>\n *          </p>\n *          <p>\n *             <code>{Name: plant,Confidence: 99.0562}</code>\n *          </p>\n *          <p>\n *             <code>{Name: tulip,Confidence: 99.0562}</code>\n *          </p>\n *\n *          <p>In this example, the detection algorithm more precisely identifies the flower as a\n *       tulip.</p>\n *          <p>In response, the API returns an array of labels. In addition, the response also\n *       includes the orientation correction. Optionally, you can specify <code>MinConfidence</code> to\n *       control the confidence threshold for the labels returned. The default is 55%. You can also add\n *       the <code>MaxLabels</code> parameter to limit the number of labels returned. </p>\n *          <note>\n *             <p>If the object detected is a person, the operation doesn't provide the same facial\n *         details that the <a>DetectFaces</a> operation provides.</p>\n *          </note>\n *          <p>\n *             <code>DetectLabels</code> returns bounding boxes for instances of common object labels in an array of\n *       <a>Instance</a> objects. An <code>Instance</code> object contains a\n *       <a>BoundingBox</a> object, for the location of the label on the image. It also includes\n *       the confidence by which the bounding box was detected.</p>\n *          <p>\n *             <code>DetectLabels</code> also returns a hierarchical taxonomy of detected labels. For example,\n *       a detected car might be assigned the label <i>car</i>. The label <i>car</i>\n *       has two parent labels: <i>Vehicle</i> (its parent) and <i>Transportation</i> (its\n *       grandparent).\n *       The response returns the entire list of ancestors for a label. Each ancestor is a unique label in the response.\n *       In the previous example, <i>Car</i>, <i>Vehicle</i>, and <i>Transportation</i>\n *       are returned as unique labels in the response.\n *       </p>\n *          <p>This is a stateless API operation. That is, the operation does not persist any\n *       data.</p>\n *          <p>This operation requires permissions to perform the\n *         <code>rekognition:DetectLabels</code> action. </p>\n */\n\nvar DetectLabelsCommand =\n/** @class */\nfunction (_super) {\n  __extends(DetectLabelsCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function DetectLabelsCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  DetectLabelsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"DetectLabelsCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DetectLabelsRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: DetectLabelsResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  DetectLabelsCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1DetectLabelsCommand(input, context);\n  };\n\n  DetectLabelsCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1DetectLabelsCommand(output, context);\n  };\n\n  return DetectLabelsCommand;\n}($Command);\n\nexport { DetectLabelsCommand };","map":{"version":3,"sources":["../../../commands/DetectLabelsCommand.ts"],"names":[],"mappings":";AACA,SAAS,mBAAT,EAA8B,oBAA9B,QAA0D,oBAA1D;AACA,SACE,yCADF,EAEE,uCAFF,QAGO,0BAHP;AAIA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EG;;AACH,IAAA,mBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyC,EAAA,SAAA,CAAA,mBAAA,EAAA,MAAA,CAAA,CAAzC,CAKE;AACA;;;AAEA,WAAA,mBAAA,CAAqB,KAArB,EAAoD;AAApD,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAA+B,CAGlD;AACD;AAED;;AAEG;;;AACH,EAAA,mBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,mBAAnB;AACA,QAAM,WAAW,GAAG,qBAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,mBAAmB,CAAC,kBAJU;AAKvD,MAAA,wBAAwB,EAAE,oBAAoB,CAAC;AALQ,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GAzBD;;AA2BQ,EAAA,mBAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAAmD,OAAnD,EAA0E;AACxE,WAAO,uCAAuC,CAAC,KAAD,EAAQ,OAAR,CAA9C;AACD,GAFO;;AAIA,EAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,yCAAyC,CAAC,MAAD,EAAS,OAAT,CAAhD;AACD,GAFO;;AAMV,SAAA,mBAAA;AAAC,CAtDD,CAAyC,QAAzC,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { DetectLabelsRequest, DetectLabelsResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1DetectLabelsCommand, serializeAws_json1_1DetectLabelsCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Detects instances of real-world entities within an image (JPEG or PNG)\n *        provided as input. This includes objects like flower, tree, and table; events like\n *        wedding, graduation, and birthday party; and concepts like landscape, evening, and nature.\n *      </p>\n *\n *          <p>For an example, see Analyzing Images Stored in an Amazon S3 Bucket in the Amazon Rekognition Developer Guide.</p>\n *          <note>\n *\n *             <p>\n *                <code>DetectLabels</code> does not support the detection of activities. However, activity detection\n *         is supported for label detection in videos. For more information, see StartLabelDetection in the Amazon Rekognition Developer Guide.</p>\n *          </note>\n *\n *          <p>You pass the input image as base64-encoded image bytes or as a reference to an image in\n *       an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes is not\n *       supported. The image must be either a PNG or JPEG formatted file. </p>\n *          <p> For each object, scene, and concept the API returns one or more labels. Each label\n *       provides the object name, and the level of confidence that the image contains the object. For\n *       example, suppose the input image has a lighthouse, the sea, and a rock. The response includes\n *       all three labels, one for each object. </p>\n *\n *          <p>\n *             <code>{Name: lighthouse, Confidence: 98.4629}</code>\n *          </p>\n *          <p>\n *             <code>{Name: rock,Confidence: 79.2097}</code>\n *          </p>\n *          <p>\n *             <code> {Name: sea,Confidence: 75.061}</code>\n *          </p>\n *          <p>In the preceding example, the operation returns one label for each of the three\n *       objects. The operation can also return multiple labels for the same object in the image. For\n *       example, if the input image shows a flower (for example, a tulip), the operation might return\n *       the following three labels. </p>\n *          <p>\n *             <code>{Name: flower,Confidence: 99.0562}</code>\n *          </p>\n *          <p>\n *             <code>{Name: plant,Confidence: 99.0562}</code>\n *          </p>\n *          <p>\n *             <code>{Name: tulip,Confidence: 99.0562}</code>\n *          </p>\n *\n *          <p>In this example, the detection algorithm more precisely identifies the flower as a\n *       tulip.</p>\n *          <p>In response, the API returns an array of labels. In addition, the response also\n *       includes the orientation correction. Optionally, you can specify <code>MinConfidence</code> to\n *       control the confidence threshold for the labels returned. The default is 55%. You can also add\n *       the <code>MaxLabels</code> parameter to limit the number of labels returned. </p>\n *          <note>\n *             <p>If the object detected is a person, the operation doesn't provide the same facial\n *         details that the <a>DetectFaces</a> operation provides.</p>\n *          </note>\n *          <p>\n *             <code>DetectLabels</code> returns bounding boxes for instances of common object labels in an array of\n *       <a>Instance</a> objects. An <code>Instance</code> object contains a\n *       <a>BoundingBox</a> object, for the location of the label on the image. It also includes\n *       the confidence by which the bounding box was detected.</p>\n *          <p>\n *             <code>DetectLabels</code> also returns a hierarchical taxonomy of detected labels. For example,\n *       a detected car might be assigned the label <i>car</i>. The label <i>car</i>\n *       has two parent labels: <i>Vehicle</i> (its parent) and <i>Transportation</i> (its\n *       grandparent).\n *       The response returns the entire list of ancestors for a label. Each ancestor is a unique label in the response.\n *       In the previous example, <i>Car</i>, <i>Vehicle</i>, and <i>Transportation</i>\n *       are returned as unique labels in the response.\n *       </p>\n *          <p>This is a stateless API operation. That is, the operation does not persist any\n *       data.</p>\n *          <p>This operation requires permissions to perform the\n *         <code>rekognition:DetectLabels</code> action. </p>\n */\nvar DetectLabelsCommand = /** @class */ (function (_super) {\n    __extends(DetectLabelsCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function DetectLabelsCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    DetectLabelsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"RekognitionClient\";\n        var commandName = \"DetectLabelsCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: DetectLabelsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: DetectLabelsResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    DetectLabelsCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1DetectLabelsCommand(input, context);\n    };\n    DetectLabelsCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1DetectLabelsCommand(output, context);\n    };\n    return DetectLabelsCommand;\n}($Command));\nexport { DetectLabelsCommand };\n//# sourceMappingURL=DetectLabelsCommand.js.map"]},"metadata":{},"sourceType":"module"}