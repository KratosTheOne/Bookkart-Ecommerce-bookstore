{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartContentModerationRequest, StartContentModerationResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartContentModerationCommand, serializeAws_json1_1StartContentModerationCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p> Starts asynchronous detection of unsafe content in a stored video.</p>\n *          <p>Amazon Rekognition Video can moderate content in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n *       and the filename of the video. <code>StartContentModeration</code>\n *         returns a job identifier (<code>JobId</code>) which you use to get the results of the analysis.\n *         When unsafe content analysis is finished, Amazon Rekognition Video publishes a completion status\n *         to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.</p>\n *         <p>To get the results of the unsafe content analysis, first check that the status value published to the Amazon SNS\n *         topic is <code>SUCCEEDED</code>. If so, call <a>GetContentModeration</a> and pass the job identifier\n *         (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>. </p>\n *\n *          <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n */\n\nvar StartContentModerationCommand =\n/** @class */\nfunction (_super) {\n  __extends(StartContentModerationCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StartContentModerationCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StartContentModerationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"StartContentModerationCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartContentModerationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartContentModerationResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StartContentModerationCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartContentModerationCommand(input, context);\n  };\n\n  StartContentModerationCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartContentModerationCommand(output, context);\n  };\n\n  return StartContentModerationCommand;\n}($Command);\n\nexport { StartContentModerationCommand };","map":{"version":3,"sources":["../../../commands/StartContentModerationCommand.ts"],"names":[],"mappings":";AACA,SAAS,6BAAT,EAAwC,8BAAxC,QAA8E,oBAA9E;AACA,SACE,mDADF,EAEE,iDAFF,QAGO,0BAHP;AAIA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;AAYG;;AACH,IAAA,6BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmD,EAAA,SAAA,CAAA,6BAAA,EAAA,MAAA,CAAA,CAAnD,CAKE;AACA;;;AAEA,WAAA,6BAAA,CAAqB,KAArB,EAA8D;AAA9D,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAAyC,CAG5D;AACD;AAED;;AAEG;;;AACH,EAAA,6BAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,mBAAnB;AACA,QAAM,WAAW,GAAG,+BAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,6BAA6B,CAAC,kBAJA;AAKvD,MAAA,wBAAwB,EAAE,8BAA8B,CAAC;AALF,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GAzBD;;AA2BQ,EAAA,6BAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAA6D,OAA7D,EAAoF;AAClF,WAAO,iDAAiD,CAAC,KAAD,EAAQ,OAAR,CAAxD;AACD,GAFO;;AAIA,EAAA,6BAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,mDAAmD,CAAC,MAAD,EAAS,OAAT,CAA1D;AACD,GAFO;;AAMV,SAAA,6BAAA;AAAC,CAtDD,CAAmD,QAAnD,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { StartContentModerationRequest, StartContentModerationResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartContentModerationCommand, serializeAws_json1_1StartContentModerationCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p> Starts asynchronous detection of unsafe content in a stored video.</p>\n *          <p>Amazon Rekognition Video can moderate content in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n *       and the filename of the video. <code>StartContentModeration</code>\n *         returns a job identifier (<code>JobId</code>) which you use to get the results of the analysis.\n *         When unsafe content analysis is finished, Amazon Rekognition Video publishes a completion status\n *         to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.</p>\n *         <p>To get the results of the unsafe content analysis, first check that the status value published to the Amazon SNS\n *         topic is <code>SUCCEEDED</code>. If so, call <a>GetContentModeration</a> and pass the job identifier\n *         (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>. </p>\n *\n *          <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n */\nvar StartContentModerationCommand = /** @class */ (function (_super) {\n    __extends(StartContentModerationCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function StartContentModerationCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    StartContentModerationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"RekognitionClient\";\n        var commandName = \"StartContentModerationCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: StartContentModerationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: StartContentModerationResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    StartContentModerationCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1StartContentModerationCommand(input, context);\n    };\n    StartContentModerationCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1StartContentModerationCommand(output, context);\n    };\n    return StartContentModerationCommand;\n}($Command));\nexport { StartContentModerationCommand };\n//# sourceMappingURL=StartContentModerationCommand.js.map"]},"metadata":{},"sourceType":"module"}