{"ast":null,"code":"import { __values } from \"tslib\";\nimport { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { requestTimeout } from \"./request-timeout\";\n\nvar FetchHttpHandler =\n/** @class */\nfunction () {\n  function FetchHttpHandler(_a) {\n    var _b = _a === void 0 ? {} : _a,\n        requestTimeout = _b.requestTimeout;\n\n    this.requestTimeout = requestTimeout;\n  }\n\n  FetchHttpHandler.prototype.destroy = function () {// Do nothing. TLS and HTTP/2 connection pooling is handled by the browser.\n  };\n\n  FetchHttpHandler.prototype.handle = function (request, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        abortSignal = _b.abortSignal;\n\n    var requestTimeoutInMs = this.requestTimeout; // if the request was already aborted, prevent doing extra work\n\n    if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n      var abortError = new Error(\"Request aborted\");\n      abortError.name = \"AbortError\";\n      return Promise.reject(abortError);\n    }\n\n    var path = request.path;\n\n    if (request.query) {\n      var queryString = buildQueryString(request.query);\n\n      if (queryString) {\n        path += \"?\" + queryString;\n      }\n    }\n\n    var port = request.port,\n        method = request.method;\n    var url = request.protocol + \"//\" + request.hostname + (port ? \":\" + port : \"\") + path; // Request constructor doesn't allow GET/HEAD request with body\n    // ref: https://github.com/whatwg/fetch/issues/551\n\n    var body = method === \"GET\" || method === \"HEAD\" ? undefined : request.body;\n    var requestOptions = {\n      body: body,\n      headers: new Headers(request.headers),\n      method: method\n    }; // some browsers support abort signal\n\n    if (typeof AbortController !== \"undefined\") {\n      requestOptions[\"signal\"] = abortSignal;\n    }\n\n    var fetchRequest = new Request(url, requestOptions);\n    var raceOfPromises = [fetch(fetchRequest).then(function (response) {\n      var e_1, _a;\n\n      var fetchHeaders = response.headers;\n      var transformedHeaders = {};\n\n      try {\n        for (var _b = __values(fetchHeaders.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var pair = _c.value;\n          transformedHeaders[pair[0]] = pair[1];\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      var hasReadableStream = response.body !== undefined; // Return the response with buffered body\n\n      if (!hasReadableStream) {\n        return response.blob().then(function (body) {\n          return {\n            response: new HttpResponse({\n              headers: transformedHeaders,\n              statusCode: response.status,\n              body: body\n            })\n          };\n        });\n      } // Return the response with streaming body\n\n\n      return {\n        response: new HttpResponse({\n          headers: transformedHeaders,\n          statusCode: response.status,\n          body: response.body\n        })\n      };\n    }), requestTimeout(requestTimeoutInMs)];\n\n    if (abortSignal) {\n      raceOfPromises.push(new Promise(function (resolve, reject) {\n        abortSignal.onabort = function () {\n          var abortError = new Error(\"Request aborted\");\n          abortError.name = \"AbortError\";\n          reject(abortError);\n        };\n      }));\n    }\n\n    return Promise.race(raceOfPromises);\n  };\n\n  return FetchHttpHandler;\n}();\n\nexport { FetchHttpHandler };","map":{"version":3,"sources":["../../src/fetch-http-handler.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpHandler, HttpRequest, HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { HeaderBag, HttpHandlerOptions } from \"@aws-sdk/types\";\n\nimport { requestTimeout } from \"./request-timeout\";\n\ndeclare let AbortController: any;\n\n/**\n * Represents the http options that can be passed to a browser http client.\n */\nexport interface FetchHttpHandlerOptions {\n  /**\n   * The number of milliseconds a request can take before being automatically\n   * terminated.\n   */\n  requestTimeout?: number;\n}\n\nexport class FetchHttpHandler implements HttpHandler {\n  private readonly requestTimeout?: number;\n\n  constructor({ requestTimeout }: FetchHttpHandlerOptions = {}) {\n    this.requestTimeout = requestTimeout;\n  }\n\n  destroy(): void {\n    // Do nothing. TLS and HTTP/2 connection pooling is handled by the browser.\n  }\n\n  handle(request: HttpRequest, { abortSignal }: HttpHandlerOptions = {}): Promise<{ response: HttpResponse }> {\n    const requestTimeoutInMs = this.requestTimeout;\n\n    // if the request was already aborted, prevent doing extra work\n    if (abortSignal?.aborted) {\n      const abortError = new Error(\"Request aborted\");\n      abortError.name = \"AbortError\";\n      return Promise.reject(abortError);\n    }\n\n    let path = request.path;\n    if (request.query) {\n      const queryString = buildQueryString(request.query);\n      if (queryString) {\n        path += `?${queryString}`;\n      }\n    }\n\n    const { port, method } = request;\n    const url = `${request.protocol}//${request.hostname}${port ? `:${port}` : \"\"}${path}`;\n    // Request constructor doesn't allow GET/HEAD request with body\n    // ref: https://github.com/whatwg/fetch/issues/551\n    const body = method === \"GET\" || method === \"HEAD\" ? undefined : request.body;\n    const requestOptions: RequestInit = {\n      body,\n      headers: new Headers(request.headers),\n      method: method,\n    };\n\n    // some browsers support abort signal\n    if (typeof AbortController !== \"undefined\") {\n      (requestOptions as any)[\"signal\"] = abortSignal;\n    }\n\n    const fetchRequest = new Request(url, requestOptions);\n    const raceOfPromises = [\n      fetch(fetchRequest).then((response) => {\n        const fetchHeaders: any = response.headers;\n        const transformedHeaders: HeaderBag = {};\n\n        for (const pair of <Array<string[]>>fetchHeaders.entries()) {\n          transformedHeaders[pair[0]] = pair[1];\n        }\n\n        const hasReadableStream = response.body !== undefined;\n\n        // Return the response with buffered body\n        if (!hasReadableStream) {\n          return response.blob().then((body) => ({\n            response: new HttpResponse({\n              headers: transformedHeaders,\n              statusCode: response.status,\n              body,\n            }),\n          }));\n        }\n        // Return the response with streaming body\n        return {\n          response: new HttpResponse({\n            headers: transformedHeaders,\n            statusCode: response.status,\n            body: response.body,\n          }),\n        };\n      }),\n      requestTimeout(requestTimeoutInMs),\n    ];\n    if (abortSignal) {\n      raceOfPromises.push(\n        new Promise<never>((resolve, reject) => {\n          abortSignal.onabort = () => {\n            const abortError = new Error(\"Request aborted\");\n            abortError.name = \"AbortError\";\n            reject(abortError);\n          };\n        })\n      );\n    }\n    return Promise.race(raceOfPromises);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}