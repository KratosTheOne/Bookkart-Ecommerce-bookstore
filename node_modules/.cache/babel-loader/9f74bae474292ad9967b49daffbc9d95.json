{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { GetCredentialsForIdentityCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { resolveLogins } from \"./resolveLogins\";\n/**\n * Retrieves temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from this function call are not cached internally.\n */\n\nexport function fromCognitoIdentity(parameters) {\n  var _this = this;\n\n  return function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var _a, _b, _c, AccessKeyId, Expiration, _d, SecretKey, SessionToken, _e, _f, _g, _h;\n\n      var _j;\n\n      return __generator(this, function (_k) {\n        switch (_k.label) {\n          case 0:\n            _f = (_e = parameters.client).send;\n            _g = GetCredentialsForIdentityCommand.bind;\n            _j = {\n              CustomRoleArn: parameters.customRoleArn,\n              IdentityId: parameters.identityId\n            };\n            if (!parameters.logins) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , resolveLogins(parameters.logins)];\n\n          case 1:\n            _h = _k.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            _h = undefined;\n            _k.label = 3;\n\n          case 3:\n            return [4\n            /*yield*/\n            , _f.apply(_e, [new (_g.apply(GetCredentialsForIdentityCommand, [void 0, (_j.Logins = _h, _j)]))()])];\n\n          case 4:\n            _a = _k.sent().Credentials, _b = _a === void 0 ? throwOnMissingCredentials() : _a, _c = _b.AccessKeyId, AccessKeyId = _c === void 0 ? throwOnMissingAccessKeyId() : _c, Expiration = _b.Expiration, _d = _b.SecretKey, SecretKey = _d === void 0 ? throwOnMissingSecretKey() : _d, SessionToken = _b.SessionToken;\n            return [2\n            /*return*/\n            , {\n              identityId: parameters.identityId,\n              accessKeyId: AccessKeyId,\n              secretAccessKey: SecretKey,\n              sessionToken: SessionToken,\n              expiration: Expiration\n            }];\n        }\n      });\n    });\n  };\n}\n\nfunction throwOnMissingAccessKeyId() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no access key ID\");\n}\n\nfunction throwOnMissingCredentials() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no credentials\");\n}\n\nfunction throwOnMissingSecretKey() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no secret key\");\n}","map":{"version":3,"sources":["../../src/fromCognitoIdentity.ts"],"names":[],"mappings":";AAAA,SAAS,gCAAT,QAAiD,kCAAjD;AACA,SAAS,aAAT,QAA8B,4BAA9B;AAIA,SAAS,aAAT,QAA8B,iBAA9B;AASA;;;;;AAKG;;AACH,OAAM,SAAU,mBAAV,CAA8B,UAA9B,EAAuE;AAA7E,MAAA,KAAA,GAAA,IAAA;;AACE,SAAO,YAAA;AAAA,WAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;;AAQK,YAAA,EAAA,GAAA,CAAA,EAAA,GAAA,UAAU,CAAC,MAAX,EAAkB,IAAlB;iBACJ,gCAAgC,CAAA,I;;AAClC,cAAA,aAAa,EAAE,UAAU,CAAC,a;AAC1B,cAAA,UAAU,EAAE,UAAU,CAAC;;iBACf,UAAU,CAAC,M,EAAX,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AAAoB,mBAAA,CAAA;AAAA;AAAA,cAAM,aAAa,CAAC,UAAU,CAAC,MAAZ,CAAnB,CAAA;;;AAAA,YAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA;;;;;;AAAyC,YAAA,EAAA,GAAA,SAAA;;;;AAJrE,mBAAA,CAAA;AAAA;AAAA,cAAM,EAAA,CAAA,KAAA,CAAA,EAAA,EAAA,CACR,KAAA,EAAA,CAAA,KAAA,CAAI,gCAAJ,EAAoC,CAAA,KAAA,CAAA,GAGlC,EAAA,CAAA,MAAA,GAAM,EAAN,EACA,EAJkC,EAApC,CAAA,GADQ,CAAA,CAAN,CAAA;;;AANF,YAAA,EAAA,GAME,EAAA,CAAA,IAAA,EAAA,CAD6B,WAL/B,EAAA,EAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAKI,yBAAyB,EAL7B,GAK+B,EAL/B,EACE,EAAA,GAAA,EAAA,CAAA,WADF,EACE,WAAW,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,yBAAyB,EAA5B,GAA8B,EAD3C,EAEE,UAAU,GAAA,EAAA,CAAA,UAFZ,EAGE,EAAA,GAAA,EAAA,CAAA,SAHF,EAGE,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,uBAAuB,EAA1B,GAA4B,EAHvC,EAIE,YAAY,GAAA,EAAA,CAAA,YAJd;AAcF,mBAAA,CAAA;AAAA;AAAA,cAAO;AACL,cAAA,UAAU,EAAE,UAAU,CAAC,UADlB;AAEL,cAAA,WAAW,EAAE,WAFR;AAGL,cAAA,eAAe,EAAE,SAHZ;AAIL,cAAA,YAAY,EAAE,YAJT;AAKL,cAAA,UAAU,EAAE;AALP,aAAP,CAAA;;;KAhBK,CAAA;AAuBN,GAvBD;AAwBD;;AAUD,SAAS,yBAAT,GAAkC;AAChC,QAAM,IAAI,aAAJ,CAAkB,yDAAlB,CAAN;AACD;;AAED,SAAS,yBAAT,GAAkC;AAChC,QAAM,IAAI,aAAJ,CAAkB,uDAAlB,CAAN;AACD;;AAED,SAAS,uBAAT,GAAgC;AAC9B,QAAM,IAAI,aAAJ,CAAkB,sDAAlB,CAAN;AACD","sourcesContent":["import { GetCredentialsForIdentityCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { CredentialProvider, Credentials } from \"@aws-sdk/types\";\n\nimport { CognitoProviderParameters } from \"./CognitoProviderParameters\";\nimport { resolveLogins } from \"./resolveLogins\";\n\nexport interface CognitoIdentityCredentials extends Credentials {\n  /**\n   * The Cognito ID returned by the last call to AWS.CognitoIdentity.getOpenIdToken().\n   */\n  identityId: string;\n}\n\n/**\n * Retrieves temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from this function call are not cached internally.\n */\nexport function fromCognitoIdentity(parameters: FromCognitoIdentityParameters): CredentialProvider {\n  return async (): Promise<CognitoIdentityCredentials> => {\n    const {\n      Credentials: {\n        AccessKeyId = throwOnMissingAccessKeyId(),\n        Expiration,\n        SecretKey = throwOnMissingSecretKey(),\n        SessionToken,\n      } = throwOnMissingCredentials(),\n    } = await parameters.client.send(\n      new GetCredentialsForIdentityCommand({\n        CustomRoleArn: parameters.customRoleArn,\n        IdentityId: parameters.identityId,\n        Logins: parameters.logins ? await resolveLogins(parameters.logins) : undefined,\n      })\n    );\n\n    return {\n      identityId: parameters.identityId,\n      accessKeyId: AccessKeyId,\n      secretAccessKey: SecretKey,\n      sessionToken: SessionToken,\n      expiration: Expiration,\n    };\n  };\n}\n\nexport interface FromCognitoIdentityParameters extends CognitoProviderParameters {\n  /**\n   * The unique identifier for the identity against which credentials will be\n   * issued.\n   */\n  identityId: string;\n}\n\nfunction throwOnMissingAccessKeyId(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no access key ID\");\n}\n\nfunction throwOnMissingCredentials(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no credentials\");\n}\n\nfunction throwOnMissingSecretKey(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no secret key\");\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}