{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n/**\n * This middleware modifies the input on S3 CreateBucket requests.  If the LocationConstraint has not been set, this\n * middleware will set a LocationConstraint to match the configured region.  The CreateBucketConfiguration will be\n * removed entirely on requests to the us-east-1 region.\n */\n\n\nfunction locationConstraintMiddleware(options) {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var CreateBucketConfiguration, region;\n        return tslib_1.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              CreateBucketConfiguration = args.input.CreateBucketConfiguration;\n              return [4\n              /*yield*/\n              , options.region()];\n\n            case 1:\n              region = _a.sent();\n\n              if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {\n                args = tslib_1.__assign(tslib_1.__assign({}, args), {\n                  input: tslib_1.__assign(tslib_1.__assign({}, args.input), {\n                    CreateBucketConfiguration: region === \"us-east-1\" ? undefined : {\n                      LocationConstraint: region\n                    }\n                  })\n                });\n              }\n\n              return [2\n              /*return*/\n              , next(args)];\n          }\n        });\n      });\n    };\n  };\n}\n\nexports.locationConstraintMiddleware = locationConstraintMiddleware;\nexports.locationConstraintMiddlewareOptions = {\n  step: \"initialize\",\n  tags: [\"LOCATION_CONSTRAINT\", \"CREATE_BUCKET_CONFIGURATION\"],\n  name: \"locationConstraintMiddleware\"\n};\n\nexports.getLocationConstraintPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(locationConstraintMiddleware(config), exports.locationConstraintMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;AAWA;;;;;;;AAMA,SAAgB,4BAAhB,CACE,OADF,EAC2C;AAD3C,MAAA,KAAA,GAAA,IAAA;;AAGE,SAAO,UACL,IADK,EAC+B;AACD,WAAA,UACnC,IADmC,EACE;AAAA,aAAA,OAAA,CAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AAE7B,cAAA,yBAAyB,GAAK,IAAI,CAAC,KAAL,CAAL,yBAAzB;AAEO,qBAAA,CAAA;AAAA;AAAA,gBAAM,OAAO,CAAC,MAAR,EAAN,CAAA;;;AAAT,cAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;;AACN,kBACE,CAAC,yBAAD,IACA,CAAC,yBAAyB,CAAC,kBAF7B,EAGE;AACA,gBAAA,IAAI,GAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACC,IADD,CAAA,EACK;AACP,kBAAA,KAAK,EAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACA,IAAI,CAAC,KADL,CAAA,EACU;AACb,oBAAA,yBAAyB,EACvB,MAAM,KAAK,WAAX,GAAyB,SAAzB,GAAqC;AAAE,sBAAA,kBAAkB,EAAE;AAAtB;AAF1B,mBADV;AADE,iBADL,CAAJ;AAQD;;AAED,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,CAAC,IAAD,CAAX,CAAA;;;OAnBqC,CAAA;AADF,KAAA;AAqBpC,GAvBD;AAwBD;;AA3BD,OAAA,CAAA,4BAAA,GAAA,4BAAA;AA6Ba,OAAA,CAAA,mCAAA,GAAgE;AAC3E,EAAA,IAAI,EAAE,YADqE;AAE3E,EAAA,IAAI,EAAE,CAAC,qBAAD,EAAwB,6BAAxB,CAFqE;AAG3E,EAAA,IAAI,EAAE;AAHqE,CAAhE;;AAMA,OAAA,CAAA,2BAAA,GAA8B,UACzC,MADyC,EACD;AAChB,SAAC;AACzB,IAAA,YAAY,EAAE,UAAA,WAAA,EAAW;AACvB,MAAA,WAAW,CAAC,GAAZ,CACE,4BAA4B,CAAC,MAAD,CAD9B,EAEE,OAAA,CAAA,mCAFF;AAID;AANwB,GAAD;AAOxB,CATW","sourcesContent":["import {\n  InitializeHandler,\n  InitializeMiddleware,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  MetadataBearer,\n  Pluggable\n} from \"@aws-sdk/types\";\nimport { LocationConstraintResolvedConfig } from \"./configuration\";\n\n/**\n * This middleware modifies the input on S3 CreateBucket requests.  If the LocationConstraint has not been set, this\n * middleware will set a LocationConstraint to match the configured region.  The CreateBucketConfiguration will be\n * removed entirely on requests to the us-east-1 region.\n */\n\nexport function locationConstraintMiddleware(\n  options: LocationConstraintResolvedConfig\n): InitializeMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: InitializeHandler<any, Output>\n  ): InitializeHandler<any, Output> => async (\n    args: InitializeHandlerArguments<any>\n  ): Promise<InitializeHandlerOutput<Output>> => {\n    const { CreateBucketConfiguration } = args.input;\n    //After region config resolution, region is a Provider<string>\n    const region = await options.region();\n    if (\n      !CreateBucketConfiguration ||\n      !CreateBucketConfiguration.LocationConstraint\n    ) {\n      args = {\n        ...args,\n        input: {\n          ...args.input,\n          CreateBucketConfiguration:\n            region === \"us-east-1\" ? undefined : { LocationConstraint: region }\n        }\n      };\n    }\n\n    return next(args);\n  };\n}\n\nexport const locationConstraintMiddlewareOptions: InitializeHandlerOptions = {\n  step: \"initialize\",\n  tags: [\"LOCATION_CONSTRAINT\", \"CREATE_BUCKET_CONFIGURATION\"],\n  name: \"locationConstraintMiddleware\"\n};\n\nexport const getLocationConstraintPlugin = (\n  config: LocationConstraintResolvedConfig\n): Pluggable<any, any> => ({\n  applyToStack: clientStack => {\n    clientStack.add(\n      locationConstraintMiddleware(config),\n      locationConstraintMiddlewareOptions\n    );\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}