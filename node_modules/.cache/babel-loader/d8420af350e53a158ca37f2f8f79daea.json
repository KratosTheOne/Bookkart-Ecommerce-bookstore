{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spread, __values } from \"tslib\";\nimport { DescribeProjectVersionsCommand } from \"../commands/DescribeProjectVersionsCommand\";\nimport { WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nvar checkState = function (client, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var result_1, returnComparator, allStringEq_5, _a, _b, element_4, returnComparator, _c, _d, anyStringEq_4, exception_1;\n\n    var e_1, _e, e_2, _f;\n\n    return __generator(this, function (_g) {\n      switch (_g.label) {\n        case 0:\n          _g.trys.push([0, 2,, 3]);\n\n          return [4\n          /*yield*/\n          , client.send(new DescribeProjectVersionsCommand(input))];\n\n        case 1:\n          result_1 = _g.sent();\n\n          try {\n            returnComparator = function () {\n              var flat_1 = [].concat.apply([], __spread(result_1.ProjectVersionDescriptions));\n              var projection_3 = flat_1.map(function (element_2) {\n                return element_2.Status;\n              });\n              return projection_3;\n            };\n\n            allStringEq_5 = returnComparator().length > 0;\n\n            try {\n              for (_a = __values(returnComparator()), _b = _a.next(); !_b.done; _b = _a.next()) {\n                element_4 = _b.value;\n                allStringEq_5 = allStringEq_5 && element_4 == \"TRAINING_COMPLETED\";\n              }\n            } catch (e_1_1) {\n              e_1 = {\n                error: e_1_1\n              };\n            } finally {\n              try {\n                if (_b && !_b.done && (_e = _a.return)) _e.call(_a);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n            }\n\n            if (allStringEq_5) {\n              return [2\n              /*return*/\n              , {\n                state: WaiterState.SUCCESS\n              }];\n            }\n          } catch (e) {}\n\n          try {\n            returnComparator = function () {\n              var flat_1 = [].concat.apply([], __spread(result_1.ProjectVersionDescriptions));\n              var projection_3 = flat_1.map(function (element_2) {\n                return element_2.Status;\n              });\n              return projection_3;\n            };\n\n            try {\n              for (_c = __values(returnComparator()), _d = _c.next(); !_d.done; _d = _c.next()) {\n                anyStringEq_4 = _d.value;\n\n                if (anyStringEq_4 == \"TRAINING_FAILED\") {\n                  return [2\n                  /*return*/\n                  , {\n                    state: WaiterState.FAILURE\n                  }];\n                }\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (_d && !_d.done && (_f = _c.return)) _f.call(_c);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n          } catch (e) {}\n\n          return [3\n          /*break*/\n          , 3];\n\n        case 2:\n          exception_1 = _g.sent();\n          return [3\n          /*break*/\n          , 3];\n\n        case 3:\n          return [2\n          /*return*/\n          , {\n            state: WaiterState.RETRY\n          }];\n      }\n    });\n  });\n};\n/**\n * Wait until the ProjectVersion training completes.\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeProjectVersionsCommand for polling.\n */\n\n\nexport var waitForProjectVersionTrainingCompleted = function (params, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var serviceDefaults;\n    return __generator(this, function (_a) {\n      serviceDefaults = {\n        minDelay: 120,\n        maxDelay: 120\n      };\n      return [2\n      /*return*/\n      , createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];\n    });\n  });\n};","map":{"version":3,"sources":["../../../waiters/waitForProjectVersionTrainingCompleted.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __awaiter, __generator, __read, __spread, __values } from \"tslib\";\nimport { DescribeProjectVersionsCommand, } from \"../commands/DescribeProjectVersionsCommand\";\nimport { WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\nvar checkState = function (client, input) { return __awaiter(void 0, void 0, void 0, function () {\n    var result_1, returnComparator, allStringEq_5, _a, _b, element_4, returnComparator, _c, _d, anyStringEq_4, exception_1;\n    var e_1, _e, e_2, _f;\n    return __generator(this, function (_g) {\n        switch (_g.label) {\n            case 0:\n                _g.trys.push([0, 2, , 3]);\n                return [4 /*yield*/, client.send(new DescribeProjectVersionsCommand(input))];\n            case 1:\n                result_1 = _g.sent();\n                try {\n                    returnComparator = function () {\n                        var flat_1 = [].concat.apply([], __spread(result_1.ProjectVersionDescriptions));\n                        var projection_3 = flat_1.map(function (element_2) {\n                            return element_2.Status;\n                        });\n                        return projection_3;\n                    };\n                    allStringEq_5 = returnComparator().length > 0;\n                    try {\n                        for (_a = __values(returnComparator()), _b = _a.next(); !_b.done; _b = _a.next()) {\n                            element_4 = _b.value;\n                            allStringEq_5 = allStringEq_5 && element_4 == \"TRAINING_COMPLETED\";\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (_b && !_b.done && (_e = _a.return)) _e.call(_a);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                    if (allStringEq_5) {\n                        return [2 /*return*/, { state: WaiterState.SUCCESS }];\n                    }\n                }\n                catch (e) { }\n                try {\n                    returnComparator = function () {\n                        var flat_1 = [].concat.apply([], __spread(result_1.ProjectVersionDescriptions));\n                        var projection_3 = flat_1.map(function (element_2) {\n                            return element_2.Status;\n                        });\n                        return projection_3;\n                    };\n                    try {\n                        for (_c = __values(returnComparator()), _d = _c.next(); !_d.done; _d = _c.next()) {\n                            anyStringEq_4 = _d.value;\n                            if (anyStringEq_4 == \"TRAINING_FAILED\") {\n                                return [2 /*return*/, { state: WaiterState.FAILURE }];\n                            }\n                        }\n                    }\n                    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                    finally {\n                        try {\n                            if (_d && !_d.done && (_f = _c.return)) _f.call(_c);\n                        }\n                        finally { if (e_2) throw e_2.error; }\n                    }\n                }\n                catch (e) { }\n                return [3 /*break*/, 3];\n            case 2:\n                exception_1 = _g.sent();\n                return [3 /*break*/, 3];\n            case 3: return [2 /*return*/, { state: WaiterState.RETRY }];\n        }\n    });\n}); };\n/**\n * Wait until the ProjectVersion training completes.\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeProjectVersionsCommand for polling.\n */\nexport var waitForProjectVersionTrainingCompleted = function (params, input) { return __awaiter(void 0, void 0, void 0, function () {\n    var serviceDefaults;\n    return __generator(this, function (_a) {\n        serviceDefaults = { minDelay: 120, maxDelay: 120 };\n        return [2 /*return*/, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];\n    });\n}); };\n//# sourceMappingURL=waitForProjectVersionTrainingCompleted.js.map"]},"metadata":{},"sourceType":"module"}