{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { ConsoleLogger as Logger, getAmplifyUserAgent, Platform, Credentials } from '@aws-amplify/core';\nimport { S3Client, PutObjectCommand, CreateMultipartUploadCommand, UploadPartCommand, CompleteMultipartUploadCommand, ListPartsCommand, AbortMultipartUploadCommand } from '@aws-sdk/client-s3';\nimport { AxiosHttpHandler, SEND_PROGRESS_EVENT } from './axios-http-handler';\nimport * as events from 'events';\nimport { parseUrl } from '@aws-sdk/url-parser-node';\nimport { streamCollector } from '@aws-sdk/fetch-http-handler';\nvar logger = new Logger('AWSS3ProviderManagedUpload');\nvar localTestingStorageEndpoint = 'http://localhost:20005';\nvar SET_CONTENT_LENGTH_HEADER = 'contentLengthMiddleware';\n\nvar AWSS3ProviderManagedUpload =\n/** @class */\nfunction () {\n  function AWSS3ProviderManagedUpload(params, opts, emitter) {\n    // Defaults\n    this.minPartSize = 5 * 1024 * 1024; // in MB\n\n    this.queueSize = 4; // Data for current upload\n\n    this.body = null;\n    this.params = null;\n    this.opts = null;\n    this.multiPartMap = [];\n    this.cancel = false; // Progress reporting\n\n    this.bytesUploaded = 0;\n    this.totalBytesToUpload = 0;\n    this.emitter = null;\n    this.params = params;\n    this.opts = opts;\n    this.emitter = emitter;\n  }\n\n  AWSS3ProviderManagedUpload.prototype.upload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, putObjectCommand, s3, uploadId, numberOfPartsToUpload, start, parts;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4\n            /*yield*/\n            , this.validateAndSanitizeBody(this.params.Body)];\n\n          case 1:\n            _a.body = _b.sent();\n            this.totalBytesToUpload = this.byteLength(this.body);\n            if (!(this.totalBytesToUpload <= this.minPartSize)) return [3\n            /*break*/\n            , 3]; // Multipart upload is not required. Upload the sanitized body as is\n\n            this.params.Body = this.body;\n            putObjectCommand = new PutObjectCommand(this.params);\n            return [4\n            /*yield*/\n            , this._createNewS3Client(this.opts, this.emitter)];\n\n          case 2:\n            s3 = _b.sent();\n            return [2\n            /*return*/\n            , s3.send(putObjectCommand)];\n\n          case 3:\n            return [4\n            /*yield*/\n            , this.createMultiPartUpload()];\n\n          case 4:\n            uploadId = _b.sent();\n            numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.minPartSize);\n            start = 0;\n            _b.label = 5;\n\n          case 5:\n            if (!(start < numberOfPartsToUpload)) return [3\n            /*break*/\n            , 10];\n            /** This first block will try to cancel the upload if the cancel\n             *\trequest came before any parts uploads have started.\n             **/\n\n            return [4\n            /*yield*/\n            , this.checkIfUploadCancelled(uploadId)];\n\n          case 6:\n            /** This first block will try to cancel the upload if the cancel\n             *\trequest came before any parts uploads have started.\n             **/\n            _b.sent();\n\n            parts = this.createParts(start);\n            return [4\n            /*yield*/\n            , this.uploadParts(uploadId, parts)];\n\n          case 7:\n            _b.sent();\n            /** Call cleanup a second time in case there were part upload requests\n             *  in flight. This is to ensure that all parts are cleaned up.\n             */\n\n\n            return [4\n            /*yield*/\n            , this.checkIfUploadCancelled(uploadId)];\n\n          case 8:\n            /** Call cleanup a second time in case there were part upload requests\n             *  in flight. This is to ensure that all parts are cleaned up.\n             */\n            _b.sent();\n\n            _b.label = 9;\n\n          case 9:\n            start += this.queueSize;\n            return [3\n            /*break*/\n            , 5];\n\n          case 10:\n            return [4\n            /*yield*/\n            , this.finishMultiPartUpload(uploadId)];\n\n          case 11:\n            // Step 3: Finalize the upload such that S3 can recreate the file\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.createParts = function (startPartNumber) {\n    var parts = [];\n    var partNumber = startPartNumber;\n\n    for (var bodyStart = startPartNumber * this.minPartSize; bodyStart < this.totalBytesToUpload && parts.length < this.queueSize;) {\n      var bodyEnd = Math.min(bodyStart + this.minPartSize, this.totalBytesToUpload);\n      parts.push({\n        bodyPart: this.body.slice(bodyStart, bodyEnd),\n        partNumber: ++partNumber,\n        emitter: new events.EventEmitter(),\n        _lastUploadedBytes: 0\n      });\n      bodyStart += this.minPartSize;\n    }\n\n    return parts;\n  };\n\n  AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var createMultiPartUploadCommand, s3, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            createMultiPartUploadCommand = new CreateMultipartUploadCommand(this.params);\n            return [4\n            /*yield*/\n            , this._createNewS3Client(this.opts)];\n\n          case 1:\n            s3 = _a.sent();\n            return [4\n            /*yield*/\n            , s3.send(createMultiPartUploadCommand)];\n\n          case 2:\n            response = _a.sent();\n            logger.debug(response.UploadId);\n            return [2\n            /*return*/\n            , response.UploadId];\n        }\n      });\n    });\n  };\n  /**\n   * @private Not to be extended outside of tests\n   * @VisibleFotTesting\n   */\n\n\n  AWSS3ProviderManagedUpload.prototype.uploadParts = function (uploadId, parts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises, parts_1, parts_1_1, part, uploadPartCommandInput, uploadPartCommand, s3, e_1_1, allResults, i, error_1;\n\n      var e_1, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            promises = [];\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 6, 7, 8]);\n\n            parts_1 = __values(parts), parts_1_1 = parts_1.next();\n            _b.label = 2;\n\n          case 2:\n            if (!!parts_1_1.done) return [3\n            /*break*/\n            , 5];\n            part = parts_1_1.value;\n            this.setupEventListener(part);\n            uploadPartCommandInput = {\n              PartNumber: part.partNumber,\n              Body: part.bodyPart,\n              UploadId: uploadId,\n              Key: this.params.Key,\n              Bucket: this.params.Bucket\n            };\n            uploadPartCommand = new UploadPartCommand(uploadPartCommandInput);\n            return [4\n            /*yield*/\n            , this._createNewS3Client(this.opts, part.emitter)];\n\n          case 3:\n            s3 = _b.sent();\n            promises.push(s3.send(uploadPartCommand));\n            _b.label = 4;\n\n          case 4:\n            parts_1_1 = parts_1.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_1_1 = _b.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (parts_1_1 && !parts_1_1.done && (_a = parts_1.return)) _a.call(parts_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            _b.trys.push([8, 10,, 11]);\n\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 9:\n            allResults = _b.sent(); // The order of resolved promises is the same as input promise order.\n\n            for (i = 0; i < allResults.length; i++) {\n              this.multiPartMap.push({\n                PartNumber: parts[i].partNumber,\n                ETag: allResults[i].ETag\n              });\n            }\n\n            return [3\n            /*break*/\n            , 11];\n\n          case 10:\n            error_1 = _b.sent();\n            logger.error('error happened while uploading a part. Cancelling the multipart upload', error_1);\n            this.cancelUpload();\n            return [2\n            /*return*/\n            ];\n\n          case 11:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, completeUploadCommand, s3, data, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId,\n              MultipartUpload: {\n                Parts: this.multiPartMap\n              }\n            };\n            completeUploadCommand = new CompleteMultipartUploadCommand(input);\n            return [4\n            /*yield*/\n            , this._createNewS3Client(this.opts)];\n\n          case 1:\n            s3 = _a.sent();\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , s3.send(completeUploadCommand)];\n\n          case 3:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data.Key];\n\n          case 4:\n            error_2 = _a.sent();\n            logger.error('error happened while finishing the upload. Cancelling the multipart upload', error_2);\n            this.cancelUpload();\n            return [2\n            /*return*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.checkIfUploadCancelled = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var errorMessage, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.cancel) return [3\n            /*break*/\n            , 5];\n            errorMessage = 'Upload was cancelled.';\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.cleanup(uploadId)];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_3 = _a.sent();\n            errorMessage += error_3.errorMessage;\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            throw new Error(errorMessage);\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.cancelUpload = function () {\n    this.cancel = true;\n  };\n\n  AWSS3ProviderManagedUpload.prototype.cleanup = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, s3, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Reset this's state\n            this.body = null;\n            this.multiPartMap = [];\n            this.bytesUploaded = 0;\n            this.totalBytesToUpload = 0;\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId\n            };\n            return [4\n            /*yield*/\n            , this._createNewS3Client(this.opts)];\n\n          case 1:\n            s3 = _a.sent();\n            return [4\n            /*yield*/\n            , s3.send(new AbortMultipartUploadCommand(input))];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , s3.send(new ListPartsCommand(input))];\n\n          case 3:\n            data = _a.sent();\n\n            if (data && data.Parts && data.Parts.length > 0) {\n              throw new Error('Multi Part upload clean up failed');\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.setupEventListener = function (part) {\n    var _this = this;\n\n    part.emitter.on(SEND_PROGRESS_EVENT, function (progress) {\n      _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);\n\n      part._lastUploadedBytes = progress.loaded;\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.progressChanged = function (partNumber, incrementalUpdate) {\n    this.bytesUploaded += incrementalUpdate;\n    this.emitter.emit(SEND_PROGRESS_EVENT, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytesToUpload,\n      part: partNumber,\n      key: this.params.Key\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.byteLength = function (input) {\n    if (input === null || input === undefined) return 0;\n\n    if (typeof input.byteLength === 'number') {\n      return input.byteLength;\n    } else if (typeof input.length === 'number') {\n      return input.length;\n    } else if (typeof input.size === 'number') {\n      return input.size;\n    } else if (typeof input.path === 'string') {\n      /* NodeJs Support\n      return require('fs').lstatSync(input.path).size;\n      */\n    } else {\n      throw new Error('Cannot determine length of ' + input);\n    }\n  };\n\n  AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function (body) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isGenericObject(body)) return [3\n            /*break*/\n            , 1]; // Any javascript object\n\n            return [2\n            /*return*/\n            , JSON.stringify(body)];\n\n          case 1:\n            if (!this.isBlob(body)) return [3\n            /*break*/\n            , 4];\n            if (!Platform.isReactNative) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , streamCollector(body)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 3:\n            return [2\n            /*return*/\n            , body];\n\n          case 4:\n            // Files, arrayBuffer etc\n            return [2\n            /*return*/\n            , body];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.isBlob = function (body) {\n    return typeof Blob !== 'undefined' && body instanceof Blob;\n  };\n\n  AWSS3ProviderManagedUpload.prototype.isGenericObject = function (body) {\n    if (body !== null && typeof body === 'object') {\n      try {\n        return !(this.byteLength(body) >= 0);\n      } catch (error) {\n        // If we cannot determine the length of the body, consider it\n        // as a generic object and upload a stringified version of it\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @private\n   * creates an S3 client with new V3 aws sdk\n   */\n\n\n  AWSS3ProviderManagedUpload.prototype._createNewS3Client = function (config, emitter) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, region, dangerouslyConnectToHttpEndpointForTesting, localTestingConfig, client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._getCredentials()];\n\n          case 1:\n            credentials = _a.sent();\n            region = config.region, dangerouslyConnectToHttpEndpointForTesting = config.dangerouslyConnectToHttpEndpointForTesting;\n            localTestingConfig = {};\n\n            if (dangerouslyConnectToHttpEndpointForTesting) {\n              localTestingConfig = {\n                endpoint: localTestingStorageEndpoint,\n                tls: false,\n                bucketEndpoint: false,\n                forcePathStyle: true\n              };\n            }\n\n            client = new S3Client(__assign(__assign({\n              region: region,\n              credentials: credentials\n            }, localTestingConfig), {\n              requestHandler: new AxiosHttpHandler({}, emitter),\n              customUserAgent: getAmplifyUserAgent(),\n              urlParser: parseUrl\n            }));\n            client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n            return [2\n            /*return*/\n            , client];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  AWSS3ProviderManagedUpload.prototype._getCredentials = function () {\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for storage', cred);\n      return cred;\n    }).catch(function (error) {\n      logger.warn('ensure credentials error', error);\n      return false;\n    });\n  };\n\n  return AWSS3ProviderManagedUpload;\n}();\n\nexport { AWSS3ProviderManagedUpload };","map":{"version":3,"sources":["../../src/providers/AWSS3ProviderManagedUpload.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { ConsoleLogger as Logger, getAmplifyUserAgent, Platform, Credentials, } from '@aws-amplify/core';\nimport { S3Client, PutObjectCommand, CreateMultipartUploadCommand, UploadPartCommand, CompleteMultipartUploadCommand, ListPartsCommand, AbortMultipartUploadCommand, } from '@aws-sdk/client-s3';\nimport { AxiosHttpHandler, SEND_PROGRESS_EVENT } from './axios-http-handler';\nimport * as events from 'events';\nimport { parseUrl } from '@aws-sdk/url-parser-node';\nimport { streamCollector } from '@aws-sdk/fetch-http-handler';\nvar logger = new Logger('AWSS3ProviderManagedUpload');\nvar localTestingStorageEndpoint = 'http://localhost:20005';\nvar SET_CONTENT_LENGTH_HEADER = 'contentLengthMiddleware';\nvar AWSS3ProviderManagedUpload = /** @class */ (function () {\n    function AWSS3ProviderManagedUpload(params, opts, emitter) {\n        // Defaults\n        this.minPartSize = 5 * 1024 * 1024; // in MB\n        this.queueSize = 4;\n        // Data for current upload\n        this.body = null;\n        this.params = null;\n        this.opts = null;\n        this.multiPartMap = [];\n        this.cancel = false;\n        // Progress reporting\n        this.bytesUploaded = 0;\n        this.totalBytesToUpload = 0;\n        this.emitter = null;\n        this.params = params;\n        this.opts = opts;\n        this.emitter = emitter;\n    }\n    AWSS3ProviderManagedUpload.prototype.upload = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, putObjectCommand, s3, uploadId, numberOfPartsToUpload, start, parts;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this;\n                        return [4 /*yield*/, this.validateAndSanitizeBody(this.params.Body)];\n                    case 1:\n                        _a.body = _b.sent();\n                        this.totalBytesToUpload = this.byteLength(this.body);\n                        if (!(this.totalBytesToUpload <= this.minPartSize)) return [3 /*break*/, 3];\n                        // Multipart upload is not required. Upload the sanitized body as is\n                        this.params.Body = this.body;\n                        putObjectCommand = new PutObjectCommand(this.params);\n                        return [4 /*yield*/, this._createNewS3Client(this.opts, this.emitter)];\n                    case 2:\n                        s3 = _b.sent();\n                        return [2 /*return*/, s3.send(putObjectCommand)];\n                    case 3: return [4 /*yield*/, this.createMultiPartUpload()];\n                    case 4:\n                        uploadId = _b.sent();\n                        numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.minPartSize);\n                        start = 0;\n                        _b.label = 5;\n                    case 5:\n                        if (!(start < numberOfPartsToUpload)) return [3 /*break*/, 10];\n                        /** This first block will try to cancel the upload if the cancel\n                         *\trequest came before any parts uploads have started.\n                         **/\n                        return [4 /*yield*/, this.checkIfUploadCancelled(uploadId)];\n                    case 6:\n                        /** This first block will try to cancel the upload if the cancel\n                         *\trequest came before any parts uploads have started.\n                         **/\n                        _b.sent();\n                        parts = this.createParts(start);\n                        return [4 /*yield*/, this.uploadParts(uploadId, parts)];\n                    case 7:\n                        _b.sent();\n                        /** Call cleanup a second time in case there were part upload requests\n                         *  in flight. This is to ensure that all parts are cleaned up.\n                         */\n                        return [4 /*yield*/, this.checkIfUploadCancelled(uploadId)];\n                    case 8:\n                        /** Call cleanup a second time in case there were part upload requests\n                         *  in flight. This is to ensure that all parts are cleaned up.\n                         */\n                        _b.sent();\n                        _b.label = 9;\n                    case 9:\n                        start += this.queueSize;\n                        return [3 /*break*/, 5];\n                    case 10: return [4 /*yield*/, this.finishMultiPartUpload(uploadId)];\n                    case 11: \n                    // Step 3: Finalize the upload such that S3 can recreate the file\n                    return [2 /*return*/, _b.sent()];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.createParts = function (startPartNumber) {\n        var parts = [];\n        var partNumber = startPartNumber;\n        for (var bodyStart = startPartNumber * this.minPartSize; bodyStart < this.totalBytesToUpload && parts.length < this.queueSize;) {\n            var bodyEnd = Math.min(bodyStart + this.minPartSize, this.totalBytesToUpload);\n            parts.push({\n                bodyPart: this.body.slice(bodyStart, bodyEnd),\n                partNumber: ++partNumber,\n                emitter: new events.EventEmitter(),\n                _lastUploadedBytes: 0,\n            });\n            bodyStart += this.minPartSize;\n        }\n        return parts;\n    };\n    AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var createMultiPartUploadCommand, s3, response;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        createMultiPartUploadCommand = new CreateMultipartUploadCommand(this.params);\n                        return [4 /*yield*/, this._createNewS3Client(this.opts)];\n                    case 1:\n                        s3 = _a.sent();\n                        return [4 /*yield*/, s3.send(createMultiPartUploadCommand)];\n                    case 2:\n                        response = _a.sent();\n                        logger.debug(response.UploadId);\n                        return [2 /*return*/, response.UploadId];\n                }\n            });\n        });\n    };\n    /**\n     * @private Not to be extended outside of tests\n     * @VisibleFotTesting\n     */\n    AWSS3ProviderManagedUpload.prototype.uploadParts = function (uploadId, parts) {\n        return __awaiter(this, void 0, void 0, function () {\n            var promises, parts_1, parts_1_1, part, uploadPartCommandInput, uploadPartCommand, s3, e_1_1, allResults, i, error_1;\n            var e_1, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        promises = [];\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 6, 7, 8]);\n                        parts_1 = __values(parts), parts_1_1 = parts_1.next();\n                        _b.label = 2;\n                    case 2:\n                        if (!!parts_1_1.done) return [3 /*break*/, 5];\n                        part = parts_1_1.value;\n                        this.setupEventListener(part);\n                        uploadPartCommandInput = {\n                            PartNumber: part.partNumber,\n                            Body: part.bodyPart,\n                            UploadId: uploadId,\n                            Key: this.params.Key,\n                            Bucket: this.params.Bucket,\n                        };\n                        uploadPartCommand = new UploadPartCommand(uploadPartCommandInput);\n                        return [4 /*yield*/, this._createNewS3Client(this.opts, part.emitter)];\n                    case 3:\n                        s3 = _b.sent();\n                        promises.push(s3.send(uploadPartCommand));\n                        _b.label = 4;\n                    case 4:\n                        parts_1_1 = parts_1.next();\n                        return [3 /*break*/, 2];\n                    case 5: return [3 /*break*/, 8];\n                    case 6:\n                        e_1_1 = _b.sent();\n                        e_1 = { error: e_1_1 };\n                        return [3 /*break*/, 8];\n                    case 7:\n                        try {\n                            if (parts_1_1 && !parts_1_1.done && (_a = parts_1.return)) _a.call(parts_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                        return [7 /*endfinally*/];\n                    case 8:\n                        _b.trys.push([8, 10, , 11]);\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 9:\n                        allResults = _b.sent();\n                        // The order of resolved promises is the same as input promise order.\n                        for (i = 0; i < allResults.length; i++) {\n                            this.multiPartMap.push({\n                                PartNumber: parts[i].partNumber,\n                                ETag: allResults[i].ETag,\n                            });\n                        }\n                        return [3 /*break*/, 11];\n                    case 10:\n                        error_1 = _b.sent();\n                        logger.error('error happened while uploading a part. Cancelling the multipart upload', error_1);\n                        this.cancelUpload();\n                        return [2 /*return*/];\n                    case 11: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function (uploadId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var input, completeUploadCommand, s3, data, error_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        input = {\n                            Bucket: this.params.Bucket,\n                            Key: this.params.Key,\n                            UploadId: uploadId,\n                            MultipartUpload: { Parts: this.multiPartMap },\n                        };\n                        completeUploadCommand = new CompleteMultipartUploadCommand(input);\n                        return [4 /*yield*/, this._createNewS3Client(this.opts)];\n                    case 1:\n                        s3 = _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, s3.send(completeUploadCommand)];\n                    case 3:\n                        data = _a.sent();\n                        return [2 /*return*/, data.Key];\n                    case 4:\n                        error_2 = _a.sent();\n                        logger.error('error happened while finishing the upload. Cancelling the multipart upload', error_2);\n                        this.cancelUpload();\n                        return [2 /*return*/];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.checkIfUploadCancelled = function (uploadId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var errorMessage, error_3;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.cancel) return [3 /*break*/, 5];\n                        errorMessage = 'Upload was cancelled.';\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.cleanup(uploadId)];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_3 = _a.sent();\n                        errorMessage += error_3.errorMessage;\n                        return [3 /*break*/, 4];\n                    case 4: throw new Error(errorMessage);\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.cancelUpload = function () {\n        this.cancel = true;\n    };\n    AWSS3ProviderManagedUpload.prototype.cleanup = function (uploadId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var input, s3, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Reset this's state\n                        this.body = null;\n                        this.multiPartMap = [];\n                        this.bytesUploaded = 0;\n                        this.totalBytesToUpload = 0;\n                        input = {\n                            Bucket: this.params.Bucket,\n                            Key: this.params.Key,\n                            UploadId: uploadId,\n                        };\n                        return [4 /*yield*/, this._createNewS3Client(this.opts)];\n                    case 1:\n                        s3 = _a.sent();\n                        return [4 /*yield*/, s3.send(new AbortMultipartUploadCommand(input))];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, s3.send(new ListPartsCommand(input))];\n                    case 3:\n                        data = _a.sent();\n                        if (data && data.Parts && data.Parts.length > 0) {\n                            throw new Error('Multi Part upload clean up failed');\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.setupEventListener = function (part) {\n        var _this = this;\n        part.emitter.on(SEND_PROGRESS_EVENT, function (progress) {\n            _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);\n            part._lastUploadedBytes = progress.loaded;\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.progressChanged = function (partNumber, incrementalUpdate) {\n        this.bytesUploaded += incrementalUpdate;\n        this.emitter.emit(SEND_PROGRESS_EVENT, {\n            loaded: this.bytesUploaded,\n            total: this.totalBytesToUpload,\n            part: partNumber,\n            key: this.params.Key,\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.byteLength = function (input) {\n        if (input === null || input === undefined)\n            return 0;\n        if (typeof input.byteLength === 'number') {\n            return input.byteLength;\n        }\n        else if (typeof input.length === 'number') {\n            return input.length;\n        }\n        else if (typeof input.size === 'number') {\n            return input.size;\n        }\n        else if (typeof input.path === 'string') {\n            /* NodeJs Support\n            return require('fs').lstatSync(input.path).size;\n            */\n        }\n        else {\n            throw new Error('Cannot determine length of ' + input);\n        }\n    };\n    AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function (body) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isGenericObject(body)) return [3 /*break*/, 1];\n                        // Any javascript object\n                        return [2 /*return*/, JSON.stringify(body)];\n                    case 1:\n                        if (!this.isBlob(body)) return [3 /*break*/, 4];\n                        if (!Platform.isReactNative) return [3 /*break*/, 3];\n                        return [4 /*yield*/, streamCollector(body)];\n                    case 2: return [2 /*return*/, _a.sent()];\n                    case 3: return [2 /*return*/, body];\n                    case 4: \n                    // Files, arrayBuffer etc\n                    return [2 /*return*/, body];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.isBlob = function (body) {\n        return typeof Blob !== 'undefined' && body instanceof Blob;\n    };\n    AWSS3ProviderManagedUpload.prototype.isGenericObject = function (body) {\n        if (body !== null && typeof body === 'object') {\n            try {\n                return !(this.byteLength(body) >= 0);\n            }\n            catch (error) {\n                // If we cannot determine the length of the body, consider it\n                // as a generic object and upload a stringified version of it\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @private\n     * creates an S3 client with new V3 aws sdk\n     */\n    AWSS3ProviderManagedUpload.prototype._createNewS3Client = function (config, emitter) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, region, dangerouslyConnectToHttpEndpointForTesting, localTestingConfig, client;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._getCredentials()];\n                    case 1:\n                        credentials = _a.sent();\n                        region = config.region, dangerouslyConnectToHttpEndpointForTesting = config.dangerouslyConnectToHttpEndpointForTesting;\n                        localTestingConfig = {};\n                        if (dangerouslyConnectToHttpEndpointForTesting) {\n                            localTestingConfig = {\n                                endpoint: localTestingStorageEndpoint,\n                                tls: false,\n                                bucketEndpoint: false,\n                                forcePathStyle: true,\n                            };\n                        }\n                        client = new S3Client(__assign(__assign({ region: region,\n                            credentials: credentials }, localTestingConfig), { requestHandler: new AxiosHttpHandler({}, emitter), customUserAgent: getAmplifyUserAgent(), urlParser: parseUrl }));\n                        client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n                        return [2 /*return*/, client];\n                }\n            });\n        });\n    };\n    /**\n     * @private\n     */\n    AWSS3ProviderManagedUpload.prototype._getCredentials = function () {\n        return Credentials.get()\n            .then(function (credentials) {\n            if (!credentials)\n                return false;\n            var cred = Credentials.shear(credentials);\n            logger.debug('set credentials for storage', cred);\n            return cred;\n        })\n            .catch(function (error) {\n            logger.warn('ensure credentials error', error);\n            return false;\n        });\n    };\n    return AWSS3ProviderManagedUpload;\n}());\nexport { AWSS3ProviderManagedUpload };\n//# sourceMappingURL=AWSS3ProviderManagedUpload.js.map"]},"metadata":{},"sourceType":"module"}