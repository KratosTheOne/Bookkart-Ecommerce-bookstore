{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { RecognizeCelebritiesRequest, RecognizeCelebritiesResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1RecognizeCelebritiesCommand, serializeAws_json1_1RecognizeCelebritiesCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Returns an array of celebrities recognized in the input image.  For more information, see Recognizing Celebrities\n *     in the Amazon Rekognition Developer Guide. </p>\n *          <p>\n *             <code>RecognizeCelebrities</code> returns the 64 largest faces in the image. It lists\n *       recognized celebrities in the <code>CelebrityFaces</code> array and unrecognized faces in the\n *         <code>UnrecognizedFaces</code> array. <code>RecognizeCelebrities</code> doesn't return\n *       celebrities whose faces aren't among the largest 64 faces in the image.</p>\n *\n *          <p>For each celebrity recognized, <code>RecognizeCelebrities</code> returns a\n *         <code>Celebrity</code> object. The <code>Celebrity</code> object contains the celebrity\n *       name, ID, URL links to additional information, match confidence, and a\n *         <code>ComparedFace</code> object that you can use to locate the celebrity's face on the\n *       image.</p>\n *          <p>Amazon Rekognition doesn't retain information about which images a celebrity has been recognized\n *       in. Your application must store this information and use the <code>Celebrity</code> ID\n *       property as a unique identifier for the celebrity. If you don't store the celebrity name or\n *       additional information URLs returned by <code>RecognizeCelebrities</code>, you will need the\n *       ID to identify the celebrity in a call to the <a>GetCelebrityInfo</a>\n *       operation.</p>\n *          <p>You pass the input image either as base64-encoded image bytes or as a reference to an\n *       image in an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes is not\n *       supported. The image must be either a PNG or JPEG formatted file. </p>\n *\n *\n *\n *\n *          <p>For an example, see Recognizing Celebrities in an Image in the Amazon Rekognition Developer Guide.</p>\n *          <p>This operation requires permissions to perform the\n *         <code>rekognition:RecognizeCelebrities</code> operation.</p>\n */\n\nvar RecognizeCelebritiesCommand =\n/** @class */\nfunction (_super) {\n  __extends(RecognizeCelebritiesCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function RecognizeCelebritiesCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  RecognizeCelebritiesCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"RecognizeCelebritiesCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: RecognizeCelebritiesRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: RecognizeCelebritiesResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  RecognizeCelebritiesCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1RecognizeCelebritiesCommand(input, context);\n  };\n\n  RecognizeCelebritiesCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1RecognizeCelebritiesCommand(output, context);\n  };\n\n  return RecognizeCelebritiesCommand;\n}($Command);\n\nexport { RecognizeCelebritiesCommand };","map":{"version":3,"sources":["../../../commands/RecognizeCelebritiesCommand.ts"],"names":[],"mappings":";AACA,SAAS,2BAAT,EAAsC,4BAAtC,QAA0E,oBAA1E;AACA,SACE,iDADF,EAEE,+CAFF,QAGO,0BAHP;AAIA,SAAS,cAAT,QAA+B,2BAA/B;AAEA,SAAS,OAAO,IAAI,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCG;;AACH,IAAA,2BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiD,EAAA,SAAA,CAAA,2BAAA,EAAA,MAAA,CAAA,CAAjD,CAKE;AACA;;;AAEA,WAAA,2BAAA,CAAqB,KAArB,EAA4D;AAA5D,QAAA,KAAA,GACE;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFT;;AAAqB,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;iBAAuC,CAG1D;AACD;AAED;;AAEG;;;AACH,EAAA,2BAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,WADF,EAEE,aAFF,EAGE,OAHF,EAGgC;AAE9B,SAAK,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,aAAD,EAAgB,KAAK,SAArB,EAAgC,KAAK,WAArC,CAAvC;AAEA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAZ,CAAmB,KAAK,eAAxB,CAAd;AAEQ,QAAA,MAAM,GAAK,aAAa,CAAlB,MAAN;AACR,QAAM,UAAU,GAAG,mBAAnB;AACA,QAAM,WAAW,GAAG,6BAApB;AACA,QAAM,uBAAuB,GAA4B;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,UAAU,EAAA,UAF6C;AAGvD,MAAA,WAAW,EAAA,WAH4C;AAIvD,MAAA,uBAAuB,EAAE,2BAA2B,CAAC,kBAJE;AAKvD,MAAA,wBAAwB,EAAE,4BAA4B,CAAC;AALA,KAAzD;AAOQ,QAAA,cAAc,GAAK,aAAa,CAAlB,cAAd;AACR,WAAO,KAAK,CAAC,OAAN,CACL,UAAC,OAAD,EAAuC;AACrC,aAAA,cAAc,CAAC,MAAf,CAAsB,OAAO,CAAC,OAA9B,EAAwD,OAAO,IAAI,EAAnE,CAAA;AAAsE,KAFnE,EAGL,uBAHK,CAAP;AAKD,GAzBD;;AA2BQ,EAAA,2BAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAA2D,OAA3D,EAAkF;AAChF,WAAO,+CAA+C,CAAC,KAAD,EAAQ,OAAR,CAAtD;AACD,GAFO;;AAIA,EAAA,2BAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAA4C,OAA5C,EAAmE;AACjE,WAAO,iDAAiD,CAAC,MAAD,EAAS,OAAT,CAAxD;AACD,GAFO;;AAMV,SAAA,2BAAA;AAAC,CAtDD,CAAiD,QAAjD,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { RecognizeCelebritiesRequest, RecognizeCelebritiesResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1RecognizeCelebritiesCommand, serializeAws_json1_1RecognizeCelebritiesCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Returns an array of celebrities recognized in the input image.  For more information, see Recognizing Celebrities\n *     in the Amazon Rekognition Developer Guide. </p>\n *          <p>\n *             <code>RecognizeCelebrities</code> returns the 64 largest faces in the image. It lists\n *       recognized celebrities in the <code>CelebrityFaces</code> array and unrecognized faces in the\n *         <code>UnrecognizedFaces</code> array. <code>RecognizeCelebrities</code> doesn't return\n *       celebrities whose faces aren't among the largest 64 faces in the image.</p>\n *\n *          <p>For each celebrity recognized, <code>RecognizeCelebrities</code> returns a\n *         <code>Celebrity</code> object. The <code>Celebrity</code> object contains the celebrity\n *       name, ID, URL links to additional information, match confidence, and a\n *         <code>ComparedFace</code> object that you can use to locate the celebrity's face on the\n *       image.</p>\n *          <p>Amazon Rekognition doesn't retain information about which images a celebrity has been recognized\n *       in. Your application must store this information and use the <code>Celebrity</code> ID\n *       property as a unique identifier for the celebrity. If you don't store the celebrity name or\n *       additional information URLs returned by <code>RecognizeCelebrities</code>, you will need the\n *       ID to identify the celebrity in a call to the <a>GetCelebrityInfo</a>\n *       operation.</p>\n *          <p>You pass the input image either as base64-encoded image bytes or as a reference to an\n *       image in an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes is not\n *       supported. The image must be either a PNG or JPEG formatted file. </p>\n *\n *\n *\n *\n *          <p>For an example, see Recognizing Celebrities in an Image in the Amazon Rekognition Developer Guide.</p>\n *          <p>This operation requires permissions to perform the\n *         <code>rekognition:RecognizeCelebrities</code> operation.</p>\n */\nvar RecognizeCelebritiesCommand = /** @class */ (function (_super) {\n    __extends(RecognizeCelebritiesCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function RecognizeCelebritiesCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    RecognizeCelebritiesCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"RekognitionClient\";\n        var commandName = \"RecognizeCelebritiesCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: RecognizeCelebritiesRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: RecognizeCelebritiesResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    RecognizeCelebritiesCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1RecognizeCelebritiesCommand(input, context);\n    };\n    RecognizeCelebritiesCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1RecognizeCelebritiesCommand(output, context);\n    };\n    return RecognizeCelebritiesCommand;\n}($Command));\nexport { RecognizeCelebritiesCommand };\n//# sourceMappingURL=RecognizeCelebritiesCommand.js.map"]},"metadata":{},"sourceType":"module"}