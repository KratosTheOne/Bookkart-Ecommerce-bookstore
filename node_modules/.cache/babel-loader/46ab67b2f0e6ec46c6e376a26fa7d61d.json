{"ast":null,"code":"import { NO_RETRY_INCREMENT, RETRY_COST, TIMEOUT_RETRY_COST } from \"./constants\";\nexport var getDefaultRetryQuota = function getDefaultRetryQuota(initialRetryTokens) {\n  var MAX_CAPACITY = initialRetryTokens;\n  var availableCapacity = initialRetryTokens;\n\n  var getCapacityAmount = function getCapacityAmount(error) {\n    return error.name === \"TimeoutError\" ? TIMEOUT_RETRY_COST : RETRY_COST;\n  };\n\n  var hasRetryTokens = function hasRetryTokens(error) {\n    return getCapacityAmount(error) <= availableCapacity;\n  };\n\n  var retrieveRetryTokens = function retrieveRetryTokens(error) {\n    if (!hasRetryTokens(error)) {\n      // retryStrategy should stop retrying, and return last error\n      throw new Error(\"No retry token available\");\n    }\n\n    var capacityAmount = getCapacityAmount(error);\n    availableCapacity -= capacityAmount;\n    return capacityAmount;\n  };\n\n  var releaseRetryTokens = function releaseRetryTokens(capacityReleaseAmount) {\n    availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : NO_RETRY_INCREMENT;\n    availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n  };\n\n  return Object.freeze({\n    hasRetryTokens: hasRetryTokens,\n    retrieveRetryTokens: retrieveRetryTokens,\n    releaseRetryTokens: releaseRetryTokens\n  });\n};","map":{"version":3,"sources":["../../src/defaultRetryQuota.ts"],"names":[],"mappings":"AAEA,SAAS,kBAAT,EAA6B,UAA7B,EAAyC,kBAAzC,QAAmE,aAAnE;AAGA,OAAO,IAAM,oBAAoB,GAAG,SAAvB,oBAAuB,CAAC,kBAAD,EAA2B;AAC7D,MAAM,YAAY,GAAG,kBAArB;AACA,MAAI,iBAAiB,GAAG,kBAAxB;;AAEA,MAAM,iBAAiB,GAAG,SAApB,iBAAoB,CAAC,KAAD,EAAgB;AAAK,WAAC,KAAK,CAAC,IAAN,KAAe,cAAf,GAAgC,kBAAhC,GAAD,UAAA;AAAiE,GAAhH;;AAEA,MAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,KAAD,EAAgB;AAAK,WAAA,iBAAiB,CAAC,KAAD,CAAjB,IAAA,iBAAA;AAA6C,GAAzF;;AAEA,MAAM,mBAAmB,GAAG,SAAtB,mBAAsB,CAAC,KAAD,EAAgB;AAC1C,QAAI,CAAC,cAAc,CAAC,KAAD,CAAnB,EAA4B;AAC1B;AACA,YAAM,IAAI,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACD,QAAM,cAAc,GAAG,iBAAiB,CAAC,KAAD,CAAxC;AACA,IAAA,iBAAiB,IAAI,cAArB;AACA,WAAO,cAAP;AACD,GARD;;AAUA,MAAM,kBAAkB,GAAG,SAArB,kBAAqB,CAAC,qBAAD,EAA+B;AACxD,IAAA,iBAAiB,IAAI,qBAAqB,KAAA,IAArB,IAAA,qBAAqB,KAAA,KAAA,CAArB,GAAA,qBAAA,GAAyB,kBAA9C;AACA,IAAA,iBAAiB,GAAG,IAAI,CAAC,GAAL,CAAS,iBAAT,EAA4B,YAA5B,CAApB;AACD,GAHD;;AAKA,SAAO,MAAM,CAAC,MAAP,CAAc;AACnB,IAAA,cAAc,EAAA,cADK;AAEnB,IAAA,mBAAmB,EAAA,mBAFA;AAGnB,IAAA,kBAAkB,EAAA;AAHC,GAAd,CAAP;AAKD,CA5BM","sourcesContent":["import { SdkError } from \"@aws-sdk/smithy-client\";\n\nimport { NO_RETRY_INCREMENT, RETRY_COST, TIMEOUT_RETRY_COST } from \"./constants\";\nimport { RetryQuota } from \"./defaultStrategy\";\n\nexport const getDefaultRetryQuota = (initialRetryTokens: number): RetryQuota => {\n  const MAX_CAPACITY = initialRetryTokens;\n  let availableCapacity = initialRetryTokens;\n\n  const getCapacityAmount = (error: SdkError) => (error.name === \"TimeoutError\" ? TIMEOUT_RETRY_COST : RETRY_COST);\n\n  const hasRetryTokens = (error: SdkError) => getCapacityAmount(error) <= availableCapacity;\n\n  const retrieveRetryTokens = (error: SdkError) => {\n    if (!hasRetryTokens(error)) {\n      // retryStrategy should stop retrying, and return last error\n      throw new Error(\"No retry token available\");\n    }\n    const capacityAmount = getCapacityAmount(error);\n    availableCapacity -= capacityAmount;\n    return capacityAmount;\n  };\n\n  const releaseRetryTokens = (capacityReleaseAmount?: number) => {\n    availableCapacity += capacityReleaseAmount ?? NO_RETRY_INCREMENT;\n    availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n  };\n\n  return Object.freeze({\n    hasRetryTokens,\n    retrieveRetryTokens,\n    releaseRetryTokens,\n  });\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}