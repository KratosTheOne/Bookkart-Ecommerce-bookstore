{"ast":null,"code":"import { __values } from \"tslib\";\nimport { escapeAttribute } from \"./escape-attribute\";\n/**\n * Represents an XML node.\n */\n\nvar XmlNode =\n/** @class */\nfunction () {\n  function XmlNode(name, children) {\n    if (children === void 0) {\n      children = [];\n    }\n\n    this.name = name;\n    this.children = children;\n    this.attributes = {};\n  }\n\n  XmlNode.prototype.withName = function (name) {\n    this.name = name;\n    return this;\n  };\n\n  XmlNode.prototype.addAttribute = function (name, value) {\n    this.attributes[name] = value;\n    return this;\n  };\n\n  XmlNode.prototype.addChildNode = function (child) {\n    this.children.push(child);\n    return this;\n  };\n\n  XmlNode.prototype.removeAttribute = function (name) {\n    delete this.attributes[name];\n    return this;\n  };\n\n  XmlNode.prototype.toString = function () {\n    var e_1, _a;\n\n    var hasChildren = Boolean(this.children.length);\n    var xmlText = \"<\" + this.name; // add attributes\n\n    var attributes = this.attributes;\n\n    try {\n      for (var _b = __values(Object.keys(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var attributeName = _c.value;\n        var attribute = attributes[attributeName];\n\n        if (typeof attribute !== \"undefined\" && attribute !== null) {\n          xmlText += \" \" + attributeName + \"=\\\"\" + escapeAttribute(\"\" + attribute) + \"\\\"\";\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return xmlText += !hasChildren ? \"/>\" : \">\" + this.children.map(function (c) {\n      return c.toString();\n    }).join(\"\") + \"</\" + this.name + \">\";\n  };\n\n  return XmlNode;\n}();\n\nexport { XmlNode };","map":{"version":3,"sources":["../../src/XmlNode.ts"],"names":[],"mappings":";AAAA,SAAS,eAAT,QAAgC,oBAAhC;AAGA;;AAEG;;AACH,IAAA,OAAA;AAAA;AAAA,YAAA;AAGE,WAAA,OAAA,CAAoB,IAApB,EAAkD,QAAlD,EAA6E;AAA3B,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,EAAA;AAA2B;;AAAzD,SAAA,IAAA,GAAA,IAAA;AAA8B,SAAA,QAAA,GAAA,QAAA;AAF1C,SAAA,UAAA,GAAsC,EAAtC;AAEyE;;AAEjF,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,IAAT,EAAqB;AACnB,SAAK,IAAL,GAAY,IAAZ;AACA,WAAO,IAAP;AACD,GAHD;;AAKA,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,IAAb,EAA2B,KAA3B,EAAqC;AACnC,SAAK,UAAL,CAAgB,IAAhB,IAAwB,KAAxB;AACA,WAAO,IAAP;AACD,GAHD;;AAKA,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,KAAb,EAA8B;AAC5B,SAAK,QAAL,CAAc,IAAd,CAAmB,KAAnB;AACA,WAAO,IAAP;AACD,GAHD;;AAKA,EAAA,OAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,IAAhB,EAA4B;AAC1B,WAAO,KAAK,UAAL,CAAgB,IAAhB,CAAP;AACA,WAAO,IAAP;AACD,GAHD;;AAKA,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;;;AACE,QAAM,WAAW,GAAG,OAAO,CAAC,KAAK,QAAL,CAAc,MAAf,CAA3B;AACA,QAAI,OAAO,GAAG,MAAI,KAAK,IAAvB,CAFF,CAGE;;AACA,QAAM,UAAU,GAAG,KAAK,UAAxB;;;AACA,WAA4B,IAAA,EAAA,GAAA,QAAA,CAAA,MAAM,CAAC,IAAP,CAAY,UAAZ,CAAA,CAAA,EAAuB,EAAA,GAAA,EAAA,CAAA,IAAA,EAAnD,EAAmD,CAAA,EAAA,CAAA,IAAnD,EAAmD,EAAA,GAAA,EAAA,CAAA,IAAA,EAAnD,EAAqD;AAAhD,YAAM,aAAa,GAAA,EAAA,CAAA,KAAnB;AACH,YAAM,SAAS,GAAG,UAAU,CAAC,aAAD,CAA5B;;AACA,YAAI,OAAO,SAAP,KAAqB,WAArB,IAAoC,SAAS,KAAK,IAAtD,EAA4D;AAC1D,UAAA,OAAO,IAAI,MAAI,aAAJ,GAAiB,KAAjB,GAAsB,eAAe,CAAC,KAAK,SAAN,CAArC,GAAqD,IAAhE;AACD;AACF;;;;;;;;;;;;;AAED,WAAQ,OAAO,IAAI,CAAC,WAAD,GAAe,IAAf,GAAsB,MAAI,KAAK,QAAL,CAAc,GAAd,CAAkB,UAAC,CAAD,EAAE;AAAK,aAAA,CAAC,CAAD,QAAA,EAAA;AAAY,KAArC,EAAuC,IAAvC,CAA4C,EAA5C,CAAJ,GAAmD,IAAnD,GAAwD,KAAK,IAA7D,GAAiE,GAA1G;AACD,GAbD;;AAcF,SAAA,OAAA;AAAC,CAvCD,EAAA","sourcesContent":["import { escapeAttribute } from \"./escape-attribute\";\nimport { Stringable } from \"./stringable\";\n\n/**\n * Represents an XML node.\n */\nexport class XmlNode {\n  private attributes: { [name: string]: any } = {};\n\n  constructor(private name: string, public readonly children: Stringable[] = []) {}\n\n  withName(name: string): XmlNode {\n    this.name = name;\n    return this;\n  }\n\n  addAttribute(name: string, value: any): XmlNode {\n    this.attributes[name] = value;\n    return this;\n  }\n\n  addChildNode(child: Stringable): XmlNode {\n    this.children.push(child);\n    return this;\n  }\n\n  removeAttribute(name: string): XmlNode {\n    delete this.attributes[name];\n    return this;\n  }\n\n  toString(): string {\n    const hasChildren = Boolean(this.children.length);\n    let xmlText = `<${this.name}`;\n    // add attributes\n    const attributes = this.attributes;\n    for (const attributeName of Object.keys(attributes)) {\n      const attribute = attributes[attributeName];\n      if (typeof attribute !== \"undefined\" && attribute !== null) {\n        xmlText += ` ${attributeName}=\"${escapeAttribute(\"\" + attribute)}\"`;\n      }\n    }\n\n    return (xmlText += !hasChildren ? \"/>\" : `>${this.children.map((c) => c.toString()).join(\"\")}</${this.name}>`);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}